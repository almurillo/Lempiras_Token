{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "import opfLibrary as cl\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from numpy import nan\n",
    "import seaborn as sns\n",
    "import graphviz\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "%matplotlib inline\n",
    "#np.set_printoptions(formatter={'float_kind':'{:f}'.forma})\n",
    "\n",
    "# To increase size of the sns plots\n",
    "sns.set(rc={'figure.figsize':(8,6)})\n",
    "\n",
    "from pandas import to_datetime\n",
    "import itertools\n",
    "import warnings\n",
    "import datetime\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "import xgboost\n",
    "\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import tree\n",
    "from sklearn.tree import DecisionTreeClassifier, export_graphviz\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true,
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# Data from 2019 onwards. Prior to that we were not tagging balance transfer therefore payment rate cannot be calculated accurately\n",
    "query_string = 'early_indicators_data_funded.sql'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "df = cl.execute_sql(query_string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "Index(['rpmt_id', 'is_active', 'is_charged_off', 'opp_term', 'opp_factor',\n       'opp_percent_of_rev', 'opp_fico_score', 'rpmt_advance_date',\n       'rpmt_funding_date', 'rpmt_funded_amt', 'rpmt_industry', 'rpmt_product',\n       'opp_years_in_biz', 'rpmt_ed', 'rpmt_fmpr', 'opp_epi', 'm1_deposits',\n       'm1_no_of_deposits', 'm1_adbs', 'm1_neg_days', 'm1_nsfs', 'm2_deposits',\n       'm2_no_of_deposits', 'm2_adbs', 'm2_neg_days', 'm2_nsfs', 'm3_deposits',\n       'm3_no_of_deposits', 'm3_adbs', 'm3_neg_days', 'm3_nsfs',\n       'opp_adbs_div_rev', 'opp_last_mo_rev_trend', 'opp_rev_vol',\n       'pmt_rate_30d', 'pmt_rate_60d', 'pmt_rate_90d', 'hit_30_day_mark',\n       'hit_60_day_mark', 'hit_90_day_mark'],\n      dtype='object')"
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "              rpmt_id  is_active  is_charged_off  opp_term  opp_factor  \\\n0  a4G3Z0000026Am7UAE          0               0       8.5        1.49   \n1  a4G3Z0000026DK4UAM          0               0      11.0        1.49   \n2  a4G5e000000RPmzEAG          1               0       9.0        1.49   \n3  a4G3Z000000y8TvUAI          0               0       9.0        1.45   \n4  a4G3Z000000yKiaUAE          0               1       6.0        1.49   \n\n   opp_percent_of_rev  opp_fico_score rpmt_advance_date rpmt_funding_date  \\\n0               10.29           693.0        2020-12-17        2020-12-15   \n1               17.15             0.0        2021-01-06        2021-01-04   \n2               16.59           586.0        2022-05-05        2022-05-04   \n3               14.62           684.0        2019-09-25        2019-09-24   \n4               18.96           646.0        2020-01-27        2020-01-24   \n\n   rpmt_funded_amt  ... m3_nsfs opp_adbs_div_rev  opp_last_mo_rev_trend  \\\n0          27000.0  ...     0.0             25.0                  -12.0   \n1          38000.0  ...     0.0             33.0                   -9.0   \n2          30000.0  ...     0.0              8.0                    6.0   \n3          30000.0  ...     0.0             21.0                    4.0   \n4           4200.0  ...     0.0             17.0                  -41.0   \n\n   opp_rev_vol  pmt_rate_30d  pmt_rate_60d  pmt_rate_90d  hit_30_day_mark  \\\n0         20.0      1.000000      0.976744      1.000000                1   \n1         17.0      1.000000      1.000000      1.000000                1   \n2         28.0      1.000000      1.000000      1.000000                1   \n3         10.0      0.920000      0.955556      0.969231                1   \n4         77.0      0.521739      0.295606      0.242589                1   \n\n   hit_60_day_mark  hit_90_day_mark  \n0                1                1  \n1                1                1  \n2                1                1  \n3                1                1  \n4                1                1  \n\n[5 rows x 40 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rpmt_id</th>\n      <th>is_active</th>\n      <th>is_charged_off</th>\n      <th>opp_term</th>\n      <th>opp_factor</th>\n      <th>opp_percent_of_rev</th>\n      <th>opp_fico_score</th>\n      <th>rpmt_advance_date</th>\n      <th>rpmt_funding_date</th>\n      <th>rpmt_funded_amt</th>\n      <th>...</th>\n      <th>m3_nsfs</th>\n      <th>opp_adbs_div_rev</th>\n      <th>opp_last_mo_rev_trend</th>\n      <th>opp_rev_vol</th>\n      <th>pmt_rate_30d</th>\n      <th>pmt_rate_60d</th>\n      <th>pmt_rate_90d</th>\n      <th>hit_30_day_mark</th>\n      <th>hit_60_day_mark</th>\n      <th>hit_90_day_mark</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>a4G3Z0000026Am7UAE</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.5</td>\n      <td>1.49</td>\n      <td>10.29</td>\n      <td>693.0</td>\n      <td>2020-12-17</td>\n      <td>2020-12-15</td>\n      <td>27000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>25.0</td>\n      <td>-12.0</td>\n      <td>20.0</td>\n      <td>1.000000</td>\n      <td>0.976744</td>\n      <td>1.000000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>a4G3Z0000026DK4UAM</td>\n      <td>0</td>\n      <td>0</td>\n      <td>11.0</td>\n      <td>1.49</td>\n      <td>17.15</td>\n      <td>0.0</td>\n      <td>2021-01-06</td>\n      <td>2021-01-04</td>\n      <td>38000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>33.0</td>\n      <td>-9.0</td>\n      <td>17.0</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>a4G5e000000RPmzEAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>9.0</td>\n      <td>1.49</td>\n      <td>16.59</td>\n      <td>586.0</td>\n      <td>2022-05-05</td>\n      <td>2022-05-04</td>\n      <td>30000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>28.0</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>a4G3Z000000y8TvUAI</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.0</td>\n      <td>1.45</td>\n      <td>14.62</td>\n      <td>684.0</td>\n      <td>2019-09-25</td>\n      <td>2019-09-24</td>\n      <td>30000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>21.0</td>\n      <td>4.0</td>\n      <td>10.0</td>\n      <td>0.920000</td>\n      <td>0.955556</td>\n      <td>0.969231</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>a4G3Z000000yKiaUAE</td>\n      <td>0</td>\n      <td>1</td>\n      <td>6.0</td>\n      <td>1.49</td>\n      <td>18.96</td>\n      <td>646.0</td>\n      <td>2020-01-27</td>\n      <td>2020-01-24</td>\n      <td>4200.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>17.0</td>\n      <td>-41.0</td>\n      <td>77.0</td>\n      <td>0.521739</td>\n      <td>0.295606</td>\n      <td>0.242589</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 40 columns</p>\n</div>"
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "(20032, 40)"
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "nac_df = df.loc[df['rpmt_advance_date'].between('2021-01-01', '2022-04-30')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "nac_df = nac_df[nac_df['is_active'] == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "nac_df.drop(['is_active'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "(7808, 39)"
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nac_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "rpmt_id                   0\nis_charged_off            0\nopp_term                  0\nopp_factor                0\nopp_percent_of_rev        0\nopp_fico_score            0\nrpmt_advance_date         0\nrpmt_funding_date         0\nrpmt_funded_amt           0\nrpmt_industry             0\nrpmt_product              0\nopp_years_in_biz          2\nrpmt_ed                   0\nrpmt_fmpr                 0\nopp_epi                   0\nm1_deposits               2\nm1_no_of_deposits         2\nm1_adbs                   2\nm1_neg_days               3\nm1_nsfs                   2\nm2_deposits              12\nm2_no_of_deposits        12\nm2_adbs                  12\nm2_neg_days              12\nm2_nsfs                  12\nm3_deposits              78\nm3_no_of_deposits        78\nm3_adbs                  78\nm3_neg_days              78\nm3_nsfs                  80\nopp_adbs_div_rev         83\nopp_last_mo_rev_trend    83\nopp_rev_vol              83\npmt_rate_30d              2\npmt_rate_60d              2\npmt_rate_90d              2\nhit_30_day_mark           0\nhit_60_day_mark           0\nhit_90_day_mark           0\ndtype: int64"
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nac_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# Second query drops\n",
    "df_clean = nac_df.dropna(subset=['m3_deposits','opp_rev_vol', 'pmt_rate_30d','opp_years_in_biz','m3_nsfs','m1_neg_days'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "rpmt_id                  0\nis_charged_off           0\nopp_term                 0\nopp_factor               0\nopp_percent_of_rev       0\nopp_fico_score           0\nrpmt_advance_date        0\nrpmt_funding_date        0\nrpmt_funded_amt          0\nrpmt_industry            0\nrpmt_product             0\nopp_years_in_biz         0\nrpmt_ed                  0\nrpmt_fmpr                0\nopp_epi                  0\nm1_deposits              0\nm1_no_of_deposits        0\nm1_adbs                  0\nm1_neg_days              0\nm1_nsfs                  0\nm2_deposits              0\nm2_no_of_deposits        0\nm2_adbs                  0\nm2_neg_days              0\nm2_nsfs                  0\nm3_deposits              0\nm3_no_of_deposits        0\nm3_adbs                  0\nm3_neg_days              0\nm3_nsfs                  0\nopp_adbs_div_rev         0\nopp_last_mo_rev_trend    0\nopp_rev_vol              0\npmt_rate_30d             0\npmt_rate_60d             0\npmt_rate_90d             0\nhit_30_day_mark          0\nhit_60_day_mark          0\nhit_90_day_mark          0\ndtype: int64"
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "(7718, 39)"
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "Index(['rpmt_id', 'is_charged_off', 'opp_term', 'opp_factor',\n       'opp_percent_of_rev', 'opp_fico_score', 'rpmt_advance_date',\n       'rpmt_funding_date', 'rpmt_funded_amt', 'rpmt_industry', 'rpmt_product',\n       'opp_years_in_biz', 'rpmt_ed', 'rpmt_fmpr', 'opp_epi', 'm1_deposits',\n       'm1_no_of_deposits', 'm1_adbs', 'm1_neg_days', 'm1_nsfs', 'm2_deposits',\n       'm2_no_of_deposits', 'm2_adbs', 'm2_neg_days', 'm2_nsfs', 'm3_deposits',\n       'm3_no_of_deposits', 'm3_adbs', 'm3_neg_days', 'm3_nsfs',\n       'opp_adbs_div_rev', 'opp_last_mo_rev_trend', 'opp_rev_vol',\n       'pmt_rate_30d', 'pmt_rate_60d', 'pmt_rate_90d', 'hit_30_day_mark',\n       'hit_60_day_mark', 'hit_90_day_mark'],\n      dtype='object')"
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# Average logic in case it's needed for testing.\n",
    "#df_clean['avg_deposits'] = df_clean[['m1_deposits', 'm2_deposits', 'm3_deposits']].mean(axis=1).round(2)\n",
    "#df_clean['avg_no_of_deposits'] = df_clean[['m1_no_of_deposits', 'm2_no_of_deposits', 'm3_no_of_deposits']].mean(axis=1).round(2)\n",
    "#df_clean['avg_adbs'] = df_clean[['m1_adbs', 'm2_adbs', 'm3_adbs']].mean(axis=1).round(2)\n",
    "#df_clean['avg_nsfs'] = df_clean[['m1_nsfs', 'm2_nsfs', 'm3_nsfs']].mean(axis=1).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# Utilize this only drop of a column if you wish to bring all the data without looking at the correlation among them.\n",
    "df_clean.drop(['rpmt_id','rpmt_advance_date','rpmt_funding_date', 'pmt_rate_30d', 'pmt_rate_90d','rpmt_ed','rpmt_fmpr','hit_30_day_mark','hit_60_day_mark','hit_90_day_mark'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# Run this code if you are using averages\n",
    "#df_clean.drop(['rpmt_id','rpmt_advance_date','rpmt_funding_date','m1_deposits', 'm2_deposits', 'm3_deposits','m1_no_of_deposits', 'm2_no_of_deposits', 'm3_no_of_deposits', 'm1_adbs', 'm2_adbs', 'm3_adbs', 'pmt_rate_30d', 'pmt_rate_90d', 'm1_nsfs', 'm2_nsfs', 'm3_nsfs', 'rpmt_ed', 'rpmt_fmpr'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<pandas.io.formats.style.Styler at 0x2d856700940>",
      "text/html": "<style type=\"text/css\">\n#T_e4386_row0_col0, #T_e4386_row1_col1, #T_e4386_row2_col2, #T_e4386_row3_col3, #T_e4386_row4_col4, #T_e4386_row5_col5, #T_e4386_row6_col6, #T_e4386_row7_col7, #T_e4386_row8_col8, #T_e4386_row9_col9, #T_e4386_row10_col10, #T_e4386_row11_col11, #T_e4386_row12_col12, #T_e4386_row13_col13, #T_e4386_row14_col14, #T_e4386_row15_col15, #T_e4386_row16_col16, #T_e4386_row17_col17, #T_e4386_row18_col18, #T_e4386_row19_col19, #T_e4386_row20_col20, #T_e4386_row21_col21, #T_e4386_row22_col22, #T_e4386_row23_col23, #T_e4386_row24_col24, #T_e4386_row25_col25, #T_e4386_row26_col26 {\n  background-color: #b40426;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col1, #T_e4386_row2_col21, #T_e4386_row4_col25, #T_e4386_row7_col10, #T_e4386_row9_col4, #T_e4386_row12_col10 {\n  background-color: #6f92f3;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col2, #T_e4386_row4_col13, #T_e4386_row11_col12 {\n  background-color: #aac7fd;\n  color: #000000;\n}\n#T_e4386_row0_col3, #T_e4386_row3_col7, #T_e4386_row7_col2, #T_e4386_row9_col26, #T_e4386_row14_col26 {\n  background-color: #a6c4fe;\n  color: #000000;\n}\n#T_e4386_row0_col4, #T_e4386_row2_col19, #T_e4386_row3_col21, #T_e4386_row7_col4, #T_e4386_row13_col21, #T_e4386_row14_col23, #T_e4386_row20_col2, #T_e4386_row24_col14 {\n  background-color: #5572df;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col5, #T_e4386_row0_col8, #T_e4386_row2_col26, #T_e4386_row4_col10, #T_e4386_row8_col14, #T_e4386_row11_col13, #T_e4386_row16_col5, #T_e4386_row16_col8, #T_e4386_row16_col22, #T_e4386_row23_col8, #T_e4386_row24_col5, #T_e4386_row26_col3 {\n  background-color: #8fb1fe;\n  color: #000000;\n}\n#T_e4386_row0_col6, #T_e4386_row1_col25, #T_e4386_row2_col1, #T_e4386_row2_col4, #T_e4386_row2_col5, #T_e4386_row2_col6, #T_e4386_row2_col10, #T_e4386_row2_col15, #T_e4386_row2_col20, #T_e4386_row3_col8, #T_e4386_row3_col13, #T_e4386_row3_col18, #T_e4386_row3_col22, #T_e4386_row5_col2, #T_e4386_row7_col26, #T_e4386_row13_col3, #T_e4386_row16_col23, #T_e4386_row18_col24, #T_e4386_row23_col11, #T_e4386_row23_col12, #T_e4386_row23_col16, #T_e4386_row23_col17, #T_e4386_row23_col21, #T_e4386_row23_col22, #T_e4386_row25_col9, #T_e4386_row25_col14, #T_e4386_row25_col19, #T_e4386_row26_col0, #T_e4386_row26_col7 {\n  background-color: #3b4cc0;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col7, #T_e4386_row5_col15 {\n  background-color: #f4c5ad;\n  color: #000000;\n}\n#T_e4386_row0_col9, #T_e4386_row18_col21, #T_e4386_row24_col19, #T_e4386_row25_col1 {\n  background-color: #536edd;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col10, #T_e4386_row4_col9, #T_e4386_row6_col9, #T_e4386_row8_col25, #T_e4386_row9_col16, #T_e4386_row19_col6, #T_e4386_row19_col16, #T_e4386_row21_col10, #T_e4386_row24_col15 {\n  background-color: #6a8bef;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col11, #T_e4386_row11_col19, #T_e4386_row11_col25, #T_e4386_row14_col4, #T_e4386_row17_col6, #T_e4386_row21_col15 {\n  background-color: #6e90f2;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col12, #T_e4386_row5_col16, #T_e4386_row6_col12, #T_e4386_row7_col23, #T_e4386_row8_col12, #T_e4386_row8_col21, #T_e4386_row15_col2, #T_e4386_row18_col12, #T_e4386_row18_col17, #T_e4386_row19_col21 {\n  background-color: #5875e1;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col13, #T_e4386_row0_col25, #T_e4386_row6_col7, #T_e4386_row7_col18, #T_e4386_row8_col9, #T_e4386_row11_col5, #T_e4386_row11_col8, #T_e4386_row12_col3, #T_e4386_row22_col11, #T_e4386_row23_col18, #T_e4386_row25_col8, #T_e4386_row26_col15 {\n  background-color: #8db0fe;\n  color: #000000;\n}\n#T_e4386_row0_col14, #T_e4386_row7_col9, #T_e4386_row9_col21, #T_e4386_row13_col12, #T_e4386_row13_col16, #T_e4386_row15_col3, #T_e4386_row22_col24 {\n  background-color: #5a78e4;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col15, #T_e4386_row1_col23, #T_e4386_row4_col14, #T_e4386_row6_col4, #T_e4386_row17_col25 {\n  background-color: #7093f3;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col16, #T_e4386_row0_col20, #T_e4386_row4_col19, #T_e4386_row10_col9, #T_e4386_row11_col1, #T_e4386_row17_col10, #T_e4386_row22_col9, #T_e4386_row22_col25, #T_e4386_row24_col10, #T_e4386_row24_col16, #T_e4386_row25_col10 {\n  background-color: #7597f6;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col17, #T_e4386_row0_col22, #T_e4386_row1_col16, #T_e4386_row2_col14, #T_e4386_row5_col21, #T_e4386_row5_col25, #T_e4386_row16_col4, #T_e4386_row22_col23, #T_e4386_row23_col9, #T_e4386_row23_col24 {\n  background-color: #516ddb;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col18, #T_e4386_row7_col25, #T_e4386_row15_col4, #T_e4386_row15_col19, #T_e4386_row16_col12, #T_e4386_row18_col9, #T_e4386_row20_col19, #T_e4386_row22_col3, #T_e4386_row25_col13 {\n  background-color: #85a8fc;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col19, #T_e4386_row1_col12, #T_e4386_row1_col17, #T_e4386_row3_col5, #T_e4386_row6_col21, #T_e4386_row7_col17, #T_e4386_row7_col22, #T_e4386_row8_col22, #T_e4386_row9_col24, #T_e4386_row11_col10, #T_e4386_row13_col23, #T_e4386_row18_col22, #T_e4386_row21_col9, #T_e4386_row24_col4, #T_e4386_row24_col11 {\n  background-color: #5e7de7;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col21, #T_e4386_row0_col24, #T_e4386_row7_col1, #T_e4386_row10_col6, #T_e4386_row12_col25, #T_e4386_row15_col25, #T_e4386_row19_col4, #T_e4386_row22_col6, #T_e4386_row26_col14 {\n  background-color: #6c8ff1;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col23, #T_e4386_row9_col23, #T_e4386_row11_col24, #T_e4386_row12_col24 {\n  background-color: #5673e0;\n  color: #f1f1f1;\n}\n#T_e4386_row0_col26, #T_e4386_row3_col15, #T_e4386_row3_col17, #T_e4386_row19_col24, #T_e4386_row20_col21 {\n  background-color: #4055c8;\n  color: #f1f1f1;\n}\n#T_e4386_row1_col0, #T_e4386_row25_col23 {\n  background-color: #84a7fc;\n  color: #f1f1f1;\n}\n#T_e4386_row1_col2, #T_e4386_row1_col11, #T_e4386_row2_col17, #T_e4386_row4_col12, #T_e4386_row10_col17, #T_e4386_row20_col11, #T_e4386_row24_col12 {\n  background-color: #4b64d5;\n  color: #f1f1f1;\n}\n#T_e4386_row1_col3, #T_e4386_row7_col14, #T_e4386_row9_col12, #T_e4386_row10_col2, #T_e4386_row12_col4, #T_e4386_row14_col12, #T_e4386_row16_col6, #T_e4386_row16_col10, #T_e4386_row19_col22 {\n  background-color: #6282ea;\n  color: #f1f1f1;\n}\n#T_e4386_row1_col4, #T_e4386_row2_col0, #T_e4386_row6_col18, #T_e4386_row17_col5, #T_e4386_row24_col0, #T_e4386_row24_col7 {\n  background-color: #adc9fd;\n  color: #000000;\n}\n#T_e4386_row1_col5, #T_e4386_row13_col20 {\n  background-color: #f7b396;\n  color: #000000;\n}\n#T_e4386_row1_col6, #T_e4386_row4_col26, #T_e4386_row14_col8, #T_e4386_row19_col8 {\n  background-color: #b7cff9;\n  color: #000000;\n}\n#T_e4386_row1_col7, #T_e4386_row3_col23, #T_e4386_row6_col10, #T_e4386_row9_col2, #T_e4386_row14_col2, #T_e4386_row19_col2, #T_e4386_row26_col2 {\n  background-color: #86a9fc;\n  color: #f1f1f1;\n}\n#T_e4386_row1_col8, #T_e4386_row21_col16 {\n  background-color: #dddcdc;\n  color: #000000;\n}\n#T_e4386_row1_col9, #T_e4386_row5_col14, #T_e4386_row9_col20, #T_e4386_row11_col3, #T_e4386_row12_col1, #T_e4386_row12_col16, #T_e4386_row12_col18, #T_e4386_row12_col26, #T_e4386_row17_col2, #T_e4386_row17_col18, #T_e4386_row23_col7, #T_e4386_row24_col26 {\n  background-color: #98b9ff;\n  color: #000000;\n}\n#T_e4386_row1_col10, #T_e4386_row11_col21, #T_e4386_row12_col11, #T_e4386_row25_col3 {\n  background-color: #b9d0f9;\n  color: #000000;\n}\n#T_e4386_row1_col13 {\n  background-color: #dfdbd9;\n  color: #000000;\n}\n#T_e4386_row1_col14, #T_e4386_row8_col7, #T_e4386_row17_col8, #T_e4386_row18_col7, #T_e4386_row22_col1, #T_e4386_row26_col13 {\n  background-color: #9fbfff;\n  color: #000000;\n}\n#T_e4386_row1_col15, #T_e4386_row4_col1 {\n  background-color: #c9d7f0;\n  color: #000000;\n}\n#T_e4386_row1_col18, #T_e4386_row23_col20 {\n  background-color: #d6dce4;\n  color: #000000;\n}\n#T_e4386_row1_col19, #T_e4386_row8_col26, #T_e4386_row11_col0, #T_e4386_row19_col26, #T_e4386_row22_col13 {\n  background-color: #a7c5fe;\n  color: #000000;\n}\n#T_e4386_row1_col20, #T_e4386_row15_col23 {\n  background-color: #c7d7f0;\n  color: #000000;\n}\n#T_e4386_row1_col21, #T_e4386_row4_col21, #T_e4386_row6_col24, #T_e4386_row15_col12, #T_e4386_row20_col22, #T_e4386_row26_col17 {\n  background-color: #455cce;\n  color: #f1f1f1;\n}\n#T_e4386_row1_col22, #T_e4386_row2_col24, #T_e4386_row12_col6, #T_e4386_row19_col11, #T_e4386_row19_col17, #T_e4386_row21_col14 {\n  background-color: #6485ec;\n  color: #f1f1f1;\n}\n#T_e4386_row1_col24, #T_e4386_row3_col9, #T_e4386_row3_col12, #T_e4386_row7_col6, #T_e4386_row15_col24, #T_e4386_row18_col3, #T_e4386_row21_col23 {\n  background-color: #4358cb;\n  color: #f1f1f1;\n}\n#T_e4386_row1_col26, #T_e4386_row10_col1 {\n  background-color: #c6d6f1;\n  color: #000000;\n}\n#T_e4386_row2_col3, #T_e4386_row18_col1 {\n  background-color: #d4dbe6;\n  color: #000000;\n}\n#T_e4386_row2_col7, #T_e4386_row11_col2, #T_e4386_row14_col18, #T_e4386_row15_col26, #T_e4386_row22_col7 {\n  background-color: #aec9fc;\n  color: #000000;\n}\n#T_e4386_row2_col8, #T_e4386_row2_col12, #T_e4386_row3_col14, #T_e4386_row10_col11, #T_e4386_row20_col16, #T_e4386_row20_col24, #T_e4386_row25_col17, #T_e4386_row26_col21 {\n  background-color: #4a63d3;\n  color: #f1f1f1;\n}\n#T_e4386_row2_col9, #T_e4386_row2_col13, #T_e4386_row2_col22, #T_e4386_row14_col24 {\n  background-color: #4961d2;\n  color: #f1f1f1;\n}\n#T_e4386_row2_col11, #T_e4386_row4_col23, #T_e4386_row10_col14, #T_e4386_row12_col20, #T_e4386_row13_col4, #T_e4386_row20_col14, #T_e4386_row22_col14, #T_e4386_row23_col4 {\n  background-color: #7b9ff9;\n  color: #f1f1f1;\n}\n#T_e4386_row2_col16, #T_e4386_row17_col9 {\n  background-color: #799cf8;\n  color: #f1f1f1;\n}\n#T_e4386_row2_col18, #T_e4386_row15_col17, #T_e4386_row20_col17, #T_e4386_row26_col12 {\n  background-color: #445acc;\n  color: #f1f1f1;\n}\n#T_e4386_row2_col23, #T_e4386_row5_col23, #T_e4386_row6_col22, #T_e4386_row6_col25, #T_e4386_row11_col9, #T_e4386_row13_col25, #T_e4386_row20_col3, #T_e4386_row21_col6, #T_e4386_row25_col4 {\n  background-color: #5f7fe8;\n  color: #f1f1f1;\n}\n#T_e4386_row2_col25 {\n  background-color: #88abfd;\n  color: #000000;\n}\n#T_e4386_row3_col0, #T_e4386_row10_col26, #T_e4386_row12_col5, #T_e4386_row16_col0, #T_e4386_row16_col2, #T_e4386_row21_col0, #T_e4386_row21_col2, #T_e4386_row25_col2 {\n  background-color: #abc8fd;\n  color: #000000;\n}\n#T_e4386_row3_col1, #T_e4386_row4_col24, #T_e4386_row5_col11, #T_e4386_row26_col16 {\n  background-color: #5470de;\n  color: #f1f1f1;\n}\n#T_e4386_row3_col2, #T_e4386_row6_col1, #T_e4386_row12_col22, #T_e4386_row22_col12 {\n  background-color: #d5dbe5;\n  color: #000000;\n}\n#T_e4386_row3_col4, #T_e4386_row8_col16, #T_e4386_row8_col23, #T_e4386_row11_col6, #T_e4386_row18_col16, #T_e4386_row25_col11 {\n  background-color: #5d7ce6;\n  color: #f1f1f1;\n}\n#T_e4386_row3_col6, #T_e4386_row19_col25 {\n  background-color: #4257c9;\n  color: #f1f1f1;\n}\n#T_e4386_row3_col10 {\n  background-color: #3f53c6;\n  color: #f1f1f1;\n}\n#T_e4386_row3_col11, #T_e4386_row3_col16, #T_e4386_row5_col12, #T_e4386_row5_col17, #T_e4386_row6_col11, #T_e4386_row7_col12, #T_e4386_row9_col11, #T_e4386_row9_col22, #T_e4386_row10_col3, #T_e4386_row14_col11, #T_e4386_row14_col22, #T_e4386_row16_col15, #T_e4386_row17_col4, #T_e4386_row22_col4, #T_e4386_row23_col6, #T_e4386_row24_col9, #T_e4386_row26_col9 {\n  background-color: #6384eb;\n  color: #f1f1f1;\n}\n#T_e4386_row3_col19, #T_e4386_row4_col11, #T_e4386_row24_col22, #T_e4386_row26_col24 {\n  background-color: #4e68d8;\n  color: #f1f1f1;\n}\n#T_e4386_row3_col20, #T_e4386_row14_col25, #T_e4386_row15_col11, #T_e4386_row15_col21, #T_e4386_row20_col12, #T_e4386_row25_col12 {\n  background-color: #485fd1;\n  color: #f1f1f1;\n}\n#T_e4386_row3_col24, #T_e4386_row5_col22, #T_e4386_row16_col20, #T_e4386_row21_col19, #T_e4386_row21_col20 {\n  background-color: #688aef;\n  color: #f1f1f1;\n}\n#T_e4386_row3_col25, #T_e4386_row3_col26, #T_e4386_row5_col7, #T_e4386_row15_col7, #T_e4386_row17_col1, #T_e4386_row19_col20 {\n  background-color: #9abbff;\n  color: #000000;\n}\n#T_e4386_row4_col0, #T_e4386_row4_col3, #T_e4386_row5_col9, #T_e4386_row15_col0, #T_e4386_row16_col13, #T_e4386_row20_col0 {\n  background-color: #90b2fe;\n  color: #000000;\n}\n#T_e4386_row4_col2, #T_e4386_row7_col21, #T_e4386_row10_col25, #T_e4386_row24_col20, #T_e4386_row24_col21 {\n  background-color: #7396f5;\n  color: #f1f1f1;\n}\n#T_e4386_row4_col5, #T_e4386_row9_col13, #T_e4386_row11_col7, #T_e4386_row19_col13 {\n  background-color: #bad0f8;\n  color: #000000;\n}\n#T_e4386_row4_col6, #T_e4386_row7_col19, #T_e4386_row7_col24, #T_e4386_row9_col17, #T_e4386_row11_col14, #T_e4386_row14_col6, #T_e4386_row14_col16, #T_e4386_row14_col17 {\n  background-color: #6788ee;\n  color: #f1f1f1;\n}\n#T_e4386_row4_col7, #T_e4386_row6_col15, #T_e4386_row8_col19, #T_e4386_row13_col0, #T_e4386_row13_col19, #T_e4386_row16_col26, #T_e4386_row17_col11, #T_e4386_row21_col26 {\n  background-color: #94b6ff;\n  color: #000000;\n}\n#T_e4386_row4_col8, #T_e4386_row12_col0, #T_e4386_row24_col3, #T_e4386_row24_col8 {\n  background-color: #a5c3fe;\n  color: #000000;\n}\n#T_e4386_row4_col15, #T_e4386_row9_col7, #T_e4386_row12_col8, #T_e4386_row13_col7, #T_e4386_row14_col7, #T_e4386_row19_col7, #T_e4386_row22_col18 {\n  background-color: #9ebeff;\n  color: #000000;\n}\n#T_e4386_row4_col16, #T_e4386_row11_col4, #T_e4386_row17_col23, #T_e4386_row18_col2 {\n  background-color: #506bda;\n  color: #f1f1f1;\n}\n#T_e4386_row4_col17, #T_e4386_row4_col22, #T_e4386_row5_col24, #T_e4386_row13_col2, #T_e4386_row15_col22 {\n  background-color: #4c66d6;\n  color: #f1f1f1;\n}\n#T_e4386_row4_col18, #T_e4386_row12_col13, #T_e4386_row17_col0, #T_e4386_row22_col0 {\n  background-color: #a1c0ff;\n  color: #000000;\n}\n#T_e4386_row4_col20, #T_e4386_row5_col19, #T_e4386_row10_col7, #T_e4386_row22_col26 {\n  background-color: #9dbdff;\n  color: #000000;\n}\n#T_e4386_row5_col0, #T_e4386_row7_col5, #T_e4386_row11_col26, #T_e4386_row13_col14, #T_e4386_row19_col0, #T_e4386_row21_col5, #T_e4386_row23_col13, #T_e4386_row25_col26, #T_e4386_row26_col20 {\n  background-color: #92b4fe;\n  color: #000000;\n}\n#T_e4386_row5_col1, #T_e4386_row8_col10 {\n  background-color: #f7b89c;\n  color: #000000;\n}\n#T_e4386_row5_col3, #T_e4386_row13_col17, #T_e4386_row17_col24, #T_e4386_row18_col11, #T_e4386_row18_col25, #T_e4386_row24_col23 {\n  background-color: #5b7ae5;\n  color: #f1f1f1;\n}\n#T_e4386_row5_col4, #T_e4386_row17_col3, #T_e4386_row19_col10 {\n  background-color: #8caffe;\n  color: #000000;\n}\n#T_e4386_row5_col6, #T_e4386_row11_col18, #T_e4386_row16_col18, #T_e4386_row21_col17, #T_e4386_row21_col18, #T_e4386_row21_col25 {\n  background-color: #89acfd;\n  color: #000000;\n}\n#T_e4386_row5_col8 {\n  background-color: #f18f71;\n  color: #f1f1f1;\n}\n#T_e4386_row5_col10 {\n  background-color: #edd1c2;\n  color: #000000;\n}\n#T_e4386_row5_col13, #T_e4386_row13_col5 {\n  background-color: #ee8669;\n  color: #f1f1f1;\n}\n#T_e4386_row5_col18, #T_e4386_row10_col20 {\n  background-color: #f49a7b;\n  color: #000000;\n}\n#T_e4386_row5_col20, #T_e4386_row7_col0, #T_e4386_row18_col10 {\n  background-color: #f3c7b1;\n  color: #000000;\n}\n#T_e4386_row5_col26, #T_e4386_row6_col8, #T_e4386_row17_col7, #T_e4386_row20_col26, #T_e4386_row25_col7 {\n  background-color: #afcafc;\n  color: #000000;\n}\n#T_e4386_row6_col0, #T_e4386_row6_col3, #T_e4386_row17_col14, #T_e4386_row22_col19 {\n  background-color: #80a3fa;\n  color: #f1f1f1;\n}\n#T_e4386_row6_col2, #T_e4386_row10_col4, #T_e4386_row13_col6, #T_e4386_row18_col6, #T_e4386_row19_col3 {\n  background-color: #7da0f9;\n  color: #f1f1f1;\n}\n#T_e4386_row6_col5, #T_e4386_row19_col1, #T_e4386_row23_col10 {\n  background-color: #bfd3f6;\n  color: #000000;\n}\n#T_e4386_row6_col13, #T_e4386_row6_col26, #T_e4386_row16_col17 {\n  background-color: #b3cdfb;\n  color: #000000;\n}\n#T_e4386_row6_col14, #T_e4386_row12_col9, #T_e4386_row15_col6, #T_e4386_row16_col19, #T_e4386_row20_col6, #T_e4386_row21_col24, #T_e4386_row24_col18, #T_e4386_row25_col21, #T_e4386_row26_col6, #T_e4386_row26_col19 {\n  background-color: #7295f4;\n  color: #f1f1f1;\n}\n#T_e4386_row6_col16, #T_e4386_row6_col23, #T_e4386_row8_col24, #T_e4386_row11_col20, #T_e4386_row16_col14, #T_e4386_row16_col24, #T_e4386_row20_col25, #T_e4386_row25_col16 {\n  background-color: #6b8df0;\n  color: #f1f1f1;\n}\n#T_e4386_row6_col17, #T_e4386_row13_col22, #T_e4386_row18_col23, #T_e4386_row19_col12, #T_e4386_row23_col19, #T_e4386_row26_col25 {\n  background-color: #6180e9;\n  color: #f1f1f1;\n}\n#T_e4386_row6_col19, #T_e4386_row7_col20, #T_e4386_row8_col6, #T_e4386_row11_col22, #T_e4386_row12_col14, #T_e4386_row16_col1, #T_e4386_row16_col25, #T_e4386_row17_col20, #T_e4386_row22_col20, #T_e4386_row25_col5, #T_e4386_row25_col15, #T_e4386_row25_col18, #T_e4386_row25_col20 {\n  background-color: #7a9df8;\n  color: #f1f1f1;\n}\n#T_e4386_row6_col20, #T_e4386_row8_col0, #T_e4386_row12_col2, #T_e4386_row16_col3, #T_e4386_row18_col19, #T_e4386_row19_col15, #T_e4386_row23_col1, #T_e4386_row23_col2, #T_e4386_row26_col18 {\n  background-color: #97b8ff;\n  color: #000000;\n}\n#T_e4386_row7_col3, #T_e4386_row17_col26, #T_e4386_row20_col7, #T_e4386_row26_col8 {\n  background-color: #9bbcff;\n  color: #000000;\n}\n#T_e4386_row7_col8, #T_e4386_row7_col13, #T_e4386_row9_col0, #T_e4386_row10_col0, #T_e4386_row14_col0, #T_e4386_row18_col0, #T_e4386_row21_col3, #T_e4386_row21_col8, #T_e4386_row21_col13, #T_e4386_row23_col0, #T_e4386_row23_col25 {\n  background-color: #93b5fe;\n  color: #000000;\n}\n#T_e4386_row7_col11, #T_e4386_row12_col21, #T_e4386_row17_col19, #T_e4386_row26_col10 {\n  background-color: #82a6fb;\n  color: #f1f1f1;\n}\n#T_e4386_row7_col15, #T_e4386_row12_col15, #T_e4386_row15_col9, #T_e4386_row18_col4, #T_e4386_row20_col9, #T_e4386_row21_col1, #T_e4386_row22_col10, #T_e4386_row26_col23 {\n  background-color: #779af7;\n  color: #f1f1f1;\n}\n#T_e4386_row7_col16, #T_e4386_row9_col3, #T_e4386_row12_col19, #T_e4386_row14_col3, #T_e4386_row15_col14, #T_e4386_row22_col15, #T_e4386_row24_col13, #T_e4386_row26_col4 {\n  background-color: #7ea1fa;\n  color: #f1f1f1;\n}\n#T_e4386_row8_col1 {\n  background-color: #d8dce2;\n  color: #000000;\n}\n#T_e4386_row8_col2, #T_e4386_row9_col25, #T_e4386_row10_col16, #T_e4386_row10_col21, #T_e4386_row10_col22, #T_e4386_row12_col23, #T_e4386_row21_col4, #T_e4386_row24_col17, #T_e4386_row25_col22, #T_e4386_row26_col11 {\n  background-color: #4f69d9;\n  color: #f1f1f1;\n}\n#T_e4386_row8_col3, #T_e4386_row11_col23 {\n  background-color: #3c4ec2;\n  color: #f1f1f1;\n}\n#T_e4386_row8_col4, #T_e4386_row17_col15, #T_e4386_row21_col12, #T_e4386_row24_col1 {\n  background-color: #7699f6;\n  color: #f1f1f1;\n}\n#T_e4386_row8_col5 {\n  background-color: #f18d6f;\n  color: #f1f1f1;\n}\n#T_e4386_row8_col11, #T_e4386_row8_col17, #T_e4386_row10_col24, #T_e4386_row13_col11, #T_e4386_row14_col21, #T_e4386_row19_col23, #T_e4386_row23_col14 {\n  background-color: #5977e3;\n  color: #f1f1f1;\n}\n#T_e4386_row8_col13, #T_e4386_row14_col19, #T_e4386_row19_col14 {\n  background-color: #cb3e38;\n  color: #f1f1f1;\n}\n#T_e4386_row8_col15 {\n  background-color: #f7b194;\n  color: #000000;\n}\n#T_e4386_row8_col18 {\n  background-color: #d65244;\n  color: #f1f1f1;\n}\n#T_e4386_row8_col20, #T_e4386_row20_col13 {\n  background-color: #f7aa8c;\n  color: #000000;\n}\n#T_e4386_row9_col1, #T_e4386_row9_col8, #T_e4386_row14_col13 {\n  background-color: #bbd1f8;\n  color: #000000;\n}\n#T_e4386_row9_col5, #T_e4386_row14_col5, #T_e4386_row19_col5 {\n  background-color: #c1d4f4;\n  color: #000000;\n}\n#T_e4386_row9_col6, #T_e4386_row11_col15, #T_e4386_row16_col9 {\n  background-color: #6687ed;\n  color: #f1f1f1;\n}\n#T_e4386_row9_col10, #T_e4386_row13_col9, #T_e4386_row14_col10, #T_e4386_row18_col14 {\n  background-color: #8badfd;\n  color: #000000;\n}\n#T_e4386_row9_col14 {\n  background-color: #c43032;\n  color: #f1f1f1;\n}\n#T_e4386_row9_col15, #T_e4386_row14_col15, #T_e4386_row14_col20, #T_e4386_row17_col21, #T_e4386_row22_col2, #T_e4386_row23_col5 {\n  background-color: #96b7ff;\n  color: #000000;\n}\n#T_e4386_row9_col18, #T_e4386_row22_col5 {\n  background-color: #b1cbfc;\n  color: #000000;\n}\n#T_e4386_row9_col19, #T_e4386_row18_col13, #T_e4386_row19_col9 {\n  background-color: #cf453c;\n  color: #f1f1f1;\n}\n#T_e4386_row10_col5 {\n  background-color: #f5c4ac;\n  color: #000000;\n}\n#T_e4386_row10_col8 {\n  background-color: #f7ac8e;\n  color: #000000;\n}\n#T_e4386_row10_col12, #T_e4386_row15_col16, #T_e4386_row24_col6, #T_e4386_row25_col6, #T_e4386_row26_col22 {\n  background-color: #465ecf;\n  color: #f1f1f1;\n}\n#T_e4386_row10_col13 {\n  background-color: #f7b093;\n  color: #000000;\n}\n#T_e4386_row10_col15 {\n  background-color: #e46e56;\n  color: #f1f1f1;\n}\n#T_e4386_row10_col18 {\n  background-color: #f6bda2;\n  color: #000000;\n}\n#T_e4386_row10_col19, #T_e4386_row11_col17, #T_e4386_row20_col4 {\n  background-color: #81a4fb;\n  color: #f1f1f1;\n}\n#T_e4386_row10_col23, #T_e4386_row12_col7, #T_e4386_row23_col26, #T_e4386_row25_col0 {\n  background-color: #b2ccfb;\n  color: #000000;\n}\n#T_e4386_row11_col16, #T_e4386_row16_col11 {\n  background-color: #e4d9d2;\n  color: #000000;\n}\n#T_e4386_row12_col17 {\n  background-color: #f7b79b;\n  color: #000000;\n}\n#T_e4386_row13_col1, #T_e4386_row16_col21 {\n  background-color: #d9dce1;\n  color: #000000;\n}\n#T_e4386_row13_col8 {\n  background-color: #cc403a;\n  color: #f1f1f1;\n}\n#T_e4386_row13_col10, #T_e4386_row20_col5 {\n  background-color: #f6bea4;\n  color: #000000;\n}\n#T_e4386_row13_col15, #T_e4386_row18_col20 {\n  background-color: #f5a081;\n  color: #000000;\n}\n#T_e4386_row13_col18 {\n  background-color: #d0473d;\n  color: #f1f1f1;\n}\n#T_e4386_row13_col24 {\n  background-color: #3e51c5;\n  color: #f1f1f1;\n}\n#T_e4386_row13_col26, #T_e4386_row18_col26, #T_e4386_row26_col5 {\n  background-color: #a9c6fd;\n  color: #000000;\n}\n#T_e4386_row14_col1 {\n  background-color: #bcd2f7;\n  color: #000000;\n}\n#T_e4386_row14_col9 {\n  background-color: #c53334;\n  color: #f1f1f1;\n}\n#T_e4386_row15_col1 {\n  background-color: #cfdaea;\n  color: #000000;\n}\n#T_e4386_row15_col5 {\n  background-color: #f7b99e;\n  color: #000000;\n}\n#T_e4386_row15_col8 {\n  background-color: #f7a98b;\n  color: #000000;\n}\n#T_e4386_row15_col10 {\n  background-color: #e57058;\n  color: #f1f1f1;\n}\n#T_e4386_row15_col13 {\n  background-color: #f39778;\n  color: #000000;\n}\n#T_e4386_row15_col18 {\n  background-color: #f7a889;\n  color: #000000;\n}\n#T_e4386_row15_col20, #T_e4386_row20_col15 {\n  background-color: #e16751;\n  color: #f1f1f1;\n}\n#T_e4386_row16_col7, #T_e4386_row21_col7 {\n  background-color: #b6cefa;\n  color: #000000;\n}\n#T_e4386_row17_col12 {\n  background-color: #f7b599;\n  color: #000000;\n}\n#T_e4386_row17_col13, #T_e4386_row22_col16 {\n  background-color: #a2c1ff;\n  color: #000000;\n}\n#T_e4386_row17_col16 {\n  background-color: #c3d5f4;\n  color: #000000;\n}\n#T_e4386_row17_col22, #T_e4386_row22_col17 {\n  background-color: #f4c6af;\n  color: #000000;\n}\n#T_e4386_row18_col5 {\n  background-color: #f39577;\n  color: #000000;\n}\n#T_e4386_row18_col8 {\n  background-color: #d55042;\n  color: #f1f1f1;\n}\n#T_e4386_row18_col15 {\n  background-color: #f7ad90;\n  color: #000000;\n}\n#T_e4386_row19_col18, #T_e4386_row23_col3, #T_e4386_row26_col1 {\n  background-color: #b5cdfa;\n  color: #000000;\n}\n#T_e4386_row20_col1 {\n  background-color: #cdd9ec;\n  color: #000000;\n}\n#T_e4386_row20_col8 {\n  background-color: #f6a385;\n  color: #000000;\n}\n#T_e4386_row20_col10 {\n  background-color: #f59f80;\n  color: #000000;\n}\n#T_e4386_row20_col18 {\n  background-color: #f59c7d;\n  color: #000000;\n}\n#T_e4386_row20_col23 {\n  background-color: #c5d6f2;\n  color: #000000;\n}\n#T_e4386_row21_col11 {\n  background-color: #bed2f6;\n  color: #000000;\n}\n#T_e4386_row21_col22 {\n  background-color: #c4d5f3;\n  color: #000000;\n}\n#T_e4386_row22_col8, #T_e4386_row24_col2 {\n  background-color: #a3c2fe;\n  color: #000000;\n}\n#T_e4386_row22_col21 {\n  background-color: #cbd8ee;\n  color: #000000;\n}\n#T_e4386_row23_col15 {\n  background-color: #d7dce3;\n  color: #000000;\n}\n#T_e4386_row24_col25 {\n  background-color: #dedcdb;\n  color: #000000;\n}\n#T_e4386_row25_col24 {\n  background-color: #d2dbe8;\n  color: #000000;\n}\n</style>\n<table id=\"T_e4386\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_e4386_level0_col0\" class=\"col_heading level0 col0\" >is_charged_off</th>\n      <th id=\"T_e4386_level0_col1\" class=\"col_heading level0 col1\" >opp_term</th>\n      <th id=\"T_e4386_level0_col2\" class=\"col_heading level0 col2\" >opp_factor</th>\n      <th id=\"T_e4386_level0_col3\" class=\"col_heading level0 col3\" >opp_percent_of_rev</th>\n      <th id=\"T_e4386_level0_col4\" class=\"col_heading level0 col4\" >opp_fico_score</th>\n      <th id=\"T_e4386_level0_col5\" class=\"col_heading level0 col5\" >rpmt_funded_amt</th>\n      <th id=\"T_e4386_level0_col6\" class=\"col_heading level0 col6\" >opp_years_in_biz</th>\n      <th id=\"T_e4386_level0_col7\" class=\"col_heading level0 col7\" >opp_epi</th>\n      <th id=\"T_e4386_level0_col8\" class=\"col_heading level0 col8\" >m1_deposits</th>\n      <th id=\"T_e4386_level0_col9\" class=\"col_heading level0 col9\" >m1_no_of_deposits</th>\n      <th id=\"T_e4386_level0_col10\" class=\"col_heading level0 col10\" >m1_adbs</th>\n      <th id=\"T_e4386_level0_col11\" class=\"col_heading level0 col11\" >m1_neg_days</th>\n      <th id=\"T_e4386_level0_col12\" class=\"col_heading level0 col12\" >m1_nsfs</th>\n      <th id=\"T_e4386_level0_col13\" class=\"col_heading level0 col13\" >m2_deposits</th>\n      <th id=\"T_e4386_level0_col14\" class=\"col_heading level0 col14\" >m2_no_of_deposits</th>\n      <th id=\"T_e4386_level0_col15\" class=\"col_heading level0 col15\" >m2_adbs</th>\n      <th id=\"T_e4386_level0_col16\" class=\"col_heading level0 col16\" >m2_neg_days</th>\n      <th id=\"T_e4386_level0_col17\" class=\"col_heading level0 col17\" >m2_nsfs</th>\n      <th id=\"T_e4386_level0_col18\" class=\"col_heading level0 col18\" >m3_deposits</th>\n      <th id=\"T_e4386_level0_col19\" class=\"col_heading level0 col19\" >m3_no_of_deposits</th>\n      <th id=\"T_e4386_level0_col20\" class=\"col_heading level0 col20\" >m3_adbs</th>\n      <th id=\"T_e4386_level0_col21\" class=\"col_heading level0 col21\" >m3_neg_days</th>\n      <th id=\"T_e4386_level0_col22\" class=\"col_heading level0 col22\" >m3_nsfs</th>\n      <th id=\"T_e4386_level0_col23\" class=\"col_heading level0 col23\" >opp_adbs_div_rev</th>\n      <th id=\"T_e4386_level0_col24\" class=\"col_heading level0 col24\" >opp_last_mo_rev_trend</th>\n      <th id=\"T_e4386_level0_col25\" class=\"col_heading level0 col25\" >opp_rev_vol</th>\n      <th id=\"T_e4386_level0_col26\" class=\"col_heading level0 col26\" >pmt_rate_60d</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_e4386_level0_row0\" class=\"row_heading level0 row0\" >is_charged_off</th>\n      <td id=\"T_e4386_row0_col0\" class=\"data row0 col0\" >1.00</td>\n      <td id=\"T_e4386_row0_col1\" class=\"data row0 col1\" >-0.10</td>\n      <td id=\"T_e4386_row0_col2\" class=\"data row0 col2\" >0.07</td>\n      <td id=\"T_e4386_row0_col3\" class=\"data row0 col3\" >0.06</td>\n      <td id=\"T_e4386_row0_col4\" class=\"data row0 col4\" >-0.05</td>\n      <td id=\"T_e4386_row0_col5\" class=\"data row0 col5\" >-0.05</td>\n      <td id=\"T_e4386_row0_col6\" class=\"data row0 col6\" >-0.12</td>\n      <td id=\"T_e4386_row0_col7\" class=\"data row0 col7\" >0.45</td>\n      <td id=\"T_e4386_row0_col8\" class=\"data row0 col8\" >-0.03</td>\n      <td id=\"T_e4386_row0_col9\" class=\"data row0 col9\" >-0.04</td>\n      <td id=\"T_e4386_row0_col10\" class=\"data row0 col10\" >-0.05</td>\n      <td id=\"T_e4386_row0_col11\" class=\"data row0 col11\" >0.04</td>\n      <td id=\"T_e4386_row0_col12\" class=\"data row0 col12\" >0.03</td>\n      <td id=\"T_e4386_row0_col13\" class=\"data row0 col13\" >-0.04</td>\n      <td id=\"T_e4386_row0_col14\" class=\"data row0 col14\" >-0.04</td>\n      <td id=\"T_e4386_row0_col15\" class=\"data row0 col15\" >-0.05</td>\n      <td id=\"T_e4386_row0_col16\" class=\"data row0 col16\" >0.06</td>\n      <td id=\"T_e4386_row0_col17\" class=\"data row0 col17\" >0.01</td>\n      <td id=\"T_e4386_row0_col18\" class=\"data row0 col18\" >-0.04</td>\n      <td id=\"T_e4386_row0_col19\" class=\"data row0 col19\" >-0.05</td>\n      <td id=\"T_e4386_row0_col20\" class=\"data row0 col20\" >-0.05</td>\n      <td id=\"T_e4386_row0_col21\" class=\"data row0 col21\" >0.06</td>\n      <td id=\"T_e4386_row0_col22\" class=\"data row0 col22\" >0.01</td>\n      <td id=\"T_e4386_row0_col23\" class=\"data row0 col23\" >-0.05</td>\n      <td id=\"T_e4386_row0_col24\" class=\"data row0 col24\" >0.06</td>\n      <td id=\"T_e4386_row0_col25\" class=\"data row0 col25\" >0.09</td>\n      <td id=\"T_e4386_row0_col26\" class=\"data row0 col26\" >-0.42</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row1\" class=\"row_heading level0 row1\" >opp_term</th>\n      <td id=\"T_e4386_row1_col0\" class=\"data row1 col0\" >-0.10</td>\n      <td id=\"T_e4386_row1_col1\" class=\"data row1 col1\" >1.00</td>\n      <td id=\"T_e4386_row1_col2\" class=\"data row1 col2\" >-0.33</td>\n      <td id=\"T_e4386_row1_col3\" class=\"data row1 col3\" >-0.22</td>\n      <td id=\"T_e4386_row1_col4\" class=\"data row1 col4\" >0.24</td>\n      <td id=\"T_e4386_row1_col5\" class=\"data row1 col5\" >0.55</td>\n      <td id=\"T_e4386_row1_col6\" class=\"data row1 col6\" >0.30</td>\n      <td id=\"T_e4386_row1_col7\" class=\"data row1 col7\" >-0.12</td>\n      <td id=\"T_e4386_row1_col8\" class=\"data row1 col8\" >0.31</td>\n      <td id=\"T_e4386_row1_col9\" class=\"data row1 col9\" >0.18</td>\n      <td id=\"T_e4386_row1_col10\" class=\"data row1 col10\" >0.23</td>\n      <td id=\"T_e4386_row1_col11\" class=\"data row1 col11\" >-0.08</td>\n      <td id=\"T_e4386_row1_col12\" class=\"data row1 col12\" >0.05</td>\n      <td id=\"T_e4386_row1_col13\" class=\"data row1 col13\" >0.32</td>\n      <td id=\"T_e4386_row1_col14\" class=\"data row1 col14\" >0.19</td>\n      <td id=\"T_e4386_row1_col15\" class=\"data row1 col15\" >0.27</td>\n      <td id=\"T_e4386_row1_col16\" class=\"data row1 col16\" >-0.07</td>\n      <td id=\"T_e4386_row1_col17\" class=\"data row1 col17\" >0.05</td>\n      <td id=\"T_e4386_row1_col18\" class=\"data row1 col18\" >0.29</td>\n      <td id=\"T_e4386_row1_col19\" class=\"data row1 col19\" >0.20</td>\n      <td id=\"T_e4386_row1_col20\" class=\"data row1 col20\" >0.26</td>\n      <td id=\"T_e4386_row1_col21\" class=\"data row1 col21\" >-0.08</td>\n      <td id=\"T_e4386_row1_col22\" class=\"data row1 col22\" >0.08</td>\n      <td id=\"T_e4386_row1_col23\" class=\"data row1 col23\" >0.04</td>\n      <td id=\"T_e4386_row1_col24\" class=\"data row1 col24\" >-0.08</td>\n      <td id=\"T_e4386_row1_col25\" class=\"data row1 col25\" >-0.22</td>\n      <td id=\"T_e4386_row1_col26\" class=\"data row1 col26\" >0.16</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row2\" class=\"row_heading level0 row2\" >opp_factor</th>\n      <td id=\"T_e4386_row2_col0\" class=\"data row2 col0\" >0.07</td>\n      <td id=\"T_e4386_row2_col1\" class=\"data row2 col1\" >-0.33</td>\n      <td id=\"T_e4386_row2_col2\" class=\"data row2 col2\" >1.00</td>\n      <td id=\"T_e4386_row2_col3\" class=\"data row2 col3\" >0.26</td>\n      <td id=\"T_e4386_row2_col4\" class=\"data row2 col4\" >-0.16</td>\n      <td id=\"T_e4386_row2_col5\" class=\"data row2 col5\" >-0.41</td>\n      <td id=\"T_e4386_row2_col6\" class=\"data row2 col6\" >-0.12</td>\n      <td id=\"T_e4386_row2_col7\" class=\"data row2 col7\" >0.05</td>\n      <td id=\"T_e4386_row2_col8\" class=\"data row2 col8\" >-0.31</td>\n      <td id=\"T_e4386_row2_col9\" class=\"data row2 col9\" >-0.08</td>\n      <td id=\"T_e4386_row2_col10\" class=\"data row2 col10\" >-0.23</td>\n      <td id=\"T_e4386_row2_col11\" class=\"data row2 col11\" >0.08</td>\n      <td id=\"T_e4386_row2_col12\" class=\"data row2 col12\" >-0.01</td>\n      <td id=\"T_e4386_row2_col13\" class=\"data row2 col13\" >-0.32</td>\n      <td id=\"T_e4386_row2_col14\" class=\"data row2 col14\" >-0.08</td>\n      <td id=\"T_e4386_row2_col15\" class=\"data row2 col15\" >-0.27</td>\n      <td id=\"T_e4386_row2_col16\" class=\"data row2 col16\" >0.07</td>\n      <td id=\"T_e4386_row2_col17\" class=\"data row2 col17\" >-0.01</td>\n      <td id=\"T_e4386_row2_col18\" class=\"data row2 col18\" >-0.30</td>\n      <td id=\"T_e4386_row2_col19\" class=\"data row2 col19\" >-0.08</td>\n      <td id=\"T_e4386_row2_col20\" class=\"data row2 col20\" >-0.28</td>\n      <td id=\"T_e4386_row2_col21\" class=\"data row2 col21\" >0.07</td>\n      <td id=\"T_e4386_row2_col22\" class=\"data row2 col22\" >-0.02</td>\n      <td id=\"T_e4386_row2_col23\" class=\"data row2 col23\" >-0.01</td>\n      <td id=\"T_e4386_row2_col24\" class=\"data row2 col24\" >0.03</td>\n      <td id=\"T_e4386_row2_col25\" class=\"data row2 col25\" >0.07</td>\n      <td id=\"T_e4386_row2_col26\" class=\"data row2 col26\" >-0.08</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row3\" class=\"row_heading level0 row3\" >opp_percent_of_rev</th>\n      <td id=\"T_e4386_row3_col0\" class=\"data row3 col0\" >0.06</td>\n      <td id=\"T_e4386_row3_col1\" class=\"data row3 col1\" >-0.22</td>\n      <td id=\"T_e4386_row3_col2\" class=\"data row3 col2\" >0.26</td>\n      <td id=\"T_e4386_row3_col3\" class=\"data row3 col3\" >1.00</td>\n      <td id=\"T_e4386_row3_col4\" class=\"data row3 col4\" >-0.03</td>\n      <td id=\"T_e4386_row3_col5\" class=\"data row3 col5\" >-0.24</td>\n      <td id=\"T_e4386_row3_col6\" class=\"data row3 col6\" >-0.09</td>\n      <td id=\"T_e4386_row3_col7\" class=\"data row3 col7\" >0.02</td>\n      <td id=\"T_e4386_row3_col8\" class=\"data row3 col8\" >-0.38</td>\n      <td id=\"T_e4386_row3_col9\" class=\"data row3 col9\" >-0.10</td>\n      <td id=\"T_e4386_row3_col10\" class=\"data row3 col10\" >-0.21</td>\n      <td id=\"T_e4386_row3_col11\" class=\"data row3 col11\" >0.00</td>\n      <td id=\"T_e4386_row3_col12\" class=\"data row3 col12\" >-0.04</td>\n      <td id=\"T_e4386_row3_col13\" class=\"data row3 col13\" >-0.39</td>\n      <td id=\"T_e4386_row3_col14\" class=\"data row3 col14\" >-0.10</td>\n      <td id=\"T_e4386_row3_col15\" class=\"data row3 col15\" >-0.24</td>\n      <td id=\"T_e4386_row3_col16\" class=\"data row3 col16\" >-0.00</td>\n      <td id=\"T_e4386_row3_col17\" class=\"data row3 col17\" >-0.05</td>\n      <td id=\"T_e4386_row3_col18\" class=\"data row3 col18\" >-0.35</td>\n      <td id=\"T_e4386_row3_col19\" class=\"data row3 col19\" >-0.11</td>\n      <td id=\"T_e4386_row3_col20\" class=\"data row3 col20\" >-0.22</td>\n      <td id=\"T_e4386_row3_col21\" class=\"data row3 col21\" >-0.02</td>\n      <td id=\"T_e4386_row3_col22\" class=\"data row3 col22\" >-0.07</td>\n      <td id=\"T_e4386_row3_col23\" class=\"data row3 col23\" >0.12</td>\n      <td id=\"T_e4386_row3_col24\" class=\"data row3 col24\" >0.05</td>\n      <td id=\"T_e4386_row3_col25\" class=\"data row3 col25\" >0.13</td>\n      <td id=\"T_e4386_row3_col26\" class=\"data row3 col26\" >-0.04</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row4\" class=\"row_heading level0 row4\" >opp_fico_score</th>\n      <td id=\"T_e4386_row4_col0\" class=\"data row4 col0\" >-0.05</td>\n      <td id=\"T_e4386_row4_col1\" class=\"data row4 col1\" >0.24</td>\n      <td id=\"T_e4386_row4_col2\" class=\"data row4 col2\" >-0.16</td>\n      <td id=\"T_e4386_row4_col3\" class=\"data row4 col3\" >-0.03</td>\n      <td id=\"T_e4386_row4_col4\" class=\"data row4 col4\" >1.00</td>\n      <td id=\"T_e4386_row4_col5\" class=\"data row4 col5\" >0.13</td>\n      <td id=\"T_e4386_row4_col6\" class=\"data row4 col6\" >0.04</td>\n      <td id=\"T_e4386_row4_col7\" class=\"data row4 col7\" >-0.06</td>\n      <td id=\"T_e4386_row4_col8\" class=\"data row4 col8\" >0.06</td>\n      <td id=\"T_e4386_row4_col9\" class=\"data row4 col9\" >0.03</td>\n      <td id=\"T_e4386_row4_col10\" class=\"data row4 col10\" >0.08</td>\n      <td id=\"T_e4386_row4_col11\" class=\"data row4 col11\" >-0.07</td>\n      <td id=\"T_e4386_row4_col12\" class=\"data row4 col12\" >-0.01</td>\n      <td id=\"T_e4386_row4_col13\" class=\"data row4 col13\" >0.08</td>\n      <td id=\"T_e4386_row4_col14\" class=\"data row4 col14\" >0.03</td>\n      <td id=\"T_e4386_row4_col15\" class=\"data row4 col15\" >0.11</td>\n      <td id=\"T_e4386_row4_col16\" class=\"data row4 col16\" >-0.07</td>\n      <td id=\"T_e4386_row4_col17\" class=\"data row4 col17\" >-0.00</td>\n      <td id=\"T_e4386_row4_col18\" class=\"data row4 col18\" >0.06</td>\n      <td id=\"T_e4386_row4_col19\" class=\"data row4 col19\" >0.03</td>\n      <td id=\"T_e4386_row4_col20\" class=\"data row4 col20\" >0.10</td>\n      <td id=\"T_e4386_row4_col21\" class=\"data row4 col21\" >-0.08</td>\n      <td id=\"T_e4386_row4_col22\" class=\"data row4 col22\" >-0.00</td>\n      <td id=\"T_e4386_row4_col23\" class=\"data row4 col23\" >0.08</td>\n      <td id=\"T_e4386_row4_col24\" class=\"data row4 col24\" >-0.02</td>\n      <td id=\"T_e4386_row4_col25\" class=\"data row4 col25\" >-0.02</td>\n      <td id=\"T_e4386_row4_col26\" class=\"data row4 col26\" >0.09</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row5\" class=\"row_heading level0 row5\" >rpmt_funded_amt</th>\n      <td id=\"T_e4386_row5_col0\" class=\"data row5 col0\" >-0.05</td>\n      <td id=\"T_e4386_row5_col1\" class=\"data row5 col1\" >0.55</td>\n      <td id=\"T_e4386_row5_col2\" class=\"data row5 col2\" >-0.41</td>\n      <td id=\"T_e4386_row5_col3\" class=\"data row5 col3\" >-0.24</td>\n      <td id=\"T_e4386_row5_col4\" class=\"data row5 col4\" >0.13</td>\n      <td id=\"T_e4386_row5_col5\" class=\"data row5 col5\" >1.00</td>\n      <td id=\"T_e4386_row5_col6\" class=\"data row5 col6\" >0.15</td>\n      <td id=\"T_e4386_row5_col7\" class=\"data row5 col7\" >-0.04</td>\n      <td id=\"T_e4386_row5_col8\" class=\"data row5 col8\" >0.69</td>\n      <td id=\"T_e4386_row5_col9\" class=\"data row5 col9\" >0.16</td>\n      <td id=\"T_e4386_row5_col10\" class=\"data row5 col10\" >0.47</td>\n      <td id=\"T_e4386_row5_col11\" class=\"data row5 col11\" >-0.05</td>\n      <td id=\"T_e4386_row5_col12\" class=\"data row5 col12\" >0.07</td>\n      <td id=\"T_e4386_row5_col13\" class=\"data row5 col13\" >0.71</td>\n      <td id=\"T_e4386_row5_col14\" class=\"data row5 col14\" >0.16</td>\n      <td id=\"T_e4386_row5_col15\" class=\"data row5 col15\" >0.52</td>\n      <td id=\"T_e4386_row5_col16\" class=\"data row5 col16\" >-0.04</td>\n      <td id=\"T_e4386_row5_col17\" class=\"data row5 col17\" >0.07</td>\n      <td id=\"T_e4386_row5_col18\" class=\"data row5 col18\" >0.66</td>\n      <td id=\"T_e4386_row5_col19\" class=\"data row5 col19\" >0.16</td>\n      <td id=\"T_e4386_row5_col20\" class=\"data row5 col20\" >0.50</td>\n      <td id=\"T_e4386_row5_col21\" class=\"data row5 col21\" >-0.04</td>\n      <td id=\"T_e4386_row5_col22\" class=\"data row5 col22\" >0.09</td>\n      <td id=\"T_e4386_row5_col23\" class=\"data row5 col23\" >-0.02</td>\n      <td id=\"T_e4386_row5_col24\" class=\"data row5 col24\" >-0.05</td>\n      <td id=\"T_e4386_row5_col25\" class=\"data row5 col25\" >-0.13</td>\n      <td id=\"T_e4386_row5_col26\" class=\"data row5 col26\" >0.06</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row6\" class=\"row_heading level0 row6\" >opp_years_in_biz</th>\n      <td id=\"T_e4386_row6_col0\" class=\"data row6 col0\" >-0.12</td>\n      <td id=\"T_e4386_row6_col1\" class=\"data row6 col1\" >0.30</td>\n      <td id=\"T_e4386_row6_col2\" class=\"data row6 col2\" >-0.12</td>\n      <td id=\"T_e4386_row6_col3\" class=\"data row6 col3\" >-0.09</td>\n      <td id=\"T_e4386_row6_col4\" class=\"data row6 col4\" >0.04</td>\n      <td id=\"T_e4386_row6_col5\" class=\"data row6 col5\" >0.15</td>\n      <td id=\"T_e4386_row6_col6\" class=\"data row6 col6\" >1.00</td>\n      <td id=\"T_e4386_row6_col7\" class=\"data row6 col7\" >-0.09</td>\n      <td id=\"T_e4386_row6_col8\" class=\"data row6 col8\" >0.10</td>\n      <td id=\"T_e4386_row6_col9\" class=\"data row6 col9\" >0.04</td>\n      <td id=\"T_e4386_row6_col10\" class=\"data row6 col10\" >0.06</td>\n      <td id=\"T_e4386_row6_col11\" class=\"data row6 col11\" >0.00</td>\n      <td id=\"T_e4386_row6_col12\" class=\"data row6 col12\" >0.03</td>\n      <td id=\"T_e4386_row6_col13\" class=\"data row6 col13\" >0.11</td>\n      <td id=\"T_e4386_row6_col14\" class=\"data row6 col14\" >0.04</td>\n      <td id=\"T_e4386_row6_col15\" class=\"data row6 col15\" >0.07</td>\n      <td id=\"T_e4386_row6_col16\" class=\"data row6 col16\" >0.02</td>\n      <td id=\"T_e4386_row6_col17\" class=\"data row6 col17\" >0.06</td>\n      <td id=\"T_e4386_row6_col18\" class=\"data row6 col18\" >0.11</td>\n      <td id=\"T_e4386_row6_col19\" class=\"data row6 col19\" >0.05</td>\n      <td id=\"T_e4386_row6_col20\" class=\"data row6 col20\" >0.07</td>\n      <td id=\"T_e4386_row6_col21\" class=\"data row6 col21\" >0.01</td>\n      <td id=\"T_e4386_row6_col22\" class=\"data row6 col22\" >0.06</td>\n      <td id=\"T_e4386_row6_col23\" class=\"data row6 col23\" >0.03</td>\n      <td id=\"T_e4386_row6_col24\" class=\"data row6 col24\" >-0.07</td>\n      <td id=\"T_e4386_row6_col25\" class=\"data row6 col25\" >-0.07</td>\n      <td id=\"T_e4386_row6_col26\" class=\"data row6 col26\" >0.07</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row7\" class=\"row_heading level0 row7\" >opp_epi</th>\n      <td id=\"T_e4386_row7_col0\" class=\"data row7 col0\" >0.45</td>\n      <td id=\"T_e4386_row7_col1\" class=\"data row7 col1\" >-0.12</td>\n      <td id=\"T_e4386_row7_col2\" class=\"data row7 col2\" >0.05</td>\n      <td id=\"T_e4386_row7_col3\" class=\"data row7 col3\" >0.02</td>\n      <td id=\"T_e4386_row7_col4\" class=\"data row7 col4\" >-0.06</td>\n      <td id=\"T_e4386_row7_col5\" class=\"data row7 col5\" >-0.04</td>\n      <td id=\"T_e4386_row7_col6\" class=\"data row7 col6\" >-0.09</td>\n      <td id=\"T_e4386_row7_col7\" class=\"data row7 col7\" >1.00</td>\n      <td id=\"T_e4386_row7_col8\" class=\"data row7 col8\" >-0.01</td>\n      <td id=\"T_e4386_row7_col9\" class=\"data row7 col9\" >-0.02</td>\n      <td id=\"T_e4386_row7_col10\" class=\"data row7 col10\" >-0.02</td>\n      <td id=\"T_e4386_row7_col11\" class=\"data row7 col11\" >0.10</td>\n      <td id=\"T_e4386_row7_col12\" class=\"data row7 col12\" >0.07</td>\n      <td id=\"T_e4386_row7_col13\" class=\"data row7 col13\" >-0.02</td>\n      <td id=\"T_e4386_row7_col14\" class=\"data row7 col14\" >-0.02</td>\n      <td id=\"T_e4386_row7_col15\" class=\"data row7 col15\" >-0.03</td>\n      <td id=\"T_e4386_row7_col16\" class=\"data row7 col16\" >0.09</td>\n      <td id=\"T_e4386_row7_col17\" class=\"data row7 col17\" >0.06</td>\n      <td id=\"T_e4386_row7_col18\" class=\"data row7 col18\" >-0.01</td>\n      <td id=\"T_e4386_row7_col19\" class=\"data row7 col19\" >-0.02</td>\n      <td id=\"T_e4386_row7_col20\" class=\"data row7 col20\" >-0.03</td>\n      <td id=\"T_e4386_row7_col21\" class=\"data row7 col21\" >0.08</td>\n      <td id=\"T_e4386_row7_col22\" class=\"data row7 col22\" >0.05</td>\n      <td id=\"T_e4386_row7_col23\" class=\"data row7 col23\" >-0.04</td>\n      <td id=\"T_e4386_row7_col24\" class=\"data row7 col24\" >0.04</td>\n      <td id=\"T_e4386_row7_col25\" class=\"data row7 col25\" >0.06</td>\n      <td id=\"T_e4386_row7_col26\" class=\"data row7 col26\" >-0.45</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row8\" class=\"row_heading level0 row8\" >m1_deposits</th>\n      <td id=\"T_e4386_row8_col0\" class=\"data row8 col0\" >-0.03</td>\n      <td id=\"T_e4386_row8_col1\" class=\"data row8 col1\" >0.31</td>\n      <td id=\"T_e4386_row8_col2\" class=\"data row8 col2\" >-0.31</td>\n      <td id=\"T_e4386_row8_col3\" class=\"data row8 col3\" >-0.38</td>\n      <td id=\"T_e4386_row8_col4\" class=\"data row8 col4\" >0.06</td>\n      <td id=\"T_e4386_row8_col5\" class=\"data row8 col5\" >0.69</td>\n      <td id=\"T_e4386_row8_col6\" class=\"data row8 col6\" >0.10</td>\n      <td id=\"T_e4386_row8_col7\" class=\"data row8 col7\" >-0.01</td>\n      <td id=\"T_e4386_row8_col8\" class=\"data row8 col8\" >1.00</td>\n      <td id=\"T_e4386_row8_col9\" class=\"data row8 col9\" >0.15</td>\n      <td id=\"T_e4386_row8_col10\" class=\"data row8 col10\" >0.59</td>\n      <td id=\"T_e4386_row8_col11\" class=\"data row8 col11\" >-0.03</td>\n      <td id=\"T_e4386_row8_col12\" class=\"data row8 col12\" >0.03</td>\n      <td id=\"T_e4386_row8_col13\" class=\"data row8 col13\" >0.91</td>\n      <td id=\"T_e4386_row8_col14\" class=\"data row8 col14\" >0.13</td>\n      <td id=\"T_e4386_row8_col15\" class=\"data row8 col15\" >0.60</td>\n      <td id=\"T_e4386_row8_col16\" class=\"data row8 col16\" >-0.02</td>\n      <td id=\"T_e4386_row8_col17\" class=\"data row8 col17\" >0.04</td>\n      <td id=\"T_e4386_row8_col18\" class=\"data row8 col18\" >0.87</td>\n      <td id=\"T_e4386_row8_col19\" class=\"data row8 col19\" >0.14</td>\n      <td id=\"T_e4386_row8_col20\" class=\"data row8 col20\" >0.62</td>\n      <td id=\"T_e4386_row8_col21\" class=\"data row8 col21\" >-0.01</td>\n      <td id=\"T_e4386_row8_col22\" class=\"data row8 col22\" >0.05</td>\n      <td id=\"T_e4386_row8_col23\" class=\"data row8 col23\" >-0.03</td>\n      <td id=\"T_e4386_row8_col24\" class=\"data row8 col24\" >0.06</td>\n      <td id=\"T_e4386_row8_col25\" class=\"data row8 col25\" >-0.03</td>\n      <td id=\"T_e4386_row8_col26\" class=\"data row8 col26\" >0.02</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row9\" class=\"row_heading level0 row9\" >m1_no_of_deposits</th>\n      <td id=\"T_e4386_row9_col0\" class=\"data row9 col0\" >-0.04</td>\n      <td id=\"T_e4386_row9_col1\" class=\"data row9 col1\" >0.18</td>\n      <td id=\"T_e4386_row9_col2\" class=\"data row9 col2\" >-0.08</td>\n      <td id=\"T_e4386_row9_col3\" class=\"data row9 col3\" >-0.10</td>\n      <td id=\"T_e4386_row9_col4\" class=\"data row9 col4\" >0.03</td>\n      <td id=\"T_e4386_row9_col5\" class=\"data row9 col5\" >0.16</td>\n      <td id=\"T_e4386_row9_col6\" class=\"data row9 col6\" >0.04</td>\n      <td id=\"T_e4386_row9_col7\" class=\"data row9 col7\" >-0.02</td>\n      <td id=\"T_e4386_row9_col8\" class=\"data row9 col8\" >0.15</td>\n      <td id=\"T_e4386_row9_col9\" class=\"data row9 col9\" >1.00</td>\n      <td id=\"T_e4386_row9_col10\" class=\"data row9 col10\" >0.07</td>\n      <td id=\"T_e4386_row9_col11\" class=\"data row9 col11\" >0.00</td>\n      <td id=\"T_e4386_row9_col12\" class=\"data row9 col12\" >0.06</td>\n      <td id=\"T_e4386_row9_col13\" class=\"data row9 col13\" >0.14</td>\n      <td id=\"T_e4386_row9_col14\" class=\"data row9 col14\" >0.95</td>\n      <td id=\"T_e4386_row9_col15\" class=\"data row9 col15\" >0.08</td>\n      <td id=\"T_e4386_row9_col16\" class=\"data row9 col16\" >0.02</td>\n      <td id=\"T_e4386_row9_col17\" class=\"data row9 col17\" >0.08</td>\n      <td id=\"T_e4386_row9_col18\" class=\"data row9 col18\" >0.13</td>\n      <td id=\"T_e4386_row9_col19\" class=\"data row9 col19\" >0.91</td>\n      <td id=\"T_e4386_row9_col20\" class=\"data row9 col20\" >0.08</td>\n      <td id=\"T_e4386_row9_col21\" class=\"data row9 col21\" >-0.00</td>\n      <td id=\"T_e4386_row9_col22\" class=\"data row9 col22\" >0.07</td>\n      <td id=\"T_e4386_row9_col23\" class=\"data row9 col23\" >-0.05</td>\n      <td id=\"T_e4386_row9_col24\" class=\"data row9 col24\" >0.01</td>\n      <td id=\"T_e4386_row9_col25\" class=\"data row9 col25\" >-0.13</td>\n      <td id=\"T_e4386_row9_col26\" class=\"data row9 col26\" >0.01</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row10\" class=\"row_heading level0 row10\" >m1_adbs</th>\n      <td id=\"T_e4386_row10_col0\" class=\"data row10 col0\" >-0.05</td>\n      <td id=\"T_e4386_row10_col1\" class=\"data row10 col1\" >0.23</td>\n      <td id=\"T_e4386_row10_col2\" class=\"data row10 col2\" >-0.23</td>\n      <td id=\"T_e4386_row10_col3\" class=\"data row10 col3\" >-0.21</td>\n      <td id=\"T_e4386_row10_col4\" class=\"data row10 col4\" >0.08</td>\n      <td id=\"T_e4386_row10_col5\" class=\"data row10 col5\" >0.47</td>\n      <td id=\"T_e4386_row10_col6\" class=\"data row10 col6\" >0.06</td>\n      <td id=\"T_e4386_row10_col7\" class=\"data row10 col7\" >-0.02</td>\n      <td id=\"T_e4386_row10_col8\" class=\"data row10 col8\" >0.59</td>\n      <td id=\"T_e4386_row10_col9\" class=\"data row10 col9\" >0.07</td>\n      <td id=\"T_e4386_row10_col10\" class=\"data row10 col10\" >1.00</td>\n      <td id=\"T_e4386_row10_col11\" class=\"data row10 col11\" >-0.09</td>\n      <td id=\"T_e4386_row10_col12\" class=\"data row10 col12\" >-0.03</td>\n      <td id=\"T_e4386_row10_col13\" class=\"data row10 col13\" >0.57</td>\n      <td id=\"T_e4386_row10_col14\" class=\"data row10 col14\" >0.07</td>\n      <td id=\"T_e4386_row10_col15\" class=\"data row10 col15\" >0.81</td>\n      <td id=\"T_e4386_row10_col16\" class=\"data row10 col16\" >-0.07</td>\n      <td id=\"T_e4386_row10_col17\" class=\"data row10 col17\" >-0.01</td>\n      <td id=\"T_e4386_row10_col18\" class=\"data row10 col18\" >0.53</td>\n      <td id=\"T_e4386_row10_col19\" class=\"data row10 col19\" >0.07</td>\n      <td id=\"T_e4386_row10_col20\" class=\"data row10 col20\" >0.68</td>\n      <td id=\"T_e4386_row10_col21\" class=\"data row10 col21\" >-0.04</td>\n      <td id=\"T_e4386_row10_col22\" class=\"data row10 col22\" >0.00</td>\n      <td id=\"T_e4386_row10_col23\" class=\"data row10 col23\" >0.26</td>\n      <td id=\"T_e4386_row10_col24\" class=\"data row10 col24\" >-0.01</td>\n      <td id=\"T_e4386_row10_col25\" class=\"data row10 col25\" >-0.00</td>\n      <td id=\"T_e4386_row10_col26\" class=\"data row10 col26\" >0.04</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row11\" class=\"row_heading level0 row11\" >m1_neg_days</th>\n      <td id=\"T_e4386_row11_col0\" class=\"data row11 col0\" >0.04</td>\n      <td id=\"T_e4386_row11_col1\" class=\"data row11 col1\" >-0.08</td>\n      <td id=\"T_e4386_row11_col2\" class=\"data row11 col2\" >0.08</td>\n      <td id=\"T_e4386_row11_col3\" class=\"data row11 col3\" >0.00</td>\n      <td id=\"T_e4386_row11_col4\" class=\"data row11 col4\" >-0.07</td>\n      <td id=\"T_e4386_row11_col5\" class=\"data row11 col5\" >-0.05</td>\n      <td id=\"T_e4386_row11_col6\" class=\"data row11 col6\" >0.00</td>\n      <td id=\"T_e4386_row11_col7\" class=\"data row11 col7\" >0.10</td>\n      <td id=\"T_e4386_row11_col8\" class=\"data row11 col8\" >-0.03</td>\n      <td id=\"T_e4386_row11_col9\" class=\"data row11 col9\" >0.00</td>\n      <td id=\"T_e4386_row11_col10\" class=\"data row11 col10\" >-0.09</td>\n      <td id=\"T_e4386_row11_col11\" class=\"data row11 col11\" >1.00</td>\n      <td id=\"T_e4386_row11_col12\" class=\"data row11 col12\" >0.29</td>\n      <td id=\"T_e4386_row11_col13\" class=\"data row11 col13\" >-0.03</td>\n      <td id=\"T_e4386_row11_col14\" class=\"data row11 col14\" >0.00</td>\n      <td id=\"T_e4386_row11_col15\" class=\"data row11 col15\" >-0.10</td>\n      <td id=\"T_e4386_row11_col16\" class=\"data row11 col16\" >0.46</td>\n      <td id=\"T_e4386_row11_col17\" class=\"data row11 col17\" >0.16</td>\n      <td id=\"T_e4386_row11_col18\" class=\"data row11 col18\" >-0.03</td>\n      <td id=\"T_e4386_row11_col19\" class=\"data row11 col19\" >0.01</td>\n      <td id=\"T_e4386_row11_col20\" class=\"data row11 col20\" >-0.08</td>\n      <td id=\"T_e4386_row11_col21\" class=\"data row11 col21\" >0.30</td>\n      <td id=\"T_e4386_row11_col22\" class=\"data row11 col22\" >0.14</td>\n      <td id=\"T_e4386_row11_col23\" class=\"data row11 col23\" >-0.15</td>\n      <td id=\"T_e4386_row11_col24\" class=\"data row11 col24\" >-0.01</td>\n      <td id=\"T_e4386_row11_col25\" class=\"data row11 col25\" >-0.02</td>\n      <td id=\"T_e4386_row11_col26\" class=\"data row11 col26\" >-0.07</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row12\" class=\"row_heading level0 row12\" >m1_nsfs</th>\n      <td id=\"T_e4386_row12_col0\" class=\"data row12 col0\" >0.03</td>\n      <td id=\"T_e4386_row12_col1\" class=\"data row12 col1\" >0.05</td>\n      <td id=\"T_e4386_row12_col2\" class=\"data row12 col2\" >-0.01</td>\n      <td id=\"T_e4386_row12_col3\" class=\"data row12 col3\" >-0.04</td>\n      <td id=\"T_e4386_row12_col4\" class=\"data row12 col4\" >-0.01</td>\n      <td id=\"T_e4386_row12_col5\" class=\"data row12 col5\" >0.07</td>\n      <td id=\"T_e4386_row12_col6\" class=\"data row12 col6\" >0.03</td>\n      <td id=\"T_e4386_row12_col7\" class=\"data row12 col7\" >0.07</td>\n      <td id=\"T_e4386_row12_col8\" class=\"data row12 col8\" >0.03</td>\n      <td id=\"T_e4386_row12_col9\" class=\"data row12 col9\" >0.06</td>\n      <td id=\"T_e4386_row12_col10\" class=\"data row12 col10\" >-0.03</td>\n      <td id=\"T_e4386_row12_col11\" class=\"data row12 col11\" >0.29</td>\n      <td id=\"T_e4386_row12_col12\" class=\"data row12 col12\" >1.00</td>\n      <td id=\"T_e4386_row12_col13\" class=\"data row12 col13\" >0.04</td>\n      <td id=\"T_e4386_row12_col14\" class=\"data row12 col14\" >0.06</td>\n      <td id=\"T_e4386_row12_col15\" class=\"data row12 col15\" >-0.03</td>\n      <td id=\"T_e4386_row12_col16\" class=\"data row12 col16\" >0.17</td>\n      <td id=\"T_e4386_row12_col17\" class=\"data row12 col17\" >0.65</td>\n      <td id=\"T_e4386_row12_col18\" class=\"data row12 col18\" >0.03</td>\n      <td id=\"T_e4386_row12_col19\" class=\"data row12 col19\" >0.06</td>\n      <td id=\"T_e4386_row12_col20\" class=\"data row12 col20\" >-0.03</td>\n      <td id=\"T_e4386_row12_col21\" class=\"data row12 col21\" >0.13</td>\n      <td id=\"T_e4386_row12_col22\" class=\"data row12 col22\" >0.43</td>\n      <td id=\"T_e4386_row12_col23\" class=\"data row12 col23\" >-0.07</td>\n      <td id=\"T_e4386_row12_col24\" class=\"data row12 col24\" >-0.01</td>\n      <td id=\"T_e4386_row12_col25\" class=\"data row12 col25\" >-0.02</td>\n      <td id=\"T_e4386_row12_col26\" class=\"data row12 col26\" >-0.04</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row13\" class=\"row_heading level0 row13\" >m2_deposits</th>\n      <td id=\"T_e4386_row13_col0\" class=\"data row13 col0\" >-0.04</td>\n      <td id=\"T_e4386_row13_col1\" class=\"data row13 col1\" >0.32</td>\n      <td id=\"T_e4386_row13_col2\" class=\"data row13 col2\" >-0.32</td>\n      <td id=\"T_e4386_row13_col3\" class=\"data row13 col3\" >-0.39</td>\n      <td id=\"T_e4386_row13_col4\" class=\"data row13 col4\" >0.08</td>\n      <td id=\"T_e4386_row13_col5\" class=\"data row13 col5\" >0.71</td>\n      <td id=\"T_e4386_row13_col6\" class=\"data row13 col6\" >0.11</td>\n      <td id=\"T_e4386_row13_col7\" class=\"data row13 col7\" >-0.02</td>\n      <td id=\"T_e4386_row13_col8\" class=\"data row13 col8\" >0.91</td>\n      <td id=\"T_e4386_row13_col9\" class=\"data row13 col9\" >0.14</td>\n      <td id=\"T_e4386_row13_col10\" class=\"data row13 col10\" >0.57</td>\n      <td id=\"T_e4386_row13_col11\" class=\"data row13 col11\" >-0.03</td>\n      <td id=\"T_e4386_row13_col12\" class=\"data row13 col12\" >0.04</td>\n      <td id=\"T_e4386_row13_col13\" class=\"data row13 col13\" >1.00</td>\n      <td id=\"T_e4386_row13_col14\" class=\"data row13 col14\" >0.14</td>\n      <td id=\"T_e4386_row13_col15\" class=\"data row13 col15\" >0.66</td>\n      <td id=\"T_e4386_row13_col16\" class=\"data row13 col16\" >-0.03</td>\n      <td id=\"T_e4386_row13_col17\" class=\"data row13 col17\" >0.04</td>\n      <td id=\"T_e4386_row13_col18\" class=\"data row13 col18\" >0.89</td>\n      <td id=\"T_e4386_row13_col19\" class=\"data row13 col19\" >0.14</td>\n      <td id=\"T_e4386_row13_col20\" class=\"data row13 col20\" >0.59</td>\n      <td id=\"T_e4386_row13_col21\" class=\"data row13 col21\" >-0.02</td>\n      <td id=\"T_e4386_row13_col22\" class=\"data row13 col22\" >0.06</td>\n      <td id=\"T_e4386_row13_col23\" class=\"data row13 col23\" >-0.02</td>\n      <td id=\"T_e4386_row13_col24\" class=\"data row13 col24\" >-0.10</td>\n      <td id=\"T_e4386_row13_col25\" class=\"data row13 col25\" >-0.07</td>\n      <td id=\"T_e4386_row13_col26\" class=\"data row13 col26\" >0.03</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row14\" class=\"row_heading level0 row14\" >m2_no_of_deposits</th>\n      <td id=\"T_e4386_row14_col0\" class=\"data row14 col0\" >-0.04</td>\n      <td id=\"T_e4386_row14_col1\" class=\"data row14 col1\" >0.19</td>\n      <td id=\"T_e4386_row14_col2\" class=\"data row14 col2\" >-0.08</td>\n      <td id=\"T_e4386_row14_col3\" class=\"data row14 col3\" >-0.10</td>\n      <td id=\"T_e4386_row14_col4\" class=\"data row14 col4\" >0.03</td>\n      <td id=\"T_e4386_row14_col5\" class=\"data row14 col5\" >0.16</td>\n      <td id=\"T_e4386_row14_col6\" class=\"data row14 col6\" >0.04</td>\n      <td id=\"T_e4386_row14_col7\" class=\"data row14 col7\" >-0.02</td>\n      <td id=\"T_e4386_row14_col8\" class=\"data row14 col8\" >0.13</td>\n      <td id=\"T_e4386_row14_col9\" class=\"data row14 col9\" >0.95</td>\n      <td id=\"T_e4386_row14_col10\" class=\"data row14 col10\" >0.07</td>\n      <td id=\"T_e4386_row14_col11\" class=\"data row14 col11\" >0.00</td>\n      <td id=\"T_e4386_row14_col12\" class=\"data row14 col12\" >0.06</td>\n      <td id=\"T_e4386_row14_col13\" class=\"data row14 col13\" >0.14</td>\n      <td id=\"T_e4386_row14_col14\" class=\"data row14 col14\" >1.00</td>\n      <td id=\"T_e4386_row14_col15\" class=\"data row14 col15\" >0.08</td>\n      <td id=\"T_e4386_row14_col16\" class=\"data row14 col16\" >0.01</td>\n      <td id=\"T_e4386_row14_col17\" class=\"data row14 col17\" >0.08</td>\n      <td id=\"T_e4386_row14_col18\" class=\"data row14 col18\" >0.12</td>\n      <td id=\"T_e4386_row14_col19\" class=\"data row14 col19\" >0.93</td>\n      <td id=\"T_e4386_row14_col20\" class=\"data row14 col20\" >0.07</td>\n      <td id=\"T_e4386_row14_col21\" class=\"data row14 col21\" >-0.01</td>\n      <td id=\"T_e4386_row14_col22\" class=\"data row14 col22\" >0.07</td>\n      <td id=\"T_e4386_row14_col23\" class=\"data row14 col23\" >-0.05</td>\n      <td id=\"T_e4386_row14_col24\" class=\"data row14 col24\" >-0.06</td>\n      <td id=\"T_e4386_row14_col25\" class=\"data row14 col25\" >-0.16</td>\n      <td id=\"T_e4386_row14_col26\" class=\"data row14 col26\" >0.02</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row15\" class=\"row_heading level0 row15\" >m2_adbs</th>\n      <td id=\"T_e4386_row15_col0\" class=\"data row15 col0\" >-0.05</td>\n      <td id=\"T_e4386_row15_col1\" class=\"data row15 col1\" >0.27</td>\n      <td id=\"T_e4386_row15_col2\" class=\"data row15 col2\" >-0.27</td>\n      <td id=\"T_e4386_row15_col3\" class=\"data row15 col3\" >-0.24</td>\n      <td id=\"T_e4386_row15_col4\" class=\"data row15 col4\" >0.11</td>\n      <td id=\"T_e4386_row15_col5\" class=\"data row15 col5\" >0.52</td>\n      <td id=\"T_e4386_row15_col6\" class=\"data row15 col6\" >0.07</td>\n      <td id=\"T_e4386_row15_col7\" class=\"data row15 col7\" >-0.03</td>\n      <td id=\"T_e4386_row15_col8\" class=\"data row15 col8\" >0.60</td>\n      <td id=\"T_e4386_row15_col9\" class=\"data row15 col9\" >0.08</td>\n      <td id=\"T_e4386_row15_col10\" class=\"data row15 col10\" >0.81</td>\n      <td id=\"T_e4386_row15_col11\" class=\"data row15 col11\" >-0.10</td>\n      <td id=\"T_e4386_row15_col12\" class=\"data row15 col12\" >-0.03</td>\n      <td id=\"T_e4386_row15_col13\" class=\"data row15 col13\" >0.66</td>\n      <td id=\"T_e4386_row15_col14\" class=\"data row15 col14\" >0.08</td>\n      <td id=\"T_e4386_row15_col15\" class=\"data row15 col15\" >1.00</td>\n      <td id=\"T_e4386_row15_col16\" class=\"data row15 col16\" >-0.11</td>\n      <td id=\"T_e4386_row15_col17\" class=\"data row15 col17\" >-0.03</td>\n      <td id=\"T_e4386_row15_col18\" class=\"data row15 col18\" >0.61</td>\n      <td id=\"T_e4386_row15_col19\" class=\"data row15 col19\" >0.08</td>\n      <td id=\"T_e4386_row15_col20\" class=\"data row15 col20\" >0.82</td>\n      <td id=\"T_e4386_row15_col21\" class=\"data row15 col21\" >-0.07</td>\n      <td id=\"T_e4386_row15_col22\" class=\"data row15 col22\" >-0.01</td>\n      <td id=\"T_e4386_row15_col23\" class=\"data row15 col23\" >0.33</td>\n      <td id=\"T_e4386_row15_col24\" class=\"data row15 col24\" >-0.08</td>\n      <td id=\"T_e4386_row15_col25\" class=\"data row15 col25\" >-0.02</td>\n      <td id=\"T_e4386_row15_col26\" class=\"data row15 col26\" >0.05</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row16\" class=\"row_heading level0 row16\" >m2_neg_days</th>\n      <td id=\"T_e4386_row16_col0\" class=\"data row16 col0\" >0.06</td>\n      <td id=\"T_e4386_row16_col1\" class=\"data row16 col1\" >-0.07</td>\n      <td id=\"T_e4386_row16_col2\" class=\"data row16 col2\" >0.07</td>\n      <td id=\"T_e4386_row16_col3\" class=\"data row16 col3\" >-0.00</td>\n      <td id=\"T_e4386_row16_col4\" class=\"data row16 col4\" >-0.07</td>\n      <td id=\"T_e4386_row16_col5\" class=\"data row16 col5\" >-0.04</td>\n      <td id=\"T_e4386_row16_col6\" class=\"data row16 col6\" >0.02</td>\n      <td id=\"T_e4386_row16_col7\" class=\"data row16 col7\" >0.09</td>\n      <td id=\"T_e4386_row16_col8\" class=\"data row16 col8\" >-0.02</td>\n      <td id=\"T_e4386_row16_col9\" class=\"data row16 col9\" >0.02</td>\n      <td id=\"T_e4386_row16_col10\" class=\"data row16 col10\" >-0.07</td>\n      <td id=\"T_e4386_row16_col11\" class=\"data row16 col11\" >0.46</td>\n      <td id=\"T_e4386_row16_col12\" class=\"data row16 col12\" >0.17</td>\n      <td id=\"T_e4386_row16_col13\" class=\"data row16 col13\" >-0.03</td>\n      <td id=\"T_e4386_row16_col14\" class=\"data row16 col14\" >0.01</td>\n      <td id=\"T_e4386_row16_col15\" class=\"data row16 col15\" >-0.11</td>\n      <td id=\"T_e4386_row16_col16\" class=\"data row16 col16\" >1.00</td>\n      <td id=\"T_e4386_row16_col17\" class=\"data row16 col17\" >0.32</td>\n      <td id=\"T_e4386_row16_col18\" class=\"data row16 col18\" >-0.02</td>\n      <td id=\"T_e4386_row16_col19\" class=\"data row16 col19\" >0.02</td>\n      <td id=\"T_e4386_row16_col20\" class=\"data row16 col20\" >-0.09</td>\n      <td id=\"T_e4386_row16_col21\" class=\"data row16 col21\" >0.43</td>\n      <td id=\"T_e4386_row16_col22\" class=\"data row16 col22\" >0.20</td>\n      <td id=\"T_e4386_row16_col23\" class=\"data row16 col23\" >-0.15</td>\n      <td id=\"T_e4386_row16_col24\" class=\"data row16 col24\" >0.06</td>\n      <td id=\"T_e4386_row16_col25\" class=\"data row16 col25\" >0.02</td>\n      <td id=\"T_e4386_row16_col26\" class=\"data row16 col26\" >-0.06</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row17\" class=\"row_heading level0 row17\" >m2_nsfs</th>\n      <td id=\"T_e4386_row17_col0\" class=\"data row17 col0\" >0.01</td>\n      <td id=\"T_e4386_row17_col1\" class=\"data row17 col1\" >0.05</td>\n      <td id=\"T_e4386_row17_col2\" class=\"data row17 col2\" >-0.01</td>\n      <td id=\"T_e4386_row17_col3\" class=\"data row17 col3\" >-0.05</td>\n      <td id=\"T_e4386_row17_col4\" class=\"data row17 col4\" >-0.00</td>\n      <td id=\"T_e4386_row17_col5\" class=\"data row17 col5\" >0.07</td>\n      <td id=\"T_e4386_row17_col6\" class=\"data row17 col6\" >0.06</td>\n      <td id=\"T_e4386_row17_col7\" class=\"data row17 col7\" >0.06</td>\n      <td id=\"T_e4386_row17_col8\" class=\"data row17 col8\" >0.04</td>\n      <td id=\"T_e4386_row17_col9\" class=\"data row17 col9\" >0.08</td>\n      <td id=\"T_e4386_row17_col10\" class=\"data row17 col10\" >-0.01</td>\n      <td id=\"T_e4386_row17_col11\" class=\"data row17 col11\" >0.16</td>\n      <td id=\"T_e4386_row17_col12\" class=\"data row17 col12\" >0.65</td>\n      <td id=\"T_e4386_row17_col13\" class=\"data row17 col13\" >0.04</td>\n      <td id=\"T_e4386_row17_col14\" class=\"data row17 col14\" >0.08</td>\n      <td id=\"T_e4386_row17_col15\" class=\"data row17 col15\" >-0.03</td>\n      <td id=\"T_e4386_row17_col16\" class=\"data row17 col16\" >0.32</td>\n      <td id=\"T_e4386_row17_col17\" class=\"data row17 col17\" >1.00</td>\n      <td id=\"T_e4386_row17_col18\" class=\"data row17 col18\" >0.03</td>\n      <td id=\"T_e4386_row17_col19\" class=\"data row17 col19\" >0.07</td>\n      <td id=\"T_e4386_row17_col20\" class=\"data row17 col20\" >-0.03</td>\n      <td id=\"T_e4386_row17_col21\" class=\"data row17 col21\" >0.19</td>\n      <td id=\"T_e4386_row17_col22\" class=\"data row17 col22\" >0.59</td>\n      <td id=\"T_e4386_row17_col23\" class=\"data row17 col23\" >-0.07</td>\n      <td id=\"T_e4386_row17_col24\" class=\"data row17 col24\" >0.00</td>\n      <td id=\"T_e4386_row17_col25\" class=\"data row17 col25\" >-0.01</td>\n      <td id=\"T_e4386_row17_col26\" class=\"data row17 col26\" >-0.03</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row18\" class=\"row_heading level0 row18\" >m3_deposits</th>\n      <td id=\"T_e4386_row18_col0\" class=\"data row18 col0\" >-0.04</td>\n      <td id=\"T_e4386_row18_col1\" class=\"data row18 col1\" >0.29</td>\n      <td id=\"T_e4386_row18_col2\" class=\"data row18 col2\" >-0.30</td>\n      <td id=\"T_e4386_row18_col3\" class=\"data row18 col3\" >-0.35</td>\n      <td id=\"T_e4386_row18_col4\" class=\"data row18 col4\" >0.06</td>\n      <td id=\"T_e4386_row18_col5\" class=\"data row18 col5\" >0.66</td>\n      <td id=\"T_e4386_row18_col6\" class=\"data row18 col6\" >0.11</td>\n      <td id=\"T_e4386_row18_col7\" class=\"data row18 col7\" >-0.01</td>\n      <td id=\"T_e4386_row18_col8\" class=\"data row18 col8\" >0.87</td>\n      <td id=\"T_e4386_row18_col9\" class=\"data row18 col9\" >0.13</td>\n      <td id=\"T_e4386_row18_col10\" class=\"data row18 col10\" >0.53</td>\n      <td id=\"T_e4386_row18_col11\" class=\"data row18 col11\" >-0.03</td>\n      <td id=\"T_e4386_row18_col12\" class=\"data row18 col12\" >0.03</td>\n      <td id=\"T_e4386_row18_col13\" class=\"data row18 col13\" >0.89</td>\n      <td id=\"T_e4386_row18_col14\" class=\"data row18 col14\" >0.12</td>\n      <td id=\"T_e4386_row18_col15\" class=\"data row18 col15\" >0.61</td>\n      <td id=\"T_e4386_row18_col16\" class=\"data row18 col16\" >-0.02</td>\n      <td id=\"T_e4386_row18_col17\" class=\"data row18 col17\" >0.03</td>\n      <td id=\"T_e4386_row18_col18\" class=\"data row18 col18\" >1.00</td>\n      <td id=\"T_e4386_row18_col19\" class=\"data row18 col19\" >0.14</td>\n      <td id=\"T_e4386_row18_col20\" class=\"data row18 col20\" >0.66</td>\n      <td id=\"T_e4386_row18_col21\" class=\"data row18 col21\" >-0.03</td>\n      <td id=\"T_e4386_row18_col22\" class=\"data row18 col22\" >0.05</td>\n      <td id=\"T_e4386_row18_col23\" class=\"data row18 col23\" >-0.01</td>\n      <td id=\"T_e4386_row18_col24\" class=\"data row18 col24\" >-0.12</td>\n      <td id=\"T_e4386_row18_col25\" class=\"data row18 col25\" >-0.09</td>\n      <td id=\"T_e4386_row18_col26\" class=\"data row18 col26\" >0.03</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row19\" class=\"row_heading level0 row19\" >m3_no_of_deposits</th>\n      <td id=\"T_e4386_row19_col0\" class=\"data row19 col0\" >-0.05</td>\n      <td id=\"T_e4386_row19_col1\" class=\"data row19 col1\" >0.20</td>\n      <td id=\"T_e4386_row19_col2\" class=\"data row19 col2\" >-0.08</td>\n      <td id=\"T_e4386_row19_col3\" class=\"data row19 col3\" >-0.11</td>\n      <td id=\"T_e4386_row19_col4\" class=\"data row19 col4\" >0.03</td>\n      <td id=\"T_e4386_row19_col5\" class=\"data row19 col5\" >0.16</td>\n      <td id=\"T_e4386_row19_col6\" class=\"data row19 col6\" >0.05</td>\n      <td id=\"T_e4386_row19_col7\" class=\"data row19 col7\" >-0.02</td>\n      <td id=\"T_e4386_row19_col8\" class=\"data row19 col8\" >0.14</td>\n      <td id=\"T_e4386_row19_col9\" class=\"data row19 col9\" >0.91</td>\n      <td id=\"T_e4386_row19_col10\" class=\"data row19 col10\" >0.07</td>\n      <td id=\"T_e4386_row19_col11\" class=\"data row19 col11\" >0.01</td>\n      <td id=\"T_e4386_row19_col12\" class=\"data row19 col12\" >0.06</td>\n      <td id=\"T_e4386_row19_col13\" class=\"data row19 col13\" >0.14</td>\n      <td id=\"T_e4386_row19_col14\" class=\"data row19 col14\" >0.93</td>\n      <td id=\"T_e4386_row19_col15\" class=\"data row19 col15\" >0.08</td>\n      <td id=\"T_e4386_row19_col16\" class=\"data row19 col16\" >0.02</td>\n      <td id=\"T_e4386_row19_col17\" class=\"data row19 col17\" >0.07</td>\n      <td id=\"T_e4386_row19_col18\" class=\"data row19 col18\" >0.14</td>\n      <td id=\"T_e4386_row19_col19\" class=\"data row19 col19\" >1.00</td>\n      <td id=\"T_e4386_row19_col20\" class=\"data row19 col20\" >0.08</td>\n      <td id=\"T_e4386_row19_col21\" class=\"data row19 col21\" >-0.01</td>\n      <td id=\"T_e4386_row19_col22\" class=\"data row19 col22\" >0.07</td>\n      <td id=\"T_e4386_row19_col23\" class=\"data row19 col23\" >-0.04</td>\n      <td id=\"T_e4386_row19_col24\" class=\"data row19 col24\" >-0.09</td>\n      <td id=\"T_e4386_row19_col25\" class=\"data row19 col25\" >-0.19</td>\n      <td id=\"T_e4386_row19_col26\" class=\"data row19 col26\" >0.02</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row20\" class=\"row_heading level0 row20\" >m3_adbs</th>\n      <td id=\"T_e4386_row20_col0\" class=\"data row20 col0\" >-0.05</td>\n      <td id=\"T_e4386_row20_col1\" class=\"data row20 col1\" >0.26</td>\n      <td id=\"T_e4386_row20_col2\" class=\"data row20 col2\" >-0.28</td>\n      <td id=\"T_e4386_row20_col3\" class=\"data row20 col3\" >-0.22</td>\n      <td id=\"T_e4386_row20_col4\" class=\"data row20 col4\" >0.10</td>\n      <td id=\"T_e4386_row20_col5\" class=\"data row20 col5\" >0.50</td>\n      <td id=\"T_e4386_row20_col6\" class=\"data row20 col6\" >0.07</td>\n      <td id=\"T_e4386_row20_col7\" class=\"data row20 col7\" >-0.03</td>\n      <td id=\"T_e4386_row20_col8\" class=\"data row20 col8\" >0.62</td>\n      <td id=\"T_e4386_row20_col9\" class=\"data row20 col9\" >0.08</td>\n      <td id=\"T_e4386_row20_col10\" class=\"data row20 col10\" >0.68</td>\n      <td id=\"T_e4386_row20_col11\" class=\"data row20 col11\" >-0.08</td>\n      <td id=\"T_e4386_row20_col12\" class=\"data row20 col12\" >-0.03</td>\n      <td id=\"T_e4386_row20_col13\" class=\"data row20 col13\" >0.59</td>\n      <td id=\"T_e4386_row20_col14\" class=\"data row20 col14\" >0.07</td>\n      <td id=\"T_e4386_row20_col15\" class=\"data row20 col15\" >0.82</td>\n      <td id=\"T_e4386_row20_col16\" class=\"data row20 col16\" >-0.09</td>\n      <td id=\"T_e4386_row20_col17\" class=\"data row20 col17\" >-0.03</td>\n      <td id=\"T_e4386_row20_col18\" class=\"data row20 col18\" >0.66</td>\n      <td id=\"T_e4386_row20_col19\" class=\"data row20 col19\" >0.08</td>\n      <td id=\"T_e4386_row20_col20\" class=\"data row20 col20\" >1.00</td>\n      <td id=\"T_e4386_row20_col21\" class=\"data row20 col21\" >-0.10</td>\n      <td id=\"T_e4386_row20_col22\" class=\"data row20 col22\" >-0.03</td>\n      <td id=\"T_e4386_row20_col23\" class=\"data row20 col23\" >0.33</td>\n      <td id=\"T_e4386_row20_col24\" class=\"data row20 col24\" >-0.06</td>\n      <td id=\"T_e4386_row20_col25\" class=\"data row20 col25\" >-0.03</td>\n      <td id=\"T_e4386_row20_col26\" class=\"data row20 col26\" >0.06</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row21\" class=\"row_heading level0 row21\" >m3_neg_days</th>\n      <td id=\"T_e4386_row21_col0\" class=\"data row21 col0\" >0.06</td>\n      <td id=\"T_e4386_row21_col1\" class=\"data row21 col1\" >-0.08</td>\n      <td id=\"T_e4386_row21_col2\" class=\"data row21 col2\" >0.07</td>\n      <td id=\"T_e4386_row21_col3\" class=\"data row21 col3\" >-0.02</td>\n      <td id=\"T_e4386_row21_col4\" class=\"data row21 col4\" >-0.08</td>\n      <td id=\"T_e4386_row21_col5\" class=\"data row21 col5\" >-0.04</td>\n      <td id=\"T_e4386_row21_col6\" class=\"data row21 col6\" >0.01</td>\n      <td id=\"T_e4386_row21_col7\" class=\"data row21 col7\" >0.08</td>\n      <td id=\"T_e4386_row21_col8\" class=\"data row21 col8\" >-0.01</td>\n      <td id=\"T_e4386_row21_col9\" class=\"data row21 col9\" >-0.00</td>\n      <td id=\"T_e4386_row21_col10\" class=\"data row21 col10\" >-0.04</td>\n      <td id=\"T_e4386_row21_col11\" class=\"data row21 col11\" >0.30</td>\n      <td id=\"T_e4386_row21_col12\" class=\"data row21 col12\" >0.13</td>\n      <td id=\"T_e4386_row21_col13\" class=\"data row21 col13\" >-0.02</td>\n      <td id=\"T_e4386_row21_col14\" class=\"data row21 col14\" >-0.01</td>\n      <td id=\"T_e4386_row21_col15\" class=\"data row21 col15\" >-0.07</td>\n      <td id=\"T_e4386_row21_col16\" class=\"data row21 col16\" >0.43</td>\n      <td id=\"T_e4386_row21_col17\" class=\"data row21 col17\" >0.19</td>\n      <td id=\"T_e4386_row21_col18\" class=\"data row21 col18\" >-0.03</td>\n      <td id=\"T_e4386_row21_col19\" class=\"data row21 col19\" >-0.01</td>\n      <td id=\"T_e4386_row21_col20\" class=\"data row21 col20\" >-0.10</td>\n      <td id=\"T_e4386_row21_col21\" class=\"data row21 col21\" >1.00</td>\n      <td id=\"T_e4386_row21_col22\" class=\"data row21 col22\" >0.37</td>\n      <td id=\"T_e4386_row21_col23\" class=\"data row21 col23\" >-0.12</td>\n      <td id=\"T_e4386_row21_col24\" class=\"data row21 col24\" >0.08</td>\n      <td id=\"T_e4386_row21_col25\" class=\"data row21 col25\" >0.08</td>\n      <td id=\"T_e4386_row21_col26\" class=\"data row21 col26\" >-0.06</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row22\" class=\"row_heading level0 row22\" >m3_nsfs</th>\n      <td id=\"T_e4386_row22_col0\" class=\"data row22 col0\" >0.01</td>\n      <td id=\"T_e4386_row22_col1\" class=\"data row22 col1\" >0.08</td>\n      <td id=\"T_e4386_row22_col2\" class=\"data row22 col2\" >-0.02</td>\n      <td id=\"T_e4386_row22_col3\" class=\"data row22 col3\" >-0.07</td>\n      <td id=\"T_e4386_row22_col4\" class=\"data row22 col4\" >-0.00</td>\n      <td id=\"T_e4386_row22_col5\" class=\"data row22 col5\" >0.09</td>\n      <td id=\"T_e4386_row22_col6\" class=\"data row22 col6\" >0.06</td>\n      <td id=\"T_e4386_row22_col7\" class=\"data row22 col7\" >0.05</td>\n      <td id=\"T_e4386_row22_col8\" class=\"data row22 col8\" >0.05</td>\n      <td id=\"T_e4386_row22_col9\" class=\"data row22 col9\" >0.07</td>\n      <td id=\"T_e4386_row22_col10\" class=\"data row22 col10\" >0.00</td>\n      <td id=\"T_e4386_row22_col11\" class=\"data row22 col11\" >0.14</td>\n      <td id=\"T_e4386_row22_col12\" class=\"data row22 col12\" >0.43</td>\n      <td id=\"T_e4386_row22_col13\" class=\"data row22 col13\" >0.06</td>\n      <td id=\"T_e4386_row22_col14\" class=\"data row22 col14\" >0.07</td>\n      <td id=\"T_e4386_row22_col15\" class=\"data row22 col15\" >-0.01</td>\n      <td id=\"T_e4386_row22_col16\" class=\"data row22 col16\" >0.20</td>\n      <td id=\"T_e4386_row22_col17\" class=\"data row22 col17\" >0.59</td>\n      <td id=\"T_e4386_row22_col18\" class=\"data row22 col18\" >0.05</td>\n      <td id=\"T_e4386_row22_col19\" class=\"data row22 col19\" >0.07</td>\n      <td id=\"T_e4386_row22_col20\" class=\"data row22 col20\" >-0.03</td>\n      <td id=\"T_e4386_row22_col21\" class=\"data row22 col21\" >0.37</td>\n      <td id=\"T_e4386_row22_col22\" class=\"data row22 col22\" >1.00</td>\n      <td id=\"T_e4386_row22_col23\" class=\"data row22 col23\" >-0.07</td>\n      <td id=\"T_e4386_row22_col24\" class=\"data row22 col24\" >0.00</td>\n      <td id=\"T_e4386_row22_col25\" class=\"data row22 col25\" >0.00</td>\n      <td id=\"T_e4386_row22_col26\" class=\"data row22 col26\" >-0.03</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row23\" class=\"row_heading level0 row23\" >opp_adbs_div_rev</th>\n      <td id=\"T_e4386_row23_col0\" class=\"data row23 col0\" >-0.05</td>\n      <td id=\"T_e4386_row23_col1\" class=\"data row23 col1\" >0.04</td>\n      <td id=\"T_e4386_row23_col2\" class=\"data row23 col2\" >-0.01</td>\n      <td id=\"T_e4386_row23_col3\" class=\"data row23 col3\" >0.12</td>\n      <td id=\"T_e4386_row23_col4\" class=\"data row23 col4\" >0.08</td>\n      <td id=\"T_e4386_row23_col5\" class=\"data row23 col5\" >-0.02</td>\n      <td id=\"T_e4386_row23_col6\" class=\"data row23 col6\" >0.03</td>\n      <td id=\"T_e4386_row23_col7\" class=\"data row23 col7\" >-0.04</td>\n      <td id=\"T_e4386_row23_col8\" class=\"data row23 col8\" >-0.03</td>\n      <td id=\"T_e4386_row23_col9\" class=\"data row23 col9\" >-0.05</td>\n      <td id=\"T_e4386_row23_col10\" class=\"data row23 col10\" >0.26</td>\n      <td id=\"T_e4386_row23_col11\" class=\"data row23 col11\" >-0.15</td>\n      <td id=\"T_e4386_row23_col12\" class=\"data row23 col12\" >-0.07</td>\n      <td id=\"T_e4386_row23_col13\" class=\"data row23 col13\" >-0.02</td>\n      <td id=\"T_e4386_row23_col14\" class=\"data row23 col14\" >-0.05</td>\n      <td id=\"T_e4386_row23_col15\" class=\"data row23 col15\" >0.33</td>\n      <td id=\"T_e4386_row23_col16\" class=\"data row23 col16\" >-0.15</td>\n      <td id=\"T_e4386_row23_col17\" class=\"data row23 col17\" >-0.07</td>\n      <td id=\"T_e4386_row23_col18\" class=\"data row23 col18\" >-0.01</td>\n      <td id=\"T_e4386_row23_col19\" class=\"data row23 col19\" >-0.04</td>\n      <td id=\"T_e4386_row23_col20\" class=\"data row23 col20\" >0.33</td>\n      <td id=\"T_e4386_row23_col21\" class=\"data row23 col21\" >-0.12</td>\n      <td id=\"T_e4386_row23_col22\" class=\"data row23 col22\" >-0.07</td>\n      <td id=\"T_e4386_row23_col23\" class=\"data row23 col23\" >1.00</td>\n      <td id=\"T_e4386_row23_col24\" class=\"data row23 col24\" >-0.03</td>\n      <td id=\"T_e4386_row23_col25\" class=\"data row23 col25\" >0.11</td>\n      <td id=\"T_e4386_row23_col26\" class=\"data row23 col26\" >0.07</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row24\" class=\"row_heading level0 row24\" >opp_last_mo_rev_trend</th>\n      <td id=\"T_e4386_row24_col0\" class=\"data row24 col0\" >0.06</td>\n      <td id=\"T_e4386_row24_col1\" class=\"data row24 col1\" >-0.08</td>\n      <td id=\"T_e4386_row24_col2\" class=\"data row24 col2\" >0.03</td>\n      <td id=\"T_e4386_row24_col3\" class=\"data row24 col3\" >0.05</td>\n      <td id=\"T_e4386_row24_col4\" class=\"data row24 col4\" >-0.02</td>\n      <td id=\"T_e4386_row24_col5\" class=\"data row24 col5\" >-0.05</td>\n      <td id=\"T_e4386_row24_col6\" class=\"data row24 col6\" >-0.07</td>\n      <td id=\"T_e4386_row24_col7\" class=\"data row24 col7\" >0.04</td>\n      <td id=\"T_e4386_row24_col8\" class=\"data row24 col8\" >0.06</td>\n      <td id=\"T_e4386_row24_col9\" class=\"data row24 col9\" >0.01</td>\n      <td id=\"T_e4386_row24_col10\" class=\"data row24 col10\" >-0.01</td>\n      <td id=\"T_e4386_row24_col11\" class=\"data row24 col11\" >-0.01</td>\n      <td id=\"T_e4386_row24_col12\" class=\"data row24 col12\" >-0.01</td>\n      <td id=\"T_e4386_row24_col13\" class=\"data row24 col13\" >-0.10</td>\n      <td id=\"T_e4386_row24_col14\" class=\"data row24 col14\" >-0.06</td>\n      <td id=\"T_e4386_row24_col15\" class=\"data row24 col15\" >-0.08</td>\n      <td id=\"T_e4386_row24_col16\" class=\"data row24 col16\" >0.06</td>\n      <td id=\"T_e4386_row24_col17\" class=\"data row24 col17\" >0.00</td>\n      <td id=\"T_e4386_row24_col18\" class=\"data row24 col18\" >-0.12</td>\n      <td id=\"T_e4386_row24_col19\" class=\"data row24 col19\" >-0.09</td>\n      <td id=\"T_e4386_row24_col20\" class=\"data row24 col20\" >-0.06</td>\n      <td id=\"T_e4386_row24_col21\" class=\"data row24 col21\" >0.08</td>\n      <td id=\"T_e4386_row24_col22\" class=\"data row24 col22\" >0.00</td>\n      <td id=\"T_e4386_row24_col23\" class=\"data row24 col23\" >-0.03</td>\n      <td id=\"T_e4386_row24_col24\" class=\"data row24 col24\" >1.00</td>\n      <td id=\"T_e4386_row24_col25\" class=\"data row24 col25\" >0.40</td>\n      <td id=\"T_e4386_row24_col26\" class=\"data row24 col26\" >-0.04</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row25\" class=\"row_heading level0 row25\" >opp_rev_vol</th>\n      <td id=\"T_e4386_row25_col0\" class=\"data row25 col0\" >0.09</td>\n      <td id=\"T_e4386_row25_col1\" class=\"data row25 col1\" >-0.22</td>\n      <td id=\"T_e4386_row25_col2\" class=\"data row25 col2\" >0.07</td>\n      <td id=\"T_e4386_row25_col3\" class=\"data row25 col3\" >0.13</td>\n      <td id=\"T_e4386_row25_col4\" class=\"data row25 col4\" >-0.02</td>\n      <td id=\"T_e4386_row25_col5\" class=\"data row25 col5\" >-0.13</td>\n      <td id=\"T_e4386_row25_col6\" class=\"data row25 col6\" >-0.07</td>\n      <td id=\"T_e4386_row25_col7\" class=\"data row25 col7\" >0.06</td>\n      <td id=\"T_e4386_row25_col8\" class=\"data row25 col8\" >-0.03</td>\n      <td id=\"T_e4386_row25_col9\" class=\"data row25 col9\" >-0.13</td>\n      <td id=\"T_e4386_row25_col10\" class=\"data row25 col10\" >-0.00</td>\n      <td id=\"T_e4386_row25_col11\" class=\"data row25 col11\" >-0.02</td>\n      <td id=\"T_e4386_row25_col12\" class=\"data row25 col12\" >-0.02</td>\n      <td id=\"T_e4386_row25_col13\" class=\"data row25 col13\" >-0.07</td>\n      <td id=\"T_e4386_row25_col14\" class=\"data row25 col14\" >-0.16</td>\n      <td id=\"T_e4386_row25_col15\" class=\"data row25 col15\" >-0.02</td>\n      <td id=\"T_e4386_row25_col16\" class=\"data row25 col16\" >0.02</td>\n      <td id=\"T_e4386_row25_col17\" class=\"data row25 col17\" >-0.01</td>\n      <td id=\"T_e4386_row25_col18\" class=\"data row25 col18\" >-0.09</td>\n      <td id=\"T_e4386_row25_col19\" class=\"data row25 col19\" >-0.19</td>\n      <td id=\"T_e4386_row25_col20\" class=\"data row25 col20\" >-0.03</td>\n      <td id=\"T_e4386_row25_col21\" class=\"data row25 col21\" >0.08</td>\n      <td id=\"T_e4386_row25_col22\" class=\"data row25 col22\" >0.00</td>\n      <td id=\"T_e4386_row25_col23\" class=\"data row25 col23\" >0.11</td>\n      <td id=\"T_e4386_row25_col24\" class=\"data row25 col24\" >0.40</td>\n      <td id=\"T_e4386_row25_col25\" class=\"data row25 col25\" >1.00</td>\n      <td id=\"T_e4386_row25_col26\" class=\"data row25 col26\" >-0.07</td>\n    </tr>\n    <tr>\n      <th id=\"T_e4386_level0_row26\" class=\"row_heading level0 row26\" >pmt_rate_60d</th>\n      <td id=\"T_e4386_row26_col0\" class=\"data row26 col0\" >-0.42</td>\n      <td id=\"T_e4386_row26_col1\" class=\"data row26 col1\" >0.16</td>\n      <td id=\"T_e4386_row26_col2\" class=\"data row26 col2\" >-0.08</td>\n      <td id=\"T_e4386_row26_col3\" class=\"data row26 col3\" >-0.04</td>\n      <td id=\"T_e4386_row26_col4\" class=\"data row26 col4\" >0.09</td>\n      <td id=\"T_e4386_row26_col5\" class=\"data row26 col5\" >0.06</td>\n      <td id=\"T_e4386_row26_col6\" class=\"data row26 col6\" >0.07</td>\n      <td id=\"T_e4386_row26_col7\" class=\"data row26 col7\" >-0.45</td>\n      <td id=\"T_e4386_row26_col8\" class=\"data row26 col8\" >0.02</td>\n      <td id=\"T_e4386_row26_col9\" class=\"data row26 col9\" >0.01</td>\n      <td id=\"T_e4386_row26_col10\" class=\"data row26 col10\" >0.04</td>\n      <td id=\"T_e4386_row26_col11\" class=\"data row26 col11\" >-0.07</td>\n      <td id=\"T_e4386_row26_col12\" class=\"data row26 col12\" >-0.04</td>\n      <td id=\"T_e4386_row26_col13\" class=\"data row26 col13\" >0.03</td>\n      <td id=\"T_e4386_row26_col14\" class=\"data row26 col14\" >0.02</td>\n      <td id=\"T_e4386_row26_col15\" class=\"data row26 col15\" >0.05</td>\n      <td id=\"T_e4386_row26_col16\" class=\"data row26 col16\" >-0.06</td>\n      <td id=\"T_e4386_row26_col17\" class=\"data row26 col17\" >-0.03</td>\n      <td id=\"T_e4386_row26_col18\" class=\"data row26 col18\" >0.03</td>\n      <td id=\"T_e4386_row26_col19\" class=\"data row26 col19\" >0.02</td>\n      <td id=\"T_e4386_row26_col20\" class=\"data row26 col20\" >0.06</td>\n      <td id=\"T_e4386_row26_col21\" class=\"data row26 col21\" >-0.06</td>\n      <td id=\"T_e4386_row26_col22\" class=\"data row26 col22\" >-0.03</td>\n      <td id=\"T_e4386_row26_col23\" class=\"data row26 col23\" >0.07</td>\n      <td id=\"T_e4386_row26_col24\" class=\"data row26 col24\" >-0.04</td>\n      <td id=\"T_e4386_row26_col25\" class=\"data row26 col25\" >-0.07</td>\n      <td id=\"T_e4386_row26_col26\" class=\"data row26 col26\" >1.00</td>\n    </tr>\n  </tbody>\n</table>\n"
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = df_clean.corr()\n",
    "corr.style.background_gradient(cmap='coolwarm').set_precision(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "Index(['is_charged_off', 'opp_term', 'opp_factor', 'opp_percent_of_rev',\n       'opp_fico_score', 'rpmt_funded_amt', 'rpmt_industry', 'rpmt_product',\n       'opp_years_in_biz', 'opp_epi', 'm1_deposits', 'm1_no_of_deposits',\n       'm1_adbs', 'm1_neg_days', 'm1_nsfs', 'm2_deposits', 'm2_no_of_deposits',\n       'm2_adbs', 'm2_neg_days', 'm2_nsfs', 'm3_deposits', 'm3_no_of_deposits',\n       'm3_adbs', 'm3_neg_days', 'm3_nsfs', 'opp_adbs_div_rev',\n       'opp_last_mo_rev_trend', 'opp_rev_vol', 'pmt_rate_60d'],\n      dtype='object')"
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "df_tree = pd.get_dummies(df_clean, columns=['rpmt_industry', 'rpmt_product'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "df_tree['rpmt_product_Diamond'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "    is_charged_off  opp_term  opp_factor  opp_percent_of_rev  opp_fico_score  \\\n1                0     11.00        1.49               17.15             0.0   \n6                0     10.00        1.49               14.94           695.0   \n8                0     12.00        1.42               11.20           667.0   \n15               0      7.25        1.49               22.40           508.0   \n29               0      5.75        1.49               17.85           539.0   \n\n    rpmt_funded_amt  opp_years_in_biz  opp_epi  m1_deposits  \\\n1           38000.0              5.01        0     29229.00   \n6           26000.0             51.55        0     30750.00   \n8          355000.0              6.44        0    435043.79   \n15          13000.0             13.23        0      7057.00   \n29           5500.0              1.44        0      6117.00   \n\n    m1_no_of_deposits  ...  rpmt_industry_All Else  \\\n1                 7.0  ...                       0   \n6                17.0  ...                       1   \n8               124.0  ...                       0   \n15               43.0  ...                       0   \n29               65.0  ...                       0   \n\n    rpmt_industry_Construction  rpmt_industry_Retail  \\\n1                            1                     0   \n6                            0                     0   \n8                            0                     1   \n15                           0                     1   \n29                           0                     1   \n\n    rpmt_industry_Transportation  rpmt_product_Bronze  rpmt_product_Gold  \\\n1                              0                    0                  0   \n6                              0                    0                  1   \n8                              0                    0                  0   \n15                             0                    0                  0   \n29                             0                    1                  0   \n\n    rpmt_product_Platinum  rpmt_product_Silver  rpmt_product_Titanium  \\\n1                       1                    0                      0   \n6                       0                    0                      0   \n8                       1                    0                      0   \n15                      0                    1                      0   \n29                      0                    0                      0   \n\n    rpmt_product_Diamond  \n1                      0  \n6                      0  \n8                      0  \n15                     0  \n29                     0  \n\n[5 rows x 37 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>is_charged_off</th>\n      <th>opp_term</th>\n      <th>opp_factor</th>\n      <th>opp_percent_of_rev</th>\n      <th>opp_fico_score</th>\n      <th>rpmt_funded_amt</th>\n      <th>opp_years_in_biz</th>\n      <th>opp_epi</th>\n      <th>m1_deposits</th>\n      <th>m1_no_of_deposits</th>\n      <th>...</th>\n      <th>rpmt_industry_All Else</th>\n      <th>rpmt_industry_Construction</th>\n      <th>rpmt_industry_Retail</th>\n      <th>rpmt_industry_Transportation</th>\n      <th>rpmt_product_Bronze</th>\n      <th>rpmt_product_Gold</th>\n      <th>rpmt_product_Platinum</th>\n      <th>rpmt_product_Silver</th>\n      <th>rpmt_product_Titanium</th>\n      <th>rpmt_product_Diamond</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>11.00</td>\n      <td>1.49</td>\n      <td>17.15</td>\n      <td>0.0</td>\n      <td>38000.0</td>\n      <td>5.01</td>\n      <td>0</td>\n      <td>29229.00</td>\n      <td>7.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>10.00</td>\n      <td>1.49</td>\n      <td>14.94</td>\n      <td>695.0</td>\n      <td>26000.0</td>\n      <td>51.55</td>\n      <td>0</td>\n      <td>30750.00</td>\n      <td>17.0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0</td>\n      <td>12.00</td>\n      <td>1.42</td>\n      <td>11.20</td>\n      <td>667.0</td>\n      <td>355000.0</td>\n      <td>6.44</td>\n      <td>0</td>\n      <td>435043.79</td>\n      <td>124.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>0</td>\n      <td>7.25</td>\n      <td>1.49</td>\n      <td>22.40</td>\n      <td>508.0</td>\n      <td>13000.0</td>\n      <td>13.23</td>\n      <td>0</td>\n      <td>7057.00</td>\n      <td>43.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>0</td>\n      <td>5.75</td>\n      <td>1.49</td>\n      <td>17.85</td>\n      <td>539.0</td>\n      <td>5500.0</td>\n      <td>1.44</td>\n      <td>0</td>\n      <td>6117.00</td>\n      <td>65.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 37 columns</p>\n</div>"
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tree.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X shape: (7718, 36)\n",
      "y shape: (7718,)\n"
     ]
    }
   ],
   "source": [
    "X= df_tree.drop('is_charged_off',axis=1)\n",
    "y= df_tree['is_charged_off']\n",
    "print(f'X shape: {np.shape(X)}')\n",
    "print(f'y shape: {np.shape(y)}')\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.9, test_size=0.1, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "DecisionTreeClassifier(criterion='entropy', max_depth=4, random_state=1)",
      "text/html": "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=4, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=4, random_state=1)</pre></div></div></div></div></div>"
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt = DecisionTreeClassifier(criterion='entropy', max_depth=4, random_state=1)\n",
    "dt.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 6.0.1 (20220911.1526)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"2192pt\" height=\"552pt\"\n viewBox=\"0.00 0.00 2191.50 552.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 548)\">\n<title>Tree</title>\n<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-548 2187.5,-548 2187.5,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<path fill=\"#eeac7d\" stroke=\"black\" d=\"M1149.5,-544C1149.5,-544 1015.5,-544 1015.5,-544 1009.5,-544 1003.5,-538 1003.5,-532 1003.5,-532 1003.5,-473 1003.5,-473 1003.5,-467 1009.5,-461 1015.5,-461 1015.5,-461 1149.5,-461 1149.5,-461 1155.5,-461 1161.5,-467 1161.5,-473 1161.5,-473 1161.5,-532 1161.5,-532 1161.5,-538 1155.5,-544 1149.5,-544\"/>\n<text text-anchor=\"start\" x=\"1011.5\" y=\"-528.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">pmt_rate_60d â‰¤ 0.888</text>\n<text text-anchor=\"start\" x=\"1032.5\" y=\"-513.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.818</text>\n<text text-anchor=\"start\" x=\"1031\" y=\"-498.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6946</text>\n<text text-anchor=\"start\" x=\"1017.5\" y=\"-483.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [5180, 1766]</text>\n<text text-anchor=\"start\" x=\"1053.5\" y=\"-468.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<path fill=\"#91c9f1\" stroke=\"black\" d=\"M885.5,-425C885.5,-425 751.5,-425 751.5,-425 745.5,-425 739.5,-419 739.5,-413 739.5,-413 739.5,-354 739.5,-354 739.5,-348 745.5,-342 751.5,-342 751.5,-342 885.5,-342 885.5,-342 891.5,-342 897.5,-348 897.5,-354 897.5,-354 897.5,-413 897.5,-413 897.5,-419 891.5,-425 885.5,-425\"/>\n<text text-anchor=\"start\" x=\"747.5\" y=\"-409.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">pmt_rate_60d â‰¤ 0.648</text>\n<text text-anchor=\"start\" x=\"772.5\" y=\"-394.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.89</text>\n<text text-anchor=\"start\" x=\"767\" y=\"-379.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1541</text>\n<text text-anchor=\"start\" x=\"757.5\" y=\"-364.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [474, 1067]</text>\n<text text-anchor=\"start\" x=\"789.5\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1003.29,-466.4C973.01,-452.98 938.29,-437.59 907.18,-423.8\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"908.21,-420.43 897.65,-419.58 905.38,-426.83 908.21,-420.43\"/>\n<text text-anchor=\"middle\" x=\"906.65\" y=\"-439.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n</g>\n<!-- 16 -->\n<g id=\"node17\" class=\"node\">\n<title>16</title>\n<path fill=\"#e99456\" stroke=\"black\" d=\"M1449.5,-425C1449.5,-425 1335.5,-425 1335.5,-425 1329.5,-425 1323.5,-419 1323.5,-413 1323.5,-413 1323.5,-354 1323.5,-354 1323.5,-348 1329.5,-342 1335.5,-342 1335.5,-342 1449.5,-342 1449.5,-342 1455.5,-342 1461.5,-348 1461.5,-354 1461.5,-354 1461.5,-413 1461.5,-413 1461.5,-419 1455.5,-425 1449.5,-425\"/>\n<text text-anchor=\"start\" x=\"1348.5\" y=\"-409.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">opp_epi â‰¤ 0.5</text>\n<text text-anchor=\"start\" x=\"1342.5\" y=\"-394.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.556</text>\n<text text-anchor=\"start\" x=\"1341\" y=\"-379.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5405</text>\n<text text-anchor=\"start\" x=\"1331.5\" y=\"-364.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [4706, 699]</text>\n<text text-anchor=\"start\" x=\"1363.5\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 0&#45;&gt;16 -->\n<g id=\"edge16\" class=\"edge\">\n<title>0&#45;&gt;16</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1161.53,-471.67C1208.27,-454.03 1267.25,-431.77 1313.91,-414.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1315.25,-417.4 1323.37,-410.59 1312.78,-410.85 1315.25,-417.4\"/>\n<text text-anchor=\"middle\" x=\"1313.08\" y=\"-429.67\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<path fill=\"#51a9e8\" stroke=\"black\" d=\"M476.5,-306C476.5,-306 342.5,-306 342.5,-306 336.5,-306 330.5,-300 330.5,-294 330.5,-294 330.5,-235 330.5,-235 330.5,-229 336.5,-223 342.5,-223 342.5,-223 476.5,-223 476.5,-223 482.5,-223 488.5,-229 488.5,-235 488.5,-235 488.5,-294 488.5,-294 488.5,-300 482.5,-306 476.5,-306\"/>\n<text text-anchor=\"start\" x=\"338.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">pmt_rate_60d â‰¤ 0.371</text>\n<text text-anchor=\"start\" x=\"363.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.49</text>\n<text text-anchor=\"start\" x=\"362\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 739</text>\n<text text-anchor=\"start\" x=\"356.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [79, 660]</text>\n<text text-anchor=\"start\" x=\"380.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M739.16,-359.8C670.15,-340.06 570.27,-311.49 498.55,-290.97\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"499.2,-287.52 488.62,-288.13 497.28,-294.25 499.2,-287.52\"/>\n</g>\n<!-- 9 -->\n<g id=\"node10\" class=\"node\">\n<title>9</title>\n<path fill=\"#f9fcfe\" stroke=\"black\" d=\"M885.5,-306C885.5,-306 751.5,-306 751.5,-306 745.5,-306 739.5,-300 739.5,-294 739.5,-294 739.5,-235 739.5,-235 739.5,-229 745.5,-223 751.5,-223 751.5,-223 885.5,-223 885.5,-223 891.5,-223 897.5,-229 897.5,-235 897.5,-235 897.5,-294 897.5,-294 897.5,-300 891.5,-306 885.5,-306\"/>\n<text text-anchor=\"start\" x=\"747.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">pmt_rate_60d â‰¤ 0.804</text>\n<text text-anchor=\"start\" x=\"776.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 1.0</text>\n<text text-anchor=\"start\" x=\"771\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 802</text>\n<text text-anchor=\"start\" x=\"761.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [395, 407]</text>\n<text text-anchor=\"start\" x=\"789.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 1&#45;&gt;9 -->\n<g id=\"edge9\" class=\"edge\">\n<title>1&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"black\" d=\"M818.5,-341.91C818.5,-333.65 818.5,-324.86 818.5,-316.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"822,-316.02 818.5,-306.02 815,-316.02 822,-316.02\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<path fill=\"#3a9de5\" stroke=\"black\" d=\"M261.5,-187C261.5,-187 117.5,-187 117.5,-187 111.5,-187 105.5,-181 105.5,-175 105.5,-175 105.5,-116 105.5,-116 105.5,-110 111.5,-104 117.5,-104 117.5,-104 261.5,-104 261.5,-104 267.5,-104 273.5,-110 273.5,-116 273.5,-116 273.5,-175 273.5,-175 273.5,-181 267.5,-187 261.5,-187\"/>\n<text text-anchor=\"start\" x=\"113.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">m3_deposits â‰¤ 48068.5</text>\n<text text-anchor=\"start\" x=\"139.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.034</text>\n<text text-anchor=\"start\" x=\"142\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 277</text>\n<text text-anchor=\"start\" x=\"141\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 276]</text>\n<text text-anchor=\"start\" x=\"160.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 2&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>2&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"black\" d=\"M333.17,-222.91C314.32,-212.88 294,-202.07 274.75,-191.84\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"276.17,-188.63 265.69,-187.02 272.88,-194.81 276.17,-188.63\"/>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<path fill=\"#61b1ea\" stroke=\"black\" d=\"M458.5,-187C458.5,-187 360.5,-187 360.5,-187 354.5,-187 348.5,-181 348.5,-175 348.5,-175 348.5,-116 348.5,-116 348.5,-110 354.5,-104 360.5,-104 360.5,-104 458.5,-104 458.5,-104 464.5,-104 470.5,-110 470.5,-116 470.5,-116 470.5,-175 470.5,-175 470.5,-181 464.5,-187 458.5,-187\"/>\n<text text-anchor=\"start\" x=\"365.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">opp_epi â‰¤ 0.5</text>\n<text text-anchor=\"start\" x=\"359.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.655</text>\n<text text-anchor=\"start\" x=\"362\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 462</text>\n<text text-anchor=\"start\" x=\"356.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [78, 384]</text>\n<text text-anchor=\"start\" x=\"380.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 2&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>2&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"black\" d=\"M409.5,-222.91C409.5,-214.65 409.5,-205.86 409.5,-197.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"413,-197.02 409.5,-187.02 406,-197.02 413,-197.02\"/>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<path fill=\"#399de5\" stroke=\"black\" d=\"M101,-68C101,-68 12,-68 12,-68 6,-68 0,-62 0,-56 0,-56 0,-12 0,-12 0,-6 6,0 12,0 12,0 101,0 101,0 107,0 113,-6 113,-12 113,-12 113,-56 113,-56 113,-62 107,-68 101,-68\"/>\n<text text-anchor=\"start\" x=\"14.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"start\" x=\"9\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 251</text>\n<text text-anchor=\"start\" x=\"8\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 251]</text>\n<text text-anchor=\"start\" x=\"27.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 3&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>3&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"black\" d=\"M139.98,-103.73C128.45,-94.24 116.2,-84.16 104.74,-74.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"106.89,-71.95 96.95,-68.3 102.44,-77.36 106.89,-71.95\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<path fill=\"#41a1e6\" stroke=\"black\" d=\"M235.5,-68C235.5,-68 143.5,-68 143.5,-68 137.5,-68 131.5,-62 131.5,-56 131.5,-56 131.5,-12 131.5,-12 131.5,-6 137.5,0 143.5,0 143.5,0 235.5,0 235.5,0 241.5,0 247.5,-6 247.5,-12 247.5,-12 247.5,-56 247.5,-56 247.5,-62 241.5,-68 235.5,-68\"/>\n<text text-anchor=\"start\" x=\"139.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.235</text>\n<text text-anchor=\"start\" x=\"146\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 26</text>\n<text text-anchor=\"start\" x=\"145\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 25]</text>\n<text text-anchor=\"start\" x=\"160.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 3&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>3&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"black\" d=\"M189.5,-103.73C189.5,-95.52 189.5,-86.86 189.5,-78.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"193,-78.3 189.5,-68.3 186,-78.3 193,-78.3\"/>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<path fill=\"#70b8ec\" stroke=\"black\" d=\"M375.5,-68C375.5,-68 277.5,-68 277.5,-68 271.5,-68 265.5,-62 265.5,-56 265.5,-56 265.5,-12 265.5,-12 265.5,-6 271.5,0 277.5,0 277.5,0 375.5,0 375.5,0 381.5,0 387.5,-6 387.5,-12 387.5,-12 387.5,-56 387.5,-56 387.5,-62 381.5,-68 375.5,-68\"/>\n<text text-anchor=\"start\" x=\"276.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.753</text>\n<text text-anchor=\"start\" x=\"279\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 282</text>\n<text text-anchor=\"start\" x=\"273.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [61, 221]</text>\n<text text-anchor=\"start\" x=\"297.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 6&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>6&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"black\" d=\"M378.59,-103.73C371.82,-94.79 364.64,-85.32 357.85,-76.36\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"360.57,-74.15 351.74,-68.3 354.99,-78.38 360.57,-74.15\"/>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<path fill=\"#4ea7e8\" stroke=\"black\" d=\"M515.5,-68C515.5,-68 417.5,-68 417.5,-68 411.5,-68 405.5,-62 405.5,-56 405.5,-56 405.5,-12 405.5,-12 405.5,-6 411.5,0 417.5,0 417.5,0 515.5,0 515.5,0 521.5,0 527.5,-6 527.5,-12 527.5,-12 527.5,-56 527.5,-56 527.5,-62 521.5,-68 515.5,-68\"/>\n<text text-anchor=\"start\" x=\"416.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.451</text>\n<text text-anchor=\"start\" x=\"419\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 180</text>\n<text text-anchor=\"start\" x=\"413.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [17, 163]</text>\n<text text-anchor=\"start\" x=\"437.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 6&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>6&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"black\" d=\"M430.72,-103.73C435.24,-95.06 440.01,-85.9 444.54,-77.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"447.65,-78.79 449.17,-68.3 441.44,-75.55 447.65,-78.79\"/>\n</g>\n<!-- 10 -->\n<g id=\"node11\" class=\"node\">\n<title>10</title>\n<path fill=\"#c2e1f7\" stroke=\"black\" d=\"M798,-187C798,-187 685,-187 685,-187 679,-187 673,-181 673,-175 673,-175 673,-116 673,-116 673,-110 679,-104 685,-104 685,-104 798,-104 798,-104 804,-104 810,-110 810,-116 810,-116 810,-175 810,-175 810,-181 804,-187 798,-187\"/>\n<text text-anchor=\"start\" x=\"681\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">opp_factor â‰¤ 1.448</text>\n<text text-anchor=\"start\" x=\"691.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.976</text>\n<text text-anchor=\"start\" x=\"694\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 413</text>\n<text text-anchor=\"start\" x=\"684.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [169, 244]</text>\n<text text-anchor=\"start\" x=\"712.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 9&#45;&gt;10 -->\n<g id=\"edge10\" class=\"edge\">\n<title>9&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"black\" d=\"M791.79,-222.91C785.99,-214.1 779.8,-204.7 773.82,-195.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"776.59,-193.45 768.17,-187.02 770.74,-197.3 776.59,-193.45\"/>\n</g>\n<!-- 13 -->\n<g id=\"node14\" class=\"node\">\n<title>13</title>\n<path fill=\"#f8dcc8\" stroke=\"black\" d=\"M953,-187C953,-187 840,-187 840,-187 834,-187 828,-181 828,-175 828,-175 828,-116 828,-116 828,-110 834,-104 840,-104 840,-104 953,-104 953,-104 959,-104 965,-110 965,-116 965,-116 965,-175 965,-175 965,-181 959,-187 953,-187\"/>\n<text text-anchor=\"start\" x=\"836\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">m1_adbs â‰¤ 5514.0</text>\n<text text-anchor=\"start\" x=\"846.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.981</text>\n<text text-anchor=\"start\" x=\"849\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 389</text>\n<text text-anchor=\"start\" x=\"839.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [226, 163]</text>\n<text text-anchor=\"start\" x=\"867.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 9&#45;&gt;13 -->\n<g id=\"edge13\" class=\"edge\">\n<title>9&#45;&gt;13</title>\n<path fill=\"none\" stroke=\"black\" d=\"M845.56,-222.91C851.43,-214.1 857.7,-204.7 863.76,-195.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"866.85,-197.28 869.49,-187.02 861.03,-193.4 866.85,-197.28\"/>\n</g>\n<!-- 11 -->\n<g id=\"node12\" class=\"node\">\n<title>11</title>\n<path fill=\"#4ba6e7\" stroke=\"black\" d=\"M649.5,-68C649.5,-68 557.5,-68 557.5,-68 551.5,-68 545.5,-62 545.5,-56 545.5,-56 545.5,-12 545.5,-12 545.5,-6 551.5,0 557.5,0 557.5,0 649.5,0 649.5,0 655.5,0 661.5,-6 661.5,-12 661.5,-12 661.5,-56 661.5,-56 661.5,-62 655.5,-68 649.5,-68\"/>\n<text text-anchor=\"start\" x=\"553.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.414</text>\n<text text-anchor=\"start\" x=\"560\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 36</text>\n<text text-anchor=\"start\" x=\"559\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 33]</text>\n<text text-anchor=\"start\" x=\"574.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 10&#45;&gt;11 -->\n<g id=\"edge11\" class=\"edge\">\n<title>10&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"black\" d=\"M690.11,-103.73C678.16,-94.24 665.45,-84.16 653.55,-74.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"655.48,-71.77 645.47,-68.3 651.12,-77.26 655.48,-71.77\"/>\n</g>\n<!-- 12 -->\n<g id=\"node13\" class=\"node\">\n<title>12</title>\n<path fill=\"#d5eaf9\" stroke=\"black\" d=\"M797.5,-68C797.5,-68 691.5,-68 691.5,-68 685.5,-68 679.5,-62 679.5,-56 679.5,-56 679.5,-12 679.5,-12 679.5,-6 685.5,0 691.5,0 691.5,0 797.5,0 797.5,0 803.5,0 809.5,-6 809.5,-12 809.5,-12 809.5,-56 809.5,-56 809.5,-62 803.5,-68 797.5,-68\"/>\n<text text-anchor=\"start\" x=\"698.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.99</text>\n<text text-anchor=\"start\" x=\"697\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 377</text>\n<text text-anchor=\"start\" x=\"687.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [166, 211]</text>\n<text text-anchor=\"start\" x=\"715.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 10&#45;&gt;12 -->\n<g id=\"edge12\" class=\"edge\">\n<title>10&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"black\" d=\"M742.62,-103.73C742.84,-95.52 743.08,-86.86 743.31,-78.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"746.81,-78.39 743.59,-68.3 739.82,-78.2 746.81,-78.39\"/>\n</g>\n<!-- 14 -->\n<g id=\"node15\" class=\"node\">\n<title>14</title>\n<path fill=\"#f4c9ab\" stroke=\"black\" d=\"M945.5,-68C945.5,-68 839.5,-68 839.5,-68 833.5,-68 827.5,-62 827.5,-56 827.5,-56 827.5,-12 827.5,-12 827.5,-6 833.5,0 839.5,0 839.5,0 945.5,0 945.5,0 951.5,0 957.5,-6 957.5,-12 957.5,-12 957.5,-56 957.5,-56 957.5,-62 951.5,-68 945.5,-68\"/>\n<text text-anchor=\"start\" x=\"842.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.947</text>\n<text text-anchor=\"start\" x=\"845\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 293</text>\n<text text-anchor=\"start\" x=\"835.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [186, 107]</text>\n<text text-anchor=\"start\" x=\"863.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 13&#45;&gt;14 -->\n<g id=\"edge14\" class=\"edge\">\n<title>13&#45;&gt;14</title>\n<path fill=\"none\" stroke=\"black\" d=\"M895.01,-103.73C894.71,-95.52 894.39,-86.86 894.09,-78.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"897.58,-78.17 893.72,-68.3 890.58,-78.42 897.58,-78.17\"/>\n</g>\n<!-- 15 -->\n<g id=\"node16\" class=\"node\">\n<title>15</title>\n<path fill=\"#c6e3f8\" stroke=\"black\" d=\"M1077,-68C1077,-68 988,-68 988,-68 982,-68 976,-62 976,-56 976,-56 976,-12 976,-12 976,-6 982,0 988,0 988,0 1077,0 1077,0 1083,0 1089,-6 1089,-12 1089,-12 1089,-56 1089,-56 1089,-62 1083,-68 1077,-68\"/>\n<text text-anchor=\"start\" x=\"986.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.98</text>\n<text text-anchor=\"start\" x=\"989\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 96</text>\n<text text-anchor=\"start\" x=\"984\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [40, 56]</text>\n<text text-anchor=\"start\" x=\"1003.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 13&#45;&gt;15 -->\n<g id=\"edge15\" class=\"edge\">\n<title>13&#45;&gt;15</title>\n<path fill=\"none\" stroke=\"black\" d=\"M947.14,-103.73C958.92,-94.24 971.45,-84.16 983.17,-74.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"985.55,-77.3 991.14,-68.3 981.16,-71.84 985.55,-77.3\"/>\n</g>\n<!-- 17 -->\n<g id=\"node18\" class=\"node\">\n<title>17</title>\n<path fill=\"#e89253\" stroke=\"black\" d=\"M1498.5,-306C1498.5,-306 1286.5,-306 1286.5,-306 1280.5,-306 1274.5,-300 1274.5,-294 1274.5,-294 1274.5,-235 1274.5,-235 1274.5,-229 1280.5,-223 1286.5,-223 1286.5,-223 1498.5,-223 1498.5,-223 1504.5,-223 1510.5,-229 1510.5,-235 1510.5,-235 1510.5,-294 1510.5,-294 1510.5,-300 1504.5,-306 1498.5,-306\"/>\n<text text-anchor=\"start\" x=\"1282.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">rpmt_industry_Transportation â‰¤ 0.5</text>\n<text text-anchor=\"start\" x=\"1342.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.519</text>\n<text text-anchor=\"start\" x=\"1341\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5270</text>\n<text text-anchor=\"start\" x=\"1331.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [4656, 614]</text>\n<text text-anchor=\"start\" x=\"1363.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 16&#45;&gt;17 -->\n<g id=\"edge17\" class=\"edge\">\n<title>16&#45;&gt;17</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1392.5,-341.91C1392.5,-333.65 1392.5,-324.86 1392.5,-316.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1396,-316.02 1392.5,-306.02 1389,-316.02 1396,-316.02\"/>\n</g>\n<!-- 24 -->\n<g id=\"node25\" class=\"node\">\n<title>24</title>\n<path fill=\"#add7f4\" stroke=\"black\" d=\"M1826.5,-306C1826.5,-306 1734.5,-306 1734.5,-306 1728.5,-306 1722.5,-300 1722.5,-294 1722.5,-294 1722.5,-235 1722.5,-235 1722.5,-229 1728.5,-223 1734.5,-223 1734.5,-223 1826.5,-223 1826.5,-223 1832.5,-223 1838.5,-229 1838.5,-235 1838.5,-235 1838.5,-294 1838.5,-294 1838.5,-300 1832.5,-306 1826.5,-306\"/>\n<text text-anchor=\"start\" x=\"1735\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">m2_nsfs â‰¤ 2.5</text>\n<text text-anchor=\"start\" x=\"1730.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.951</text>\n<text text-anchor=\"start\" x=\"1733\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 135</text>\n<text text-anchor=\"start\" x=\"1732\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [50, 85]</text>\n<text text-anchor=\"start\" x=\"1751.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 16&#45;&gt;24 -->\n<g id=\"edge24\" class=\"edge\">\n<title>16&#45;&gt;24</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1461.87,-361.58C1532.86,-340.18 1642.46,-307.13 1712.83,-285.91\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1713.92,-289.23 1722.49,-282.99 1711.9,-282.53 1713.92,-289.23\"/>\n</g>\n<!-- 18 -->\n<g id=\"node19\" class=\"node\">\n<title>18</title>\n<path fill=\"#e88f4f\" stroke=\"black\" d=\"M1361.5,-187C1361.5,-187 1227.5,-187 1227.5,-187 1221.5,-187 1215.5,-181 1215.5,-175 1215.5,-175 1215.5,-116 1215.5,-116 1215.5,-110 1221.5,-104 1227.5,-104 1227.5,-104 1361.5,-104 1361.5,-104 1367.5,-104 1373.5,-110 1373.5,-116 1373.5,-116 1373.5,-175 1373.5,-175 1373.5,-181 1367.5,-187 1361.5,-187\"/>\n<text text-anchor=\"start\" x=\"1223.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">pmt_rate_60d â‰¤ 0.955</text>\n<text text-anchor=\"start\" x=\"1244.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.464</text>\n<text text-anchor=\"start\" x=\"1243\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3930</text>\n<text text-anchor=\"start\" x=\"1233.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3543, 387]</text>\n<text text-anchor=\"start\" x=\"1265.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 17&#45;&gt;18 -->\n<g id=\"edge18\" class=\"edge\">\n<title>17&#45;&gt;18</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1358.5,-222.91C1350.9,-213.83 1342.76,-204.12 1334.93,-194.77\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1337.54,-192.44 1328.44,-187.02 1332.18,-196.93 1337.54,-192.44\"/>\n</g>\n<!-- 21 -->\n<g id=\"node22\" class=\"node\">\n<title>21</title>\n<path fill=\"#ea9b61\" stroke=\"black\" d=\"M1577,-187C1577,-187 1404,-187 1404,-187 1398,-187 1392,-181 1392,-175 1392,-175 1392,-116 1392,-116 1392,-110 1398,-104 1404,-104 1404,-104 1577,-104 1577,-104 1583,-104 1589,-110 1589,-116 1589,-116 1589,-175 1589,-175 1589,-181 1583,-187 1577,-187\"/>\n<text text-anchor=\"start\" x=\"1400\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">rpmt_funded_amt â‰¤ 20150.0</text>\n<text text-anchor=\"start\" x=\"1440.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.656</text>\n<text text-anchor=\"start\" x=\"1439\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1340</text>\n<text text-anchor=\"start\" x=\"1429.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1113, 227]</text>\n<text text-anchor=\"start\" x=\"1461.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 17&#45;&gt;21 -->\n<g id=\"edge21\" class=\"edge\">\n<title>17&#45;&gt;21</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1426.5,-222.91C1434.1,-213.83 1442.24,-204.12 1450.07,-194.77\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1452.82,-196.93 1456.56,-187.02 1447.46,-192.44 1452.82,-196.93\"/>\n</g>\n<!-- 19 -->\n<g id=\"node20\" class=\"node\">\n<title>19</title>\n<path fill=\"#eb9f68\" stroke=\"black\" d=\"M1217.5,-68C1217.5,-68 1119.5,-68 1119.5,-68 1113.5,-68 1107.5,-62 1107.5,-56 1107.5,-56 1107.5,-12 1107.5,-12 1107.5,-6 1113.5,0 1119.5,0 1119.5,0 1217.5,0 1217.5,0 1223.5,0 1229.5,-6 1229.5,-12 1229.5,-12 1229.5,-56 1229.5,-56 1229.5,-62 1223.5,-68 1217.5,-68\"/>\n<text text-anchor=\"start\" x=\"1118.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.703</text>\n<text text-anchor=\"start\" x=\"1121\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 398</text>\n<text text-anchor=\"start\" x=\"1115.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [322, 76]</text>\n<text text-anchor=\"start\" x=\"1139.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 18&#45;&gt;19 -->\n<g id=\"edge19\" class=\"edge\">\n<title>18&#45;&gt;19</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1247.58,-103.73C1236.77,-94.33 1225.29,-84.35 1214.51,-74.99\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1216.66,-72.22 1206.82,-68.3 1212.07,-77.5 1216.66,-72.22\"/>\n</g>\n<!-- 20 -->\n<g id=\"node21\" class=\"node\">\n<title>20</title>\n<path fill=\"#e88d4c\" stroke=\"black\" d=\"M1373.5,-68C1373.5,-68 1259.5,-68 1259.5,-68 1253.5,-68 1247.5,-62 1247.5,-56 1247.5,-56 1247.5,-12 1247.5,-12 1247.5,-6 1253.5,0 1259.5,0 1259.5,0 1373.5,0 1373.5,0 1379.5,0 1385.5,-6 1385.5,-12 1385.5,-12 1385.5,-56 1385.5,-56 1385.5,-62 1379.5,-68 1373.5,-68\"/>\n<text text-anchor=\"start\" x=\"1270.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.43</text>\n<text text-anchor=\"start\" x=\"1265\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3532</text>\n<text text-anchor=\"start\" x=\"1255.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3221, 311]</text>\n<text text-anchor=\"start\" x=\"1287.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 18&#45;&gt;20 -->\n<g id=\"edge20\" class=\"edge\">\n<title>18&#45;&gt;20</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1302.69,-103.73C1304.36,-95.43 1306.12,-86.67 1307.8,-78.28\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1311.27,-78.79 1309.81,-68.3 1304.41,-77.41 1311.27,-78.79\"/>\n</g>\n<!-- 22 -->\n<g id=\"node23\" class=\"node\">\n<title>22</title>\n<path fill=\"#e9965a\" stroke=\"black\" d=\"M1521.5,-68C1521.5,-68 1415.5,-68 1415.5,-68 1409.5,-68 1403.5,-62 1403.5,-56 1403.5,-56 1403.5,-12 1403.5,-12 1403.5,-6 1409.5,0 1415.5,0 1415.5,0 1521.5,0 1521.5,0 1527.5,0 1533.5,-6 1533.5,-12 1533.5,-12 1533.5,-56 1533.5,-56 1533.5,-62 1527.5,-68 1521.5,-68\"/>\n<text text-anchor=\"start\" x=\"1418.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.587</text>\n<text text-anchor=\"start\" x=\"1417\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1049</text>\n<text text-anchor=\"start\" x=\"1411.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [901, 148]</text>\n<text text-anchor=\"start\" x=\"1439.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 21&#45;&gt;22 -->\n<g id=\"edge22\" class=\"edge\">\n<title>21&#45;&gt;22</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1482.31,-103.73C1480.64,-95.43 1478.88,-86.67 1477.2,-78.28\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1480.59,-77.41 1475.19,-68.3 1473.73,-78.79 1480.59,-77.41\"/>\n</g>\n<!-- 23 -->\n<g id=\"node24\" class=\"node\">\n<title>23</title>\n<path fill=\"#efb083\" stroke=\"black\" d=\"M1661.5,-68C1661.5,-68 1563.5,-68 1563.5,-68 1557.5,-68 1551.5,-62 1551.5,-56 1551.5,-56 1551.5,-12 1551.5,-12 1551.5,-6 1557.5,0 1563.5,0 1563.5,0 1661.5,0 1661.5,0 1667.5,0 1673.5,-6 1673.5,-12 1673.5,-12 1673.5,-56 1673.5,-56 1673.5,-62 1667.5,-68 1661.5,-68\"/>\n<text text-anchor=\"start\" x=\"1562.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.844</text>\n<text text-anchor=\"start\" x=\"1565\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 291</text>\n<text text-anchor=\"start\" x=\"1559.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [212, 79]</text>\n<text text-anchor=\"start\" x=\"1583.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 21&#45;&gt;23 -->\n<g id=\"edge23\" class=\"edge\">\n<title>21&#45;&gt;23</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1535.93,-103.73C1546.4,-94.33 1557.52,-84.35 1567.95,-74.99\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1570.29,-77.58 1575.4,-68.3 1565.62,-72.37 1570.29,-77.58\"/>\n</g>\n<!-- 25 -->\n<g id=\"node26\" class=\"node\">\n<title>25</title>\n<path fill=\"#92c9f1\" stroke=\"black\" d=\"M1856.5,-187C1856.5,-187 1704.5,-187 1704.5,-187 1698.5,-187 1692.5,-181 1692.5,-175 1692.5,-175 1692.5,-116 1692.5,-116 1692.5,-110 1698.5,-104 1704.5,-104 1704.5,-104 1856.5,-104 1856.5,-104 1862.5,-104 1868.5,-110 1868.5,-116 1868.5,-116 1868.5,-175 1868.5,-175 1868.5,-181 1862.5,-187 1856.5,-187\"/>\n<text text-anchor=\"start\" x=\"1700.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">m3_deposits â‰¤ 127527.5</text>\n<text text-anchor=\"start\" x=\"1730.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.894</text>\n<text text-anchor=\"start\" x=\"1733\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 119</text>\n<text text-anchor=\"start\" x=\"1732\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [37, 82]</text>\n<text text-anchor=\"start\" x=\"1751.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 24&#45;&gt;25 -->\n<g id=\"edge25\" class=\"edge\">\n<title>24&#45;&gt;25</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1780.5,-222.91C1780.5,-214.65 1780.5,-205.86 1780.5,-197.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1784,-197.02 1780.5,-187.02 1777,-197.02 1784,-197.02\"/>\n</g>\n<!-- 28 -->\n<g id=\"node29\" class=\"node\">\n<title>28</title>\n<path fill=\"#eb9e67\" stroke=\"black\" d=\"M2063.5,-187C2063.5,-187 1929.5,-187 1929.5,-187 1923.5,-187 1917.5,-181 1917.5,-175 1917.5,-175 1917.5,-116 1917.5,-116 1917.5,-110 1923.5,-104 1929.5,-104 1929.5,-104 2063.5,-104 2063.5,-104 2069.5,-104 2075.5,-110 2075.5,-116 2075.5,-116 2075.5,-175 2075.5,-175 2075.5,-181 2069.5,-187 2063.5,-187\"/>\n<text text-anchor=\"start\" x=\"1925.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">pmt_rate_60d â‰¤ 0.988</text>\n<text text-anchor=\"start\" x=\"1946.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.696</text>\n<text text-anchor=\"start\" x=\"1953\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 16</text>\n<text text-anchor=\"start\" x=\"1952\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [13, 3]</text>\n<text text-anchor=\"start\" x=\"1967.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 24&#45;&gt;28 -->\n<g id=\"edge28\" class=\"edge\">\n<title>24&#45;&gt;28</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1838.67,-231.99C1861.37,-219.7 1887.84,-205.36 1912.53,-191.98\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1914.42,-194.94 1921.54,-187.1 1911.08,-188.79 1914.42,-194.94\"/>\n</g>\n<!-- 26 -->\n<g id=\"node27\" class=\"node\">\n<title>26</title>\n<path fill=\"#89c4ef\" stroke=\"black\" d=\"M1795.5,-68C1795.5,-68 1703.5,-68 1703.5,-68 1697.5,-68 1691.5,-62 1691.5,-56 1691.5,-56 1691.5,-12 1691.5,-12 1691.5,-6 1697.5,0 1703.5,0 1703.5,0 1795.5,0 1795.5,0 1801.5,0 1807.5,-6 1807.5,-12 1807.5,-12 1807.5,-56 1807.5,-56 1807.5,-62 1801.5,-68 1795.5,-68\"/>\n<text text-anchor=\"start\" x=\"1699.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.865</text>\n<text text-anchor=\"start\" x=\"1702\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 115</text>\n<text text-anchor=\"start\" x=\"1701\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [33, 82]</text>\n<text text-anchor=\"start\" x=\"1720.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 25&#45;&gt;26 -->\n<g id=\"edge26\" class=\"edge\">\n<title>25&#45;&gt;26</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1768.96,-103.73C1766.58,-95.34 1764.07,-86.47 1761.68,-78.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1765.02,-76.97 1758.93,-68.3 1758.28,-78.87 1765.02,-76.97\"/>\n</g>\n<!-- 27 -->\n<g id=\"node28\" class=\"node\">\n<title>27</title>\n<path fill=\"#e58139\" stroke=\"black\" d=\"M1913.5,-68C1913.5,-68 1837.5,-68 1837.5,-68 1831.5,-68 1825.5,-62 1825.5,-56 1825.5,-56 1825.5,-12 1825.5,-12 1825.5,-6 1831.5,0 1837.5,0 1837.5,0 1913.5,0 1913.5,0 1919.5,0 1925.5,-6 1925.5,-12 1925.5,-12 1925.5,-56 1925.5,-56 1925.5,-62 1919.5,-68 1913.5,-68\"/>\n<text text-anchor=\"start\" x=\"1833.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"start\" x=\"1836\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4</text>\n<text text-anchor=\"start\" x=\"1835\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [4, 0]</text>\n<text text-anchor=\"start\" x=\"1846.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 25&#45;&gt;27 -->\n<g id=\"edge27\" class=\"edge\">\n<title>25&#45;&gt;27</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1815.87,-103.73C1823.71,-94.7 1832.01,-85.12 1839.86,-76.08\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1842.7,-78.15 1846.61,-68.3 1837.41,-73.56 1842.7,-78.15\"/>\n</g>\n<!-- 29 -->\n<g id=\"node30\" class=\"node\">\n<title>29</title>\n<path fill=\"#e58139\" stroke=\"black\" d=\"M2037,-68C2037,-68 1956,-68 1956,-68 1950,-68 1944,-62 1944,-56 1944,-56 1944,-12 1944,-12 1944,-6 1950,0 1956,0 1956,0 2037,0 2037,0 2043,0 2049,-6 2049,-12 2049,-12 2049,-56 2049,-56 2049,-62 2043,-68 2037,-68\"/>\n<text text-anchor=\"start\" x=\"1954.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n<text text-anchor=\"start\" x=\"1953\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 11</text>\n<text text-anchor=\"start\" x=\"1952\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [11, 0]</text>\n<text text-anchor=\"start\" x=\"1967.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 0</text>\n</g>\n<!-- 28&#45;&gt;29 -->\n<g id=\"edge29\" class=\"edge\">\n<title>28&#45;&gt;29</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1996.5,-103.73C1996.5,-95.52 1996.5,-86.86 1996.5,-78.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"2000,-78.3 1996.5,-68.3 1993,-78.3 2000,-78.3\"/>\n</g>\n<!-- 30 -->\n<g id=\"node31\" class=\"node\">\n<title>30</title>\n<path fill=\"#bddef6\" stroke=\"black\" d=\"M2171.5,-68C2171.5,-68 2079.5,-68 2079.5,-68 2073.5,-68 2067.5,-62 2067.5,-56 2067.5,-56 2067.5,-12 2067.5,-12 2067.5,-6 2073.5,0 2079.5,0 2079.5,0 2171.5,0 2171.5,0 2177.5,0 2183.5,-6 2183.5,-12 2183.5,-12 2183.5,-56 2183.5,-56 2183.5,-62 2177.5,-68 2171.5,-68\"/>\n<text text-anchor=\"start\" x=\"2075.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.971</text>\n<text text-anchor=\"start\" x=\"2086\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5</text>\n<text text-anchor=\"start\" x=\"2085\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 3]</text>\n<text text-anchor=\"start\" x=\"2096.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = 1</text>\n</g>\n<!-- 28&#45;&gt;30 -->\n<g id=\"edge30\" class=\"edge\">\n<title>28&#45;&gt;30</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2044.53,-103.73C2055.6,-94.33 2067.36,-84.35 2078.39,-74.99\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"2080.91,-77.44 2086.27,-68.3 2076.38,-72.1 2080.91,-77.44\"/>\n</g>\n</g>\n</svg>\n",
      "text/plain": "<graphviz.sources.Source at 0x2d859423070>"
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dot_data = tree.export_graphviz(dt, out_file=None,\n",
    "                                feature_names=df_tree.drop('is_charged_off',axis=1).columns,\n",
    "                                class_names=df_tree['is_charged_off'].unique().astype(str),\n",
    "                                filled=True, rounded=True, special_characters=True)\n",
    "graph = graphviz.Source(dot_data)\n",
    "graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "    level_0  index                      Variable  Feature Importance Score\n0         0   25.0                  pmt_rate_60d                  0.868371\n1        61    NaN                  pmt_rate_60d                  0.868371\n2         1    6.0                       opp_epi                  0.079180\n3        42    NaN                       opp_epi                  0.079180\n4         2   29.0  rpmt_industry_Transportation                  0.017679\n..      ...    ...                           ...                       ...\n67       32    5.0              opp_years_in_biz                  0.000000\n68       33    3.0                opp_fico_score                  0.000000\n69       34    2.0            opp_percent_of_rev                  0.000000\n70       35   35.0          rpmt_product_Diamond                  0.000000\n71       71    NaN          rpmt_product_Diamond                  0.000000\n\n[72 rows x 4 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>level_0</th>\n      <th>index</th>\n      <th>Variable</th>\n      <th>Feature Importance Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>25.0</td>\n      <td>pmt_rate_60d</td>\n      <td>0.868371</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>61</td>\n      <td>NaN</td>\n      <td>pmt_rate_60d</td>\n      <td>0.868371</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>6.0</td>\n      <td>opp_epi</td>\n      <td>0.079180</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>42</td>\n      <td>NaN</td>\n      <td>opp_epi</td>\n      <td>0.079180</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>29.0</td>\n      <td>rpmt_industry_Transportation</td>\n      <td>0.017679</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>32</td>\n      <td>5.0</td>\n      <td>opp_years_in_biz</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>33</td>\n      <td>3.0</td>\n      <td>opp_fico_score</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>34</td>\n      <td>2.0</td>\n      <td>opp_percent_of_rev</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>35</td>\n      <td>35.0</td>\n      <td>rpmt_product_Diamond</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>71</td>\n      <td>NaN</td>\n      <td>rpmt_product_Diamond</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>72 rows Ã— 4 columns</p>\n</div>"
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i, column in enumerate(df_tree.drop('is_charged_off', axis=1)):\n",
    "    #print('Importance of feature {}:, {:.3f}'.format(column, dt.feature_importances_[i]))\n",
    "\n",
    "    fi = pd.DataFrame({'Variable': [column], 'Feature Importance Score': [dt.feature_importances_[i]]})\n",
    "\n",
    "    try:\n",
    "        final_fi = pd.concat([final_fi,fi], ignore_index = True)\n",
    "    except:\n",
    "        final_fi = fi\n",
    "# Ordering the data\n",
    "final_fi = final_fi.sort_values('Feature Importance Score', ascending = False).reset_index()\n",
    "final_fi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy is:  0.8496976677224302\n",
      "Testing Accuracy is:  0.8562176165803109\n"
     ]
    }
   ],
   "source": [
    "print(\"Training Accuracy is: \", dt.score(X_train, y_train))\n",
    "\n",
    "print(\"Testing Accuracy is: \", dt.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy is:  0.8496976677224302\n",
      "Testing Accuracy is:  0.8562176165803109\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 576x432 with 2 Axes>",
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = dt.predict(X_train)\n",
    "\n",
    "print(\"Training Accuracy is: \", dt.score(X_train, y_train))\n",
    "\n",
    "print(\"Testing Accuracy is: \", dt.score(X_test, y_test))\n",
    "\n",
    "cm = confusion_matrix(y_train, y_pred)\n",
    "cm_norm = cm/cm.sum(axis=1)[:, np.newaxis]\n",
    "plt.figure()\n",
    "\n",
    "cl.plot_confusion_matrix(cm_norm, classes=dt.classes_, title='Training confusion')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array([[4857,  323],\n       [ 721, 1045]], dtype=int64)"
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = dt.predict(X_train)\n",
    "y_pred\n",
    "confusion_matrix(y_train, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 5 candidates, totalling 25 fits\n",
      "[CV 1/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.25, max_depth=5, min_child_weight=5;, score=0.843 total time=   0.3s\n",
      "[CV 2/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.25, max_depth=5, min_child_weight=5;, score=0.837 total time=   0.4s\n",
      "[CV 3/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.25, max_depth=5, min_child_weight=5;, score=0.841 total time=   0.8s\n",
      "[CV 4/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.25, max_depth=5, min_child_weight=5;, score=0.838 total time=   0.4s\n",
      "[CV 5/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.25, max_depth=5, min_child_weight=5;, score=0.799 total time=   0.3s\n",
      "[CV 1/5] END colsample_bytree=0.7, gamma=0.0, learning_rate=0.1, max_depth=3, min_child_weight=7;, score=0.861 total time=   0.2s\n",
      "[CV 2/5] END colsample_bytree=0.7, gamma=0.0, learning_rate=0.1, max_depth=3, min_child_weight=7;, score=0.844 total time=   0.2s\n",
      "[CV 3/5] END colsample_bytree=0.7, gamma=0.0, learning_rate=0.1, max_depth=3, min_child_weight=7;, score=0.853 total time=   0.2s\n",
      "[CV 4/5] END colsample_bytree=0.7, gamma=0.0, learning_rate=0.1, max_depth=3, min_child_weight=7;, score=0.855 total time=   0.2s\n",
      "[CV 5/5] END colsample_bytree=0.7, gamma=0.0, learning_rate=0.1, max_depth=3, min_child_weight=7;, score=0.815 total time=   0.2s\n",
      "[CV 1/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.15, max_depth=10, min_child_weight=1;, score=0.834 total time=   0.9s\n",
      "[CV 2/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.15, max_depth=10, min_child_weight=1;, score=0.832 total time=   0.8s\n",
      "[CV 3/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.15, max_depth=10, min_child_weight=1;, score=0.837 total time=   1.4s\n",
      "[CV 4/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.15, max_depth=10, min_child_weight=1;, score=0.831 total time=   0.8s\n",
      "[CV 5/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.15, max_depth=10, min_child_weight=1;, score=0.805 total time=   1.5s\n",
      "[CV 1/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.3, max_depth=3, min_child_weight=5;, score=0.857 total time=   0.2s\n",
      "[CV 2/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.3, max_depth=3, min_child_weight=5;, score=0.841 total time=   0.2s\n",
      "[CV 3/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.3, max_depth=3, min_child_weight=5;, score=0.842 total time=   0.2s\n",
      "[CV 4/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.3, max_depth=3, min_child_weight=5;, score=0.853 total time=   0.2s\n",
      "[CV 5/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.3, max_depth=3, min_child_weight=5;, score=0.804 total time=   0.2s\n",
      "[CV 1/5] END colsample_bytree=0.5, gamma=0.0, learning_rate=0.1, max_depth=3, min_child_weight=7;, score=0.860 total time=   0.2s\n",
      "[CV 2/5] END colsample_bytree=0.5, gamma=0.0, learning_rate=0.1, max_depth=3, min_child_weight=7;, score=0.851 total time=   0.2s\n",
      "[CV 3/5] END colsample_bytree=0.5, gamma=0.0, learning_rate=0.1, max_depth=3, min_child_weight=7;, score=0.858 total time=   0.2s\n",
      "[CV 4/5] END colsample_bytree=0.5, gamma=0.0, learning_rate=0.1, max_depth=3, min_child_weight=7;, score=0.854 total time=   0.2s\n",
      "[CV 5/5] END colsample_bytree=0.5, gamma=0.0, learning_rate=0.1, max_depth=3, min_child_weight=7;, score=0.814 total time=   0.2s\n"
     ]
    },
    {
     "data": {
      "text/plain": "RandomizedSearchCV(cv=5, error_score='raise',\n                   estimator=XGBClassifier(base_score=None, booster=None,\n                                           callbacks=None,\n                                           colsample_bylevel=None,\n                                           colsample_bynode=None,\n                                           colsample_bytree=None,\n                                           early_stopping_rounds=None,\n                                           enable_categorical=False,\n                                           eval_metric=None, gamma=None,\n                                           gpu_id=None, grow_policy=None,\n                                           importance_type=None,\n                                           interaction_constraints=None,\n                                           learning_rat...\n                                           n_estimators=100, n_jobs=None,\n                                           num_parallel_tree=None,\n                                           predictor=None, random_state=None,\n                                           reg_alpha=None, reg_lambda=None, ...),\n                   n_iter=5,\n                   param_distributions={'colsample_bytree': [0.3, 0.4, 0.5,\n                                                             0.7],\n                                        'gamma': [0.0, 0.1, 0.2, 0.3, 0.4],\n                                        'learning_rate': [0.05, 0.1, 0.15, 0.2,\n                                                          0.25, 0.3],\n                                        'max_depth': [3, 4, 5, 6, 8, 10, 12,\n                                                      15],\n                                        'min_child_weight': [1, 3, 5, 7]},\n                   scoring='roc_auc', verbose=3)",
      "text/html": "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, error_score=&#x27;raise&#x27;,\n                   estimator=XGBClassifier(base_score=None, booster=None,\n                                           callbacks=None,\n                                           colsample_bylevel=None,\n                                           colsample_bynode=None,\n                                           colsample_bytree=None,\n                                           early_stopping_rounds=None,\n                                           enable_categorical=False,\n                                           eval_metric=None, gamma=None,\n                                           gpu_id=None, grow_policy=None,\n                                           importance_type=None,\n                                           interaction_constraints=None,\n                                           learning_rat...\n                                           n_estimators=100, n_jobs=None,\n                                           num_parallel_tree=None,\n                                           predictor=None, random_state=None,\n                                           reg_alpha=None, reg_lambda=None, ...),\n                   n_iter=5,\n                   param_distributions={&#x27;colsample_bytree&#x27;: [0.3, 0.4, 0.5,\n                                                             0.7],\n                                        &#x27;gamma&#x27;: [0.0, 0.1, 0.2, 0.3, 0.4],\n                                        &#x27;learning_rate&#x27;: [0.05, 0.1, 0.15, 0.2,\n                                                          0.25, 0.3],\n                                        &#x27;max_depth&#x27;: [3, 4, 5, 6, 8, 10, 12,\n                                                      15],\n                                        &#x27;min_child_weight&#x27;: [1, 3, 5, 7]},\n                   scoring=&#x27;roc_auc&#x27;, verbose=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, error_score=&#x27;raise&#x27;,\n                   estimator=XGBClassifier(base_score=None, booster=None,\n                                           callbacks=None,\n                                           colsample_bylevel=None,\n                                           colsample_bynode=None,\n                                           colsample_bytree=None,\n                                           early_stopping_rounds=None,\n                                           enable_categorical=False,\n                                           eval_metric=None, gamma=None,\n                                           gpu_id=None, grow_policy=None,\n                                           importance_type=None,\n                                           interaction_constraints=None,\n                                           learning_rat...\n                                           n_estimators=100, n_jobs=None,\n                                           num_parallel_tree=None,\n                                           predictor=None, random_state=None,\n                                           reg_alpha=None, reg_lambda=None, ...),\n                   n_iter=5,\n                   param_distributions={&#x27;colsample_bytree&#x27;: [0.3, 0.4, 0.5,\n                                                             0.7],\n                                        &#x27;gamma&#x27;: [0.0, 0.1, 0.2, 0.3, 0.4],\n                                        &#x27;learning_rate&#x27;: [0.05, 0.1, 0.15, 0.2,\n                                                          0.25, 0.3],\n                                        &#x27;max_depth&#x27;: [3, 4, 5, 6, 8, 10, 12,\n                                                      15],\n                                        &#x27;min_child_weight&#x27;: [1, 3, 5, 7]},\n                   scoring=&#x27;roc_auc&#x27;, verbose=3)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, gamma=None,\n              gpu_id=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, n_estimators=100, n_jobs=None,\n              num_parallel_tree=None, predictor=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, ...)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, gamma=None,\n              gpu_id=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, n_estimators=100, n_jobs=None,\n              num_parallel_tree=None, predictor=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, ...)</pre></div></div></div></div></div></div></div></div></div></div>"
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "import xgboost\n",
    "\n",
    "classifier=xgboost.XGBClassifier(tree_method='auto')\n",
    "\n",
    "params={\n",
    "    \"learning_rate\":[0.05,0.10,0.15,0.20,0.25,0.30],\n",
    "    \"max_depth\":[3, 4, 5, 6, 8, 10, 12, 15],\n",
    "    \"min_child_weight\":[1,3,5,7],\n",
    "    \"gamma\":[0.0, 0.1, 0.2 , 0.3, 0.4],\n",
    "    \"colsample_bytree\":[0.3,0.4,0.5,0.7]\n",
    "}\n",
    "\n",
    "clf =RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',cv=5,verbose=3, error_score='raise')\n",
    "\n",
    "clf.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "{'min_child_weight': 7,\n 'max_depth': 3,\n 'learning_rate': 0.1,\n 'gamma': 0.0,\n 'colsample_bytree': 0.5}"
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0.0, gpu_id=-1, grow_policy='depthwise',\n              importance_type=None, interaction_constraints='',\n              learning_rate=0.1, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=3, max_leaves=0, min_child_weight=7,\n              missing=nan, monotone_constraints='()', n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)",
      "text/html": "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0.0, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.1, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=3, max_leaves=0, min_child_weight=7,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0.0, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.1, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=3, max_leaves=0, min_child_weight=7,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre></div></div></div></div></div>"
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "{'objective': 'binary:logistic',\n 'use_label_encoder': False,\n 'base_score': 0.5,\n 'booster': 'gbtree',\n 'callbacks': None,\n 'colsample_bylevel': 1,\n 'colsample_bynode': 1,\n 'colsample_bytree': 0.5,\n 'early_stopping_rounds': None,\n 'enable_categorical': False,\n 'eval_metric': None,\n 'gamma': 0.0,\n 'gpu_id': -1,\n 'grow_policy': 'depthwise',\n 'importance_type': None,\n 'interaction_constraints': '',\n 'learning_rate': 0.1,\n 'max_bin': 256,\n 'max_cat_to_onehot': 4,\n 'max_delta_step': 0,\n 'max_depth': 3,\n 'max_leaves': 0,\n 'min_child_weight': 7,\n 'missing': nan,\n 'monotone_constraints': '()',\n 'n_estimators': 100,\n 'n_jobs': 0,\n 'num_parallel_tree': 1,\n 'predictor': 'auto',\n 'random_state': 0,\n 'reg_alpha': 0,\n 'reg_lambda': 1,\n 'sampling_method': 'uniform',\n 'scale_pos_weight': 1,\n 'subsample': 1,\n 'tree_method': 'auto',\n 'validate_parameters': 1,\n 'verbosity': None}"
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.best_estimator_.get_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 576x432 with 2 Axes>",
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "final_model = xgboost.XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n",
    "              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.4,\n",
    "              early_stopping_rounds=None, enable_categorical=False,\n",
    "              eval_metric=None, gamma=0.3, gpu_id=-1, grow_policy='depthwise',\n",
    "              importance_type=None, interaction_constraints='',\n",
    "              learning_rate=0.15, max_bin=256, max_cat_to_onehot=4,\n",
    "              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=3,\n",
    "              missing=nan, monotone_constraints='()', n_estimators=100,\n",
    "              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n",
    "              reg_alpha=0, reg_lambda=1,\n",
    "              sampling_method= 'uniform', scale_pos_weight = 1, subsample = 1,\n",
    "              tree_method = 'auto', validate_parameters= 1, verbosity= None)\n",
    "\n",
    "final_model.fit(X,y)\n",
    "\n",
    "pred_xgboost = final_model.predict(X)\n",
    "\n",
    "cm = confusion_matrix(y, pred_xgboost)\n",
    "cm_norm = cm/cm.sum(axis=1)[:, np.newaxis]\n",
    "plt.figure()\n",
    "cl.plot_confusion_matrix(cm_norm, classes=clf.classes_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy is:  0.9176504463000288\n",
      "Testing Accuracy is:  0.9339378238341969\n"
     ]
    }
   ],
   "source": [
    "print(\"Training Accuracy is: \", final_model.score(X_train, y_train))\n",
    "\n",
    "print(\"Testing Accuracy is: \", final_model.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array([[582,   3],\n       [ 48, 139]], dtype=int64)"
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = final_model.predict(X_test)\n",
    "y_pred\n",
    "confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Grouping by Terms"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "outputs": [
    {
     "data": {
      "text/plain": "array([ 2.75,  2.8 ,  3.  ,  3.2 ,  3.25,  3.4 ,  3.5 ,  3.6 ,  3.68,\n        3.7 ,  3.75,  3.8 ,  4.  ,  4.25,  4.3 ,  4.35,  4.42,  4.45,\n        4.5 ,  4.6 ,  4.75,  4.8 ,  5.  ,  5.25,  5.3 ,  5.35,  5.4 ,\n        5.5 ,  5.6 ,  5.75,  6.  ,  6.1 ,  6.15,  6.25,  6.3 ,  6.4 ,\n        6.5 ,  6.75,  6.85,  7.  ,  7.1 ,  7.2 ,  7.25,  7.5 ,  7.55,\n        7.6 ,  7.75,  7.8 ,  7.85,  8.  ,  8.1 ,  8.25,  8.3 ,  8.5 ,\n        8.55,  8.6 ,  8.75,  8.78,  8.85,  9.  ,  9.1 ,  9.25,  9.5 ,\n        9.75,  9.8 , 10.  , 10.1 , 10.25, 10.4 , 10.5 , 10.6 , 10.7 ,\n       10.75, 11.  , 11.1 , 11.15, 11.25, 11.3 , 11.4 , 11.5 , 11.55,\n       11.65, 11.75, 12.  , 12.1 , 12.25, 12.5 , 13.  , 13.1 , 13.25,\n       13.5 , 13.75, 14.  , 14.05, 14.5 , 15.  ])"
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_groups = df.loc[df['rpmt_advance_date'].between('2021-01-01', '2022-04-30')]\n",
    "unique_terms = np.unique(df_groups['opp_term'])\n",
    "unique_terms"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "outputs": [
    {
     "data": {
      "text/plain": "count    8605.000000\nmean        7.054007\nstd         2.266145\nmin         2.750000\n25%         5.250000\n50%         6.750000\n75%         8.500000\nmax        15.000000\nName: opp_term, dtype: float64"
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_groups['opp_term'].describe()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "outputs": [],
   "source": [
    "df_groups['group_terms'] = 0\n",
    "df_groups['group_terms'][df_groups['opp_term'] <= 7] = 1\n",
    "df_groups['group_terms'][df_groups['opp_term'] > 7] = 2\n",
    "df_groups['group_terms'][df_groups['opp_term'] > 12] = 3"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Building model for group 1"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "outputs": [],
   "source": [
    "df_groups_modeling = df_groups[df_groups['is_active'] == 0]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "outputs": [
    {
     "data": {
      "text/plain": "(7808, 41)"
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_groups_modeling.shape"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "outputs": [
    {
     "data": {
      "text/plain": "rpmt_id                  0\nis_active                0\nis_charged_off           0\nopp_term                 0\nopp_factor               0\nopp_percent_of_rev       0\nopp_fico_score           0\nrpmt_advance_date        0\nrpmt_funding_date        0\nrpmt_funded_amt          0\nrpmt_industry            0\nrpmt_product             0\nopp_years_in_biz         1\nrpmt_ed                  0\nrpmt_fmpr                0\nopp_epi                  0\nm1_deposits              0\nm1_no_of_deposits        0\nm1_adbs                  0\nm1_neg_days              1\nm1_nsfs                  0\nm2_deposits              0\nm2_no_of_deposits        0\nm2_adbs                  0\nm2_neg_days              0\nm2_nsfs                  0\nm3_deposits              0\nm3_no_of_deposits        0\nm3_adbs                  0\nm3_neg_days              0\nm3_nsfs                  2\nopp_adbs_div_rev         0\nopp_last_mo_rev_trend    0\nopp_rev_vol              0\npmt_rate_30d             0\npmt_rate_60d             0\npmt_rate_90d             0\nhit_30_day_mark          0\nhit_60_day_mark          0\nhit_90_day_mark          0\ngroup_terms              0\ndtype: int64"
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_groups_modeling.isnull().sum()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "outputs": [],
   "source": [
    "df_groups_modeling = df_groups_modeling.dropna(subset=['opp_rev_vol', 'pmt_rate_90d'])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "outputs": [],
   "source": [
    "df_groups_modeling.fillna(0, inplace=True)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "outputs": [
    {
     "data": {
      "text/plain": "rpmt_id                  0\nis_active                0\nis_charged_off           0\nopp_term                 0\nopp_factor               0\nopp_percent_of_rev       0\nopp_fico_score           0\nrpmt_advance_date        0\nrpmt_funding_date        0\nrpmt_funded_amt          0\nrpmt_industry            0\nrpmt_product             0\nopp_years_in_biz         0\nrpmt_ed                  0\nrpmt_fmpr                0\nopp_epi                  0\nm1_deposits              0\nm1_no_of_deposits        0\nm1_adbs                  0\nm1_neg_days              0\nm1_nsfs                  0\nm2_deposits              0\nm2_no_of_deposits        0\nm2_adbs                  0\nm2_neg_days              0\nm2_nsfs                  0\nm3_deposits              0\nm3_no_of_deposits        0\nm3_adbs                  0\nm3_neg_days              0\nm3_nsfs                  0\nopp_adbs_div_rev         0\nopp_last_mo_rev_trend    0\nopp_rev_vol              0\npmt_rate_30d             0\npmt_rate_60d             0\npmt_rate_90d             0\nhit_30_day_mark          0\nhit_60_day_mark          0\nhit_90_day_mark          0\ngroup_terms              0\ndtype: int64"
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_groups_modeling.isnull().sum()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "outputs": [
    {
     "data": {
      "text/plain": "(7723, 41)"
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_groups_modeling.shape"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "outputs": [],
   "source": [
    "df_group_1 = df_groups_modeling[df_groups_modeling['group_terms'] == 1]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "outputs": [],
   "source": [
    "df_group_1.drop(['rpmt_id','rpmt_advance_date','rpmt_funding_date', 'pmt_rate_60d', 'pmt_rate_90d','rpmt_ed','rpmt_fmpr','hit_30_day_mark','hit_60_day_mark','hit_90_day_mark'], axis=1, inplace=True)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "outputs": [],
   "source": [
    "df_group_1 = pd.get_dummies(df_group_1, columns=['rpmt_industry', 'rpmt_product'])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "outputs": [
    {
     "data": {
      "text/plain": "(4571, 35)"
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_group_1.shape"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X1 shape: (7718, 36)\n",
      "y1 shape: (7718,)\n"
     ]
    }
   ],
   "source": [
    "X1= df_group_1.drop('is_charged_off',axis=1)\n",
    "y1= df_group_1['is_charged_off']\n",
    "print(f'X1 shape: {np.shape(X)}')\n",
    "print(f'y1 shape: {np.shape(y)}')\n",
    "X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, train_size=0.8, test_size=0.2, random_state=0)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "outputs": [
    {
     "data": {
      "text/plain": "DecisionTreeClassifier(criterion='entropy', random_state=1)",
      "text/html": "<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" checked><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, random_state=1)</pre></div></div></div></div></div>"
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt_g1 = DecisionTreeClassifier(criterion='entropy', random_state=1)\n",
    "dt_g1.fit(X1_train, y1_train)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy is:  1.0\n",
      "Testing Accuracy is:  0.6983606557377049\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 576x432 with 2 Axes>",
      "image/png": "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Dk2cONHngQEAKhenArw6/M1jQj179qxiY2MlScHBwRo2bJhOnTrl88AAAJVLgdO7w988JtT8/HylpqYWttPS0lSKD9QAAHBNChTg1eFvHt9DHTZsmPr166cuXS5v/5ecnKxnn33W54EBAGAlHhPqgAED1Lp1a23fvl2BgYFq2LChFi1apD59+pRHfACASsIM86DeKNXm+DfccIOys7O1dOlSZWRkaMiQIb6OCwBQyZhhpa43rppQDx06pPfee0+JiYmqX7++srKytHnzZtWsWbO84gMAVBJWr1BLXJQUFxenRx55REFBQVq0aJHWr1+v6tWrk0wBAChGiRXqvn371LJlS91000363e9+J+ny12YAAPAFqw/5llihfv755+rfv7/Wr1+vu+66S2PGjFF2dnZ5xgYAqEQq7E5JVatWVa9evbR48WKtWrVKNptNWVlZeuCBB7Rs2bLyjBEAUAlU+J2SJKlp06aaMmWKvvrqKz322GNauXKlr+MCAFQyBQHeHf5WqoT6q9DQUA0cOFBr1qzxVTwAAFhSqd5DBQDA18ywfaA3SKgAAFOw+i7xJFQAgCmYYaWuN0ioAABTKLD4XgfXtCgJAAAUjwoVAGAKzKECAGAA5lABADCAGTZn8AZzqACASicxMVFRUVHq3r27lixZUuJ1n3/+ue67775S9UmFCgAwhfLa2CE1NVVz5szR6tWrFRQUpEGDBqljx45q2rSpy3VpaWmaNWtWqfulQgUAmILTy6O0tm3bpk6dOikiIkJhYWHq0aOHkpKS3K6bMmWKRo0aVep+qVABAKbg7Rxqenq60tPT3c6Hh4crPDy8sO1wOBQZGVnYttls2rVrl8s9ixYtUsuWLXXLLbeU+vkkVACAKXi7yjc+Pl4LFixwOz9q1CiNHj26sO10utezAVdsKvGf//xHGzZs0HvvvaeTJ0+W+vkkVABAhTB06FDFxMS4nb+yOpUku92uHTt2FLYdDodsNlthOykpSadOnVL//v2Vm5srh8Ohhx56SEuXLr3q80moAABT8HZjh6JDuyXp3Lmz5s+frzNnzig0NFQbNmzQtGnTCn8fM2aMxowZI0k6duyYYmNjPSZTiUVJAACTKK8PjNvtdo0bN06xsbHq16+fevfurbZt2youLk67d+8uc/wBzuIGk02malB9f4cAeC3zxFf+DgEwRLXrm/ik33cb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3bu9fg6A8kdCBa7CbrerUaNG2rp1q15++WVlZmaqRo0aWrx4sT744AMtW7ZMBQUFioiI0NSpU/X73/9eqampmjBhghwOh+rVq6fTp08X9tesWTMlJyfruuuu0zvvvKM1a9aoatWqatSokV599VVNnDhRWVlZio6O1urVq3X48GHNmDFD586dU35+voYMGaIBAwZIkubNm6fExERFRESoUaNG/vojAvB/SKjAVXz77bc6evSosrKylJKSos2bN6tGjRr65ptvlJCQoCVLlig0NFRbtmzR6NGj9fHHH+vll1/WLbfcorFjx+rIkSPq16+fW7+bNm3S6tWrtXLlStWqVUszZ87U+++/r5kzZ6pPnz5au3at8vLyNGbMGM2ePVutWrXShQsXNHDgQDVt2lRpaWnasGGDEhISFBISor/85S/l/4cDwAUJFbjCr9WhJOXn56t27dp67bXXdPr0aTVr1kw1atSQJH3++ec6cuSIBg0aVHjv+fPnde7cOW3btk3PPfecJKlRo0bq2LGj23OSk5PVs2dP1apVS5I0ceJESZfncX91+PBhHT16VJMmTXKJb+/evTp48KC6d+9eGE///v21ePFiI/8oAFwjEipwhaJzqL9avXq1wsLCCtsFBQWKjo7W+PHjC9sOh0O1atVSQECAy6fxqlZ1/59ZYGCgy6fy0tPT3RYr5efnKzw83CWetLQ01axZU6+99prLMwIDA8vw7xaAkVjlC5TBnXfeqY8++kgOh0OStGzZMg0dOlSS1KVLF61YsUKSdOLECX399ddu93fu3FmfffaZLl68KEmaP3++3nvvPVWtWlX5+flyOp1q3LixgoODCxPqL7/8ot69e2vPnj3q0qWLkpKSlJ6eroKCAo+LnQD4HhUqUAZdunRRXFycHn30UQUEBKhGjRpasGCBAgIC9MILL2jixInq1auX6tatW+zq4K5duyolJUWDBw+WJDVt2lTTpk1TaGioWrZsqV69emnZsmV6++23NWPGDP3P//yP8vLy9NRTT6lDhw6SpB9//FH9+/dXeHi4mjdvrrNnz5brnwEAV3xtBgAAAzDkCwCAAUioAAAYgIQKAIABSKgAABiAhAoAgAFIqAAAGICECgCAAUioAAAY4P8DTRCB2PdH1YoAAAAASUVORK5CYII=\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y1_pred = dt_g1.predict(X1_train)\n",
    "\n",
    "print(\"Training Accuracy is: \", dt_g1.score(X1_train, y1_train))\n",
    "\n",
    "print(\"Testing Accuracy is: \", dt_g1.score(X1_test, y1_test))\n",
    "\n",
    "cm = confusion_matrix(y1_train, y1_pred)\n",
    "cm_norm = cm/cm.sum(axis=1)[:, np.newaxis]\n",
    "plt.figure()\n",
    "\n",
    "cl.plot_confusion_matrix(cm_norm, classes=dt_g1.classes_, title='Training confusion')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 5 candidates, totalling 25 fits\n",
      "[CV 1/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.05, max_depth=5, min_child_weight=7;, score=0.801 total time=   0.1s\n",
      "[CV 2/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.05, max_depth=5, min_child_weight=7;, score=0.769 total time=   0.2s\n",
      "[CV 3/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.05, max_depth=5, min_child_weight=7;, score=0.756 total time=   0.2s\n",
      "[CV 4/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.05, max_depth=5, min_child_weight=7;, score=0.765 total time=   0.1s\n",
      "[CV 5/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.05, max_depth=5, min_child_weight=7;, score=0.736 total time=   0.2s\n",
      "[CV 1/5] END colsample_bytree=0.5, gamma=0.3, learning_rate=0.15, max_depth=10, min_child_weight=5;, score=0.776 total time=   0.3s\n",
      "[CV 2/5] END colsample_bytree=0.5, gamma=0.3, learning_rate=0.15, max_depth=10, min_child_weight=5;, score=0.758 total time=   0.4s\n",
      "[CV 3/5] END colsample_bytree=0.5, gamma=0.3, learning_rate=0.15, max_depth=10, min_child_weight=5;, score=0.748 total time=   0.8s\n",
      "[CV 4/5] END colsample_bytree=0.5, gamma=0.3, learning_rate=0.15, max_depth=10, min_child_weight=5;, score=0.760 total time=   0.3s\n",
      "[CV 5/5] END colsample_bytree=0.5, gamma=0.3, learning_rate=0.15, max_depth=10, min_child_weight=5;, score=0.726 total time=   0.3s\n",
      "[CV 1/5] END colsample_bytree=0.5, gamma=0.4, learning_rate=0.1, max_depth=3, min_child_weight=5;, score=0.792 total time=   0.1s\n",
      "[CV 2/5] END colsample_bytree=0.5, gamma=0.4, learning_rate=0.1, max_depth=3, min_child_weight=5;, score=0.767 total time=   0.1s\n",
      "[CV 3/5] END colsample_bytree=0.5, gamma=0.4, learning_rate=0.1, max_depth=3, min_child_weight=5;, score=0.752 total time=   0.0s\n",
      "[CV 4/5] END colsample_bytree=0.5, gamma=0.4, learning_rate=0.1, max_depth=3, min_child_weight=5;, score=0.761 total time=   0.1s\n",
      "[CV 5/5] END colsample_bytree=0.5, gamma=0.4, learning_rate=0.1, max_depth=3, min_child_weight=5;, score=0.744 total time=   0.1s\n",
      "[CV 1/5] END colsample_bytree=0.5, gamma=0.0, learning_rate=0.05, max_depth=12, min_child_weight=5;, score=0.799 total time=   0.3s\n",
      "[CV 2/5] END colsample_bytree=0.5, gamma=0.0, learning_rate=0.05, max_depth=12, min_child_weight=5;, score=0.768 total time=   0.3s\n",
      "[CV 3/5] END colsample_bytree=0.5, gamma=0.0, learning_rate=0.05, max_depth=12, min_child_weight=5;, score=0.764 total time=   0.3s\n",
      "[CV 4/5] END colsample_bytree=0.5, gamma=0.0, learning_rate=0.05, max_depth=12, min_child_weight=5;, score=0.758 total time=   0.4s\n",
      "[CV 5/5] END colsample_bytree=0.5, gamma=0.0, learning_rate=0.05, max_depth=12, min_child_weight=5;, score=0.743 total time=   0.3s\n",
      "[CV 1/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.2, max_depth=10, min_child_weight=3;, score=0.781 total time=   0.2s\n",
      "[CV 2/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.2, max_depth=10, min_child_weight=3;, score=0.743 total time=   0.2s\n",
      "[CV 3/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.2, max_depth=10, min_child_weight=3;, score=0.741 total time=   0.2s\n",
      "[CV 4/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.2, max_depth=10, min_child_weight=3;, score=0.745 total time=   0.3s\n",
      "[CV 5/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.2, max_depth=10, min_child_weight=3;, score=0.726 total time=   0.6s\n"
     ]
    },
    {
     "data": {
      "text/plain": "RandomizedSearchCV(cv=5, error_score='raise',\n                   estimator=XGBClassifier(base_score=None, booster=None,\n                                           callbacks=None,\n                                           colsample_bylevel=None,\n                                           colsample_bynode=None,\n                                           colsample_bytree=None,\n                                           early_stopping_rounds=None,\n                                           enable_categorical=False,\n                                           eval_metric=None, gamma=None,\n                                           gpu_id=None, grow_policy=None,\n                                           importance_type=None,\n                                           interaction_constraints=None,\n                                           learning_rat...\n                                           n_estimators=100, n_jobs=None,\n                                           num_parallel_tree=None,\n                                           predictor=None, random_state=None,\n                                           reg_alpha=None, reg_lambda=None, ...),\n                   n_iter=5,\n                   param_distributions={'colsample_bytree': [0.3, 0.4, 0.5,\n                                                             0.7],\n                                        'gamma': [0.0, 0.1, 0.2, 0.3, 0.4],\n                                        'learning_rate': [0.05, 0.1, 0.15, 0.2,\n                                                          0.25, 0.3],\n                                        'max_depth': [3, 4, 5, 6, 8, 10, 12,\n                                                      15],\n                                        'min_child_weight': [1, 3, 5, 7]},\n                   scoring='roc_auc', verbose=3)",
      "text/html": "<style>#sk-container-id-10 {color: black;background-color: white;}#sk-container-id-10 pre{padding: 0;}#sk-container-id-10 div.sk-toggleable {background-color: white;}#sk-container-id-10 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-10 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-10 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-10 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-10 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-10 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-10 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-10 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-10 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-10 div.sk-item {position: relative;z-index: 1;}#sk-container-id-10 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-10 div.sk-item::before, #sk-container-id-10 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-10 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-10 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-10 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-10 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-10 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-10 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-10 div.sk-label-container {text-align: center;}#sk-container-id-10 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-10 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, error_score=&#x27;raise&#x27;,\n                   estimator=XGBClassifier(base_score=None, booster=None,\n                                           callbacks=None,\n                                           colsample_bylevel=None,\n                                           colsample_bynode=None,\n                                           colsample_bytree=None,\n                                           early_stopping_rounds=None,\n                                           enable_categorical=False,\n                                           eval_metric=None, gamma=None,\n                                           gpu_id=None, grow_policy=None,\n                                           importance_type=None,\n                                           interaction_constraints=None,\n                                           learning_rat...\n                                           n_estimators=100, n_jobs=None,\n                                           num_parallel_tree=None,\n                                           predictor=None, random_state=None,\n                                           reg_alpha=None, reg_lambda=None, ...),\n                   n_iter=5,\n                   param_distributions={&#x27;colsample_bytree&#x27;: [0.3, 0.4, 0.5,\n                                                             0.7],\n                                        &#x27;gamma&#x27;: [0.0, 0.1, 0.2, 0.3, 0.4],\n                                        &#x27;learning_rate&#x27;: [0.05, 0.1, 0.15, 0.2,\n                                                          0.25, 0.3],\n                                        &#x27;max_depth&#x27;: [3, 4, 5, 6, 8, 10, 12,\n                                                      15],\n                                        &#x27;min_child_weight&#x27;: [1, 3, 5, 7]},\n                   scoring=&#x27;roc_auc&#x27;, verbose=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, error_score=&#x27;raise&#x27;,\n                   estimator=XGBClassifier(base_score=None, booster=None,\n                                           callbacks=None,\n                                           colsample_bylevel=None,\n                                           colsample_bynode=None,\n                                           colsample_bytree=None,\n                                           early_stopping_rounds=None,\n                                           enable_categorical=False,\n                                           eval_metric=None, gamma=None,\n                                           gpu_id=None, grow_policy=None,\n                                           importance_type=None,\n                                           interaction_constraints=None,\n                                           learning_rat...\n                                           n_estimators=100, n_jobs=None,\n                                           num_parallel_tree=None,\n                                           predictor=None, random_state=None,\n                                           reg_alpha=None, reg_lambda=None, ...),\n                   n_iter=5,\n                   param_distributions={&#x27;colsample_bytree&#x27;: [0.3, 0.4, 0.5,\n                                                             0.7],\n                                        &#x27;gamma&#x27;: [0.0, 0.1, 0.2, 0.3, 0.4],\n                                        &#x27;learning_rate&#x27;: [0.05, 0.1, 0.15, 0.2,\n                                                          0.25, 0.3],\n                                        &#x27;max_depth&#x27;: [3, 4, 5, 6, 8, 10, 12,\n                                                      15],\n                                        &#x27;min_child_weight&#x27;: [1, 3, 5, 7]},\n                   scoring=&#x27;roc_auc&#x27;, verbose=3)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, gamma=None,\n              gpu_id=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, n_estimators=100, n_jobs=None,\n              num_parallel_tree=None, predictor=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, ...)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, gamma=None,\n              gpu_id=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, n_estimators=100, n_jobs=None,\n              num_parallel_tree=None, predictor=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, ...)</pre></div></div></div></div></div></div></div></div></div></div>"
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "import xgboost\n",
    "\n",
    "classifier=xgboost.XGBClassifier(tree_method='auto')\n",
    "\n",
    "params={\n",
    "    \"learning_rate\":[0.05,0.10,0.15,0.20,0.25,0.30],\n",
    "    \"max_depth\":[3, 4, 5, 6, 8, 10, 12, 15],\n",
    "    \"min_child_weight\":[1,3,5,7],\n",
    "    \"gamma\":[0.0, 0.1, 0.2 , 0.3, 0.4],\n",
    "    \"colsample_bytree\":[0.3,0.4,0.5,0.7]\n",
    "}\n",
    "\n",
    "clf1 =RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',cv=5,verbose=3, error_score='raise')\n",
    "\n",
    "clf1.fit(X1,y1)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "outputs": [
    {
     "data": {
      "text/plain": "{'min_child_weight': 5,\n 'max_depth': 12,\n 'learning_rate': 0.05,\n 'gamma': 0.0,\n 'colsample_bytree': 0.5}"
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf1.best_params_"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "outputs": [
    {
     "data": {
      "text/plain": "XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0.0, gpu_id=-1, grow_policy='depthwise',\n              importance_type=None, interaction_constraints='',\n              learning_rate=0.05, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=12, max_leaves=0, min_child_weight=5,\n              missing=nan, monotone_constraints='()', n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)",
      "text/html": "<style>#sk-container-id-11 {color: black;background-color: white;}#sk-container-id-11 pre{padding: 0;}#sk-container-id-11 div.sk-toggleable {background-color: white;}#sk-container-id-11 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-11 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-11 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-11 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-11 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-11 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-11 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-11 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-11 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-11 div.sk-item {position: relative;z-index: 1;}#sk-container-id-11 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-11 div.sk-item::before, #sk-container-id-11 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-11 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-11 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-11 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-11 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-11 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-11 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-11 div.sk-label-container {text-align: center;}#sk-container-id-11 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-11 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0.0, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.05, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=12, max_leaves=0, min_child_weight=5,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" checked><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0.0, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.05, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=12, max_leaves=0, min_child_weight=5,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre></div></div></div></div></div>"
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf1.best_estimator_"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 576x432 with 2 Axes>",
      "image/png": "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\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xg1_model = xgboost.XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n",
    "              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5,\n",
    "              early_stopping_rounds=None, enable_categorical=False,\n",
    "              eval_metric=None, gamma=0.0, gpu_id=-1, grow_policy='depthwise',\n",
    "              importance_type=None, interaction_constraints='',\n",
    "              learning_rate=0.05, max_bin=256, max_cat_to_onehot=4,\n",
    "              max_delta_step=0, max_depth=12, max_leaves=0, min_child_weight=5,\n",
    "              missing=nan, monotone_constraints='()', n_estimators=100,\n",
    "              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n",
    "              reg_alpha=0, reg_lambda=1,\n",
    "              sampling_method= 'uniform', scale_pos_weight = 1, subsample = 1,\n",
    "              tree_method = 'auto', validate_parameters= 1, verbosity= None)\n",
    "\n",
    "xg1_model.fit(X1,y1)\n",
    "\n",
    "pred_xgboost1 = xg1_model.predict(X1)\n",
    "\n",
    "cm = confusion_matrix(y1, pred_xgboost1)\n",
    "cm_norm = cm/cm.sum(axis=1)[:, np.newaxis]\n",
    "plt.figure()\n",
    "cl.plot_confusion_matrix(cm_norm, classes=clf1.classes_)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Building model for group 2"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "outputs": [],
   "source": [
    "df_group_2 = df_groups_modeling[df_groups_modeling['group_terms'] == 2]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "outputs": [],
   "source": [
    "df_group_2.drop(['rpmt_id','rpmt_advance_date','rpmt_funding_date', 'pmt_rate_30d', 'pmt_rate_90d','rpmt_ed','rpmt_fmpr','hit_30_day_mark','hit_60_day_mark','hit_90_day_mark'], axis=1, inplace=True)\n",
    "df_group_2 = pd.get_dummies(df_group_2, columns=['rpmt_industry', 'rpmt_product'])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X2 shape: (3086, 35)\n",
      "y2 shape: (3086,)\n"
     ]
    }
   ],
   "source": [
    "X2= df_group_2.drop('is_charged_off',axis=1)\n",
    "y2= df_group_2['is_charged_off']\n",
    "print(f'X2 shape: {np.shape(X2)}')\n",
    "print(f'y2 shape: {np.shape(y2)}')\n",
    "X2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, train_size=0.9, test_size=0.1, random_state=0)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "outputs": [
    {
     "data": {
      "text/plain": "DecisionTreeClassifier(criterion='entropy', max_depth=6, random_state=1)",
      "text/html": "<style>#sk-container-id-33 {color: black;background-color: white;}#sk-container-id-33 pre{padding: 0;}#sk-container-id-33 div.sk-toggleable {background-color: white;}#sk-container-id-33 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-33 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-33 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-33 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-33 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-33 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-33 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-33 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-33 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-33 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-33 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-33 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-33 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-33 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-33 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-33 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-33 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-33 div.sk-item {position: relative;z-index: 1;}#sk-container-id-33 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-33 div.sk-item::before, #sk-container-id-33 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-33 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-33 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-33 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-33 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-33 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-33 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-33 div.sk-label-container {text-align: center;}#sk-container-id-33 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-33 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-33\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=6, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-55\" type=\"checkbox\" checked><label for=\"sk-estimator-id-55\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=6, random_state=1)</pre></div></div></div></div></div>"
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt_g2 = DecisionTreeClassifier(criterion='entropy', max_depth=6, random_state=1)\n",
    "dt_g2.fit(X2_train, y2_train)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy is:  0.8743248109470652\n",
      "Testing Accuracy is:  0.8252427184466019\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 576x432 with 2 Axes>",
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y2_pred = dt_g2.predict(X2_train)\n",
    "\n",
    "print(\"Training Accuracy is: \", dt_g2.score(X2_train, y2_train))\n",
    "\n",
    "print(\"Testing Accuracy is: \", dt_g2.score(X2_test, y2_test))\n",
    "\n",
    "cm = confusion_matrix(y2_train, y2_pred)\n",
    "cm_norm = cm/cm.sum(axis=1)[:, np.newaxis]\n",
    "plt.figure()\n",
    "\n",
    "cl.plot_confusion_matrix(cm_norm, classes=dt_g1.classes_, title='Training confusion')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 5 candidates, totalling 25 fits\n",
      "[CV 1/5] END colsample_bytree=0.4, gamma=0.5, learning_rate=0.1, max_depth=4, min_child_weight=3;, score=0.809 total time=   0.1s\n",
      "[CV 2/5] END colsample_bytree=0.4, gamma=0.5, learning_rate=0.1, max_depth=4, min_child_weight=3;, score=0.811 total time=   0.1s\n",
      "[CV 3/5] END colsample_bytree=0.4, gamma=0.5, learning_rate=0.1, max_depth=4, min_child_weight=3;, score=0.809 total time=   0.1s\n",
      "[CV 4/5] END colsample_bytree=0.4, gamma=0.5, learning_rate=0.1, max_depth=4, min_child_weight=3;, score=0.791 total time=   0.1s\n",
      "[CV 5/5] END colsample_bytree=0.4, gamma=0.5, learning_rate=0.1, max_depth=4, min_child_weight=3;, score=0.767 total time=   0.1s\n",
      "[CV 1/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.25, max_depth=12, min_child_weight=3;, score=0.774 total time=   0.7s\n",
      "[CV 2/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.25, max_depth=12, min_child_weight=3;, score=0.792 total time=   0.2s\n",
      "[CV 3/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.25, max_depth=12, min_child_weight=3;, score=0.775 total time=   0.2s\n",
      "[CV 4/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.25, max_depth=12, min_child_weight=3;, score=0.778 total time=   0.2s\n",
      "[CV 5/5] END colsample_bytree=0.3, gamma=0.3, learning_rate=0.25, max_depth=12, min_child_weight=3;, score=0.737 total time=   0.2s\n",
      "[CV 1/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.15, max_depth=8, min_child_weight=5;, score=0.801 total time=   0.1s\n",
      "[CV 2/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.15, max_depth=8, min_child_weight=5;, score=0.819 total time=   0.1s\n",
      "[CV 3/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.15, max_depth=8, min_child_weight=5;, score=0.801 total time=   0.1s\n",
      "[CV 4/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.15, max_depth=8, min_child_weight=5;, score=0.780 total time=   0.1s\n",
      "[CV 5/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.15, max_depth=8, min_child_weight=5;, score=0.756 total time=   0.1s\n",
      "[CV 1/5] END colsample_bytree=0.4, gamma=0.5, learning_rate=0.15, max_depth=12, min_child_weight=5;, score=0.797 total time=   0.2s\n",
      "[CV 2/5] END colsample_bytree=0.4, gamma=0.5, learning_rate=0.15, max_depth=12, min_child_weight=5;, score=0.794 total time=   0.4s\n",
      "[CV 3/5] END colsample_bytree=0.4, gamma=0.5, learning_rate=0.15, max_depth=12, min_child_weight=5;, score=0.795 total time=   0.6s\n",
      "[CV 4/5] END colsample_bytree=0.4, gamma=0.5, learning_rate=0.15, max_depth=12, min_child_weight=5;, score=0.774 total time=   0.2s\n",
      "[CV 5/5] END colsample_bytree=0.4, gamma=0.5, learning_rate=0.15, max_depth=12, min_child_weight=5;, score=0.749 total time=   0.2s\n",
      "[CV 1/5] END colsample_bytree=0.7, gamma=0.1, learning_rate=0.25, max_depth=6, min_child_weight=1;, score=0.802 total time=   0.2s\n",
      "[CV 2/5] END colsample_bytree=0.7, gamma=0.1, learning_rate=0.25, max_depth=6, min_child_weight=1;, score=0.797 total time=   0.2s\n",
      "[CV 3/5] END colsample_bytree=0.7, gamma=0.1, learning_rate=0.25, max_depth=6, min_child_weight=1;, score=0.786 total time=   0.2s\n",
      "[CV 4/5] END colsample_bytree=0.7, gamma=0.1, learning_rate=0.25, max_depth=6, min_child_weight=1;, score=0.784 total time=   0.1s\n",
      "[CV 5/5] END colsample_bytree=0.7, gamma=0.1, learning_rate=0.25, max_depth=6, min_child_weight=1;, score=0.750 total time=   0.1s\n"
     ]
    },
    {
     "data": {
      "text/plain": "RandomizedSearchCV(cv=5, error_score='raise',\n                   estimator=XGBClassifier(base_score=None, booster=None,\n                                           callbacks=None,\n                                           colsample_bylevel=None,\n                                           colsample_bynode=None,\n                                           colsample_bytree=None,\n                                           early_stopping_rounds=None,\n                                           enable_categorical=False,\n                                           eval_metric=None, gamma=None,\n                                           gpu_id=None, grow_policy=None,\n                                           importance_type=None,\n                                           interaction_constraints=None,\n                                           learning_rat...\n                                           n_estimators=100, n_jobs=None,\n                                           num_parallel_tree=None,\n                                           predictor=None, random_state=None,\n                                           reg_alpha=None, reg_lambda=None, ...),\n                   n_iter=5,\n                   param_distributions={'colsample_bytree': [0.3, 0.4, 0.5,\n                                                             0.7],\n                                        'gamma': [0.0, 0.1, 0.2, 0.3, 0.4, 0.5],\n                                        'learning_rate': [0.05, 0.1, 0.15, 0.2,\n                                                          0.25],\n                                        'max_depth': [3, 4, 5, 6, 8, 10, 12,\n                                                      15],\n                                        'min_child_weight': [1, 3, 5, 7]},\n                   scoring='roc_auc', verbose=3)",
      "text/html": "<style>#sk-container-id-34 {color: black;background-color: white;}#sk-container-id-34 pre{padding: 0;}#sk-container-id-34 div.sk-toggleable {background-color: white;}#sk-container-id-34 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-34 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-34 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-34 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-34 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-34 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-34 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-34 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-34 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-34 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-34 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-34 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-34 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-34 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-34 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-34 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-34 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-34 div.sk-item {position: relative;z-index: 1;}#sk-container-id-34 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-34 div.sk-item::before, #sk-container-id-34 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-34 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-34 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-34 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-34 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-34 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-34 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-34 div.sk-label-container {text-align: center;}#sk-container-id-34 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-34 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-34\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, error_score=&#x27;raise&#x27;,\n                   estimator=XGBClassifier(base_score=None, booster=None,\n                                           callbacks=None,\n                                           colsample_bylevel=None,\n                                           colsample_bynode=None,\n                                           colsample_bytree=None,\n                                           early_stopping_rounds=None,\n                                           enable_categorical=False,\n                                           eval_metric=None, gamma=None,\n                                           gpu_id=None, grow_policy=None,\n                                           importance_type=None,\n                                           interaction_constraints=None,\n                                           learning_rat...\n                                           n_estimators=100, n_jobs=None,\n                                           num_parallel_tree=None,\n                                           predictor=None, random_state=None,\n                                           reg_alpha=None, reg_lambda=None, ...),\n                   n_iter=5,\n                   param_distributions={&#x27;colsample_bytree&#x27;: [0.3, 0.4, 0.5,\n                                                             0.7],\n                                        &#x27;gamma&#x27;: [0.0, 0.1, 0.2, 0.3, 0.4, 0.5],\n                                        &#x27;learning_rate&#x27;: [0.05, 0.1, 0.15, 0.2,\n                                                          0.25],\n                                        &#x27;max_depth&#x27;: [3, 4, 5, 6, 8, 10, 12,\n                                                      15],\n                                        &#x27;min_child_weight&#x27;: [1, 3, 5, 7]},\n                   scoring=&#x27;roc_auc&#x27;, verbose=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-56\" type=\"checkbox\" ><label for=\"sk-estimator-id-56\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, error_score=&#x27;raise&#x27;,\n                   estimator=XGBClassifier(base_score=None, booster=None,\n                                           callbacks=None,\n                                           colsample_bylevel=None,\n                                           colsample_bynode=None,\n                                           colsample_bytree=None,\n                                           early_stopping_rounds=None,\n                                           enable_categorical=False,\n                                           eval_metric=None, gamma=None,\n                                           gpu_id=None, grow_policy=None,\n                                           importance_type=None,\n                                           interaction_constraints=None,\n                                           learning_rat...\n                                           n_estimators=100, n_jobs=None,\n                                           num_parallel_tree=None,\n                                           predictor=None, random_state=None,\n                                           reg_alpha=None, reg_lambda=None, ...),\n                   n_iter=5,\n                   param_distributions={&#x27;colsample_bytree&#x27;: [0.3, 0.4, 0.5,\n                                                             0.7],\n                                        &#x27;gamma&#x27;: [0.0, 0.1, 0.2, 0.3, 0.4, 0.5],\n                                        &#x27;learning_rate&#x27;: [0.05, 0.1, 0.15, 0.2,\n                                                          0.25],\n                                        &#x27;max_depth&#x27;: [3, 4, 5, 6, 8, 10, 12,\n                                                      15],\n                                        &#x27;min_child_weight&#x27;: [1, 3, 5, 7]},\n                   scoring=&#x27;roc_auc&#x27;, verbose=3)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-57\" type=\"checkbox\" ><label for=\"sk-estimator-id-57\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, gamma=None,\n              gpu_id=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, n_estimators=100, n_jobs=None,\n              num_parallel_tree=None, predictor=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, ...)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-58\" type=\"checkbox\" ><label for=\"sk-estimator-id-58\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, gamma=None,\n              gpu_id=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, n_estimators=100, n_jobs=None,\n              num_parallel_tree=None, predictor=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, ...)</pre></div></div></div></div></div></div></div></div></div></div>"
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier=xgboost.XGBClassifier(tree_method='auto')\n",
    "\n",
    "params={\n",
    "    \"colsample_bytree\":[0.3,0.4,0.5,0.7],\n",
    "    \"gamma\":[0.0, 0.1, 0.2 , 0.3, 0.4, 0.5],\n",
    "    \"learning_rate\":[0.05,0.10,0.15,0.20, 0.25],\n",
    "    \"max_depth\":[3, 4, 5, 6, 8, 10, 12, 15],\n",
    "    \"min_child_weight\":[1,3,5,7]\n",
    "}\n",
    "\n",
    "clf2 =RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',cv=5,verbose=3, error_score='raise')\n",
    "\n",
    "clf2.fit(X2,y2)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "outputs": [
    {
     "data": {
      "text/plain": "{'min_child_weight': 3,\n 'max_depth': 4,\n 'learning_rate': 0.1,\n 'gamma': 0.5,\n 'colsample_bytree': 0.4}"
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf2.best_params_"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "outputs": [
    {
     "data": {
      "text/plain": "XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.4,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0.5, gpu_id=-1, grow_policy='depthwise',\n              importance_type=None, interaction_constraints='',\n              learning_rate=0.1, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=4, max_leaves=0, min_child_weight=3,\n              missing=nan, monotone_constraints='()', n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)",
      "text/html": "<style>#sk-container-id-35 {color: black;background-color: white;}#sk-container-id-35 pre{padding: 0;}#sk-container-id-35 div.sk-toggleable {background-color: white;}#sk-container-id-35 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-35 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-35 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-35 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-35 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-35 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-35 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-35 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-35 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-35 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-35 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-35 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-35 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-35 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-35 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-35 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-35 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-35 div.sk-item {position: relative;z-index: 1;}#sk-container-id-35 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-35 div.sk-item::before, #sk-container-id-35 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-35 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-35 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-35 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-35 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-35 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-35 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-35 div.sk-label-container {text-align: center;}#sk-container-id-35 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-35 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-35\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.4,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0.5, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.1, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=4, max_leaves=0, min_child_weight=3,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-59\" type=\"checkbox\" checked><label for=\"sk-estimator-id-59\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.4,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0.5, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.1, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=4, max_leaves=0, min_child_weight=3,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre></div></div></div></div></div>"
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf2.best_estimator_"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 576x432 with 2 Axes>",
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xg2_model = xgboost.XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n",
    "              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.4,\n",
    "              early_stopping_rounds=None, enable_categorical=False,\n",
    "              eval_metric=None, gamma=0.5, gpu_id=-1, grow_policy='depthwise',\n",
    "              importance_type=None, interaction_constraints='',\n",
    "              learning_rate=0.1, max_bin=256, max_cat_to_onehot=4,\n",
    "              max_delta_step=0, max_depth=5, max_leaves=0, min_child_weight=3,\n",
    "              missing=nan, monotone_constraints='()', n_estimators=100,\n",
    "              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n",
    "              reg_alpha=0, reg_lambda=1,\n",
    "              sampling_method= 'uniform', scale_pos_weight = 1, subsample = 1,\n",
    "              tree_method = 'auto', validate_parameters= 1, verbosity= None)\n",
    "\n",
    "xg2_model.fit(X2,y2)\n",
    "\n",
    "pred_xgboost2 = xg2_model.predict(X2)\n",
    "\n",
    "cm = confusion_matrix(y2, pred_xgboost2)\n",
    "cm_norm = cm/cm.sum(axis=1)[:, np.newaxis]\n",
    "plt.figure()\n",
    "cl.plot_confusion_matrix(cm_norm, classes=clf2.classes_)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Building model for group 3"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "outputs": [],
   "source": [
    "df_group_3 = df_groups_modeling[df_groups_modeling['group_terms'] == 3]\n",
    "df_group_3.drop(\n",
    "    ['rpmt_id', 'rpmt_advance_date', 'rpmt_funding_date', 'pmt_rate_30d', 'pmt_rate_90d', 'rpmt_ed', 'rpmt_fmpr',\n",
    "     'hit_30_day_mark', 'hit_60_day_mark', 'hit_90_day_mark'], axis=1, inplace=True)\n",
    "df_group_3 = pd.get_dummies(df_group_3, columns=['rpmt_industry', 'rpmt_product'])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X3 shape: (66, 33)\n",
      "y3 shape: (66,)\n"
     ]
    }
   ],
   "source": [
    "X3= df_group_3.drop('is_charged_off',axis=1)\n",
    "y3= df_group_3['is_charged_off']\n",
    "print(f'X3 shape: {np.shape(X3)}')\n",
    "print(f'y3 shape: {np.shape(y3)}')\n",
    "X3_train, X3_test, y3_train, y3_test = train_test_split(X3, y3, train_size=0.9, test_size=0.1, random_state=0)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "outputs": [
    {
     "data": {
      "text/plain": "DecisionTreeClassifier(criterion='entropy', max_depth=10, random_state=1)",
      "text/html": "<style>#sk-container-id-36 {color: black;background-color: white;}#sk-container-id-36 pre{padding: 0;}#sk-container-id-36 div.sk-toggleable {background-color: white;}#sk-container-id-36 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-36 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-36 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-36 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-36 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-36 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-36 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-36 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-36 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-36 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-36 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-36 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-36 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-36 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-36 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-36 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-36 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-36 div.sk-item {position: relative;z-index: 1;}#sk-container-id-36 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-36 div.sk-item::before, #sk-container-id-36 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-36 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-36 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-36 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-36 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-36 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-36 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-36 div.sk-label-container {text-align: center;}#sk-container-id-36 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-36 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-36\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=10, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-60\" type=\"checkbox\" checked><label for=\"sk-estimator-id-60\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=10, random_state=1)</pre></div></div></div></div></div>"
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt_g3 = DecisionTreeClassifier(criterion='entropy', max_depth=10, random_state=1)\n",
    "dt_g3.fit(X3_train, y3_train)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy is:  1.0\n",
      "Testing Accuracy is:  1.0\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 576x432 with 2 Axes>",
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y3_pred = dt_g3.predict(X3_train)\n",
    "\n",
    "print(\"Training Accuracy is: \", dt_g3.score(X3_train, y3_train))\n",
    "\n",
    "print(\"Testing Accuracy is: \", dt_g3.score(X3_test, y3_test))\n",
    "\n",
    "cm = confusion_matrix(y3_train, y3_pred)\n",
    "cm_norm = cm/cm.sum(axis=1)[:, np.newaxis]\n",
    "plt.figure()\n",
    "\n",
    "cl.plot_confusion_matrix(cm_norm, classes=dt_g1.classes_, title='Training confusion')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Excluding Group 3"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "outputs": [],
   "source": [
    "df_group_1_2 = df_groups_modeling[df_groups_modeling['group_terms'] != 3]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "outputs": [],
   "source": [
    "df_group_1_2.drop(['rpmt_id','rpmt_advance_date','rpmt_funding_date', 'pmt_rate_30d', 'pmt_rate_90d','rpmt_ed','rpmt_fmpr','hit_30_day_mark','hit_60_day_mark','hit_90_day_mark'], axis=1, inplace=True)\n",
    "df_group_1_2 = pd.get_dummies(df_group_1_2, columns=['rpmt_industry', 'rpmt_product'])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X12 shape: (7657, 36)\n",
      "y12 shape: (7657,)\n"
     ]
    }
   ],
   "source": [
    "X12= df_group_1_2.drop('is_charged_off',axis=1)\n",
    "y12= df_group_1_2['is_charged_off']\n",
    "print(f'X12 shape: {np.shape(X12)}')\n",
    "print(f'y12 shape: {np.shape(y12)}')\n",
    "X12_train, X12_test, y12_train, y12_test = train_test_split(X12, y12, train_size=0.8, test_size=0.2, random_state=0)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "outputs": [
    {
     "data": {
      "text/plain": "DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=1)",
      "text/html": "<style>#sk-container-id-49 {color: black;background-color: white;}#sk-container-id-49 pre{padding: 0;}#sk-container-id-49 div.sk-toggleable {background-color: white;}#sk-container-id-49 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-49 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-49 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-49 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-49 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-49 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-49 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-49 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-49 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-49 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-49 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-49 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-49 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-49 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-49 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-49 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-49 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-49 div.sk-item {position: relative;z-index: 1;}#sk-container-id-49 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-49 div.sk-item::before, #sk-container-id-49 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-49 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-49 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-49 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-49 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-49 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-49 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-49 div.sk-label-container {text-align: center;}#sk-container-id-49 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-49 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-49\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=3, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-81\" type=\"checkbox\" checked><label for=\"sk-estimator-id-81\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(criterion=&#x27;entropy&#x27;, max_depth=3, random_state=1)</pre></div></div></div></div></div>"
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt_g12 = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=1)\n",
    "dt_g12.fit(X12_train, y12_train)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy is:  0.8507755102040816\n",
      "Testing Accuracy is:  0.8185378590078329\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 576x432 with 2 Axes>",
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y12_pred = dt_g12.predict(X12_train)\n",
    "\n",
    "print(\"Training Accuracy is: \", dt_g12.score(X12_train, y12_train))\n",
    "\n",
    "print(\"Testing Accuracy is: \", dt_g12.score(X12_test, y12_test))\n",
    "\n",
    "cm = confusion_matrix(y12_train, y12_pred)\n",
    "cm_norm = cm/cm.sum(axis=1)[:, np.newaxis]\n",
    "plt.figure()\n",
    "\n",
    "cl.plot_confusion_matrix(cm_norm, classes=dt_g12.classes_, title='Training confusion')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 5 candidates, totalling 25 fits\n",
      "[CV 1/5] END colsample_bytree=0.4, gamma=0.2, learning_rate=0.1, max_depth=8, min_child_weight=1;, score=0.845 total time=   0.4s\n",
      "[CV 2/5] END colsample_bytree=0.4, gamma=0.2, learning_rate=0.1, max_depth=8, min_child_weight=1;, score=0.841 total time=   0.7s\n",
      "[CV 3/5] END colsample_bytree=0.4, gamma=0.2, learning_rate=0.1, max_depth=8, min_child_weight=1;, score=0.844 total time=   0.3s\n",
      "[CV 4/5] END colsample_bytree=0.4, gamma=0.2, learning_rate=0.1, max_depth=8, min_child_weight=1;, score=0.842 total time=   0.3s\n",
      "[CV 5/5] END colsample_bytree=0.4, gamma=0.2, learning_rate=0.1, max_depth=8, min_child_weight=1;, score=0.799 total time=   0.4s\n",
      "[CV 1/5] END colsample_bytree=0.5, gamma=0.4, learning_rate=0.2, max_depth=3, min_child_weight=5;, score=0.858 total time=   0.1s\n",
      "[CV 2/5] END colsample_bytree=0.5, gamma=0.4, learning_rate=0.2, max_depth=3, min_child_weight=5;, score=0.842 total time=   0.1s\n",
      "[CV 3/5] END colsample_bytree=0.5, gamma=0.4, learning_rate=0.2, max_depth=3, min_child_weight=5;, score=0.849 total time=   0.1s\n",
      "[CV 4/5] END colsample_bytree=0.5, gamma=0.4, learning_rate=0.2, max_depth=3, min_child_weight=5;, score=0.846 total time=   0.1s\n",
      "[CV 5/5] END colsample_bytree=0.5, gamma=0.4, learning_rate=0.2, max_depth=3, min_child_weight=5;, score=0.804 total time=   0.1s\n",
      "[CV 1/5] END colsample_bytree=0.4, gamma=0.3, learning_rate=0.05, max_depth=8, min_child_weight=3;, score=0.858 total time=   0.3s\n",
      "[CV 2/5] END colsample_bytree=0.4, gamma=0.3, learning_rate=0.05, max_depth=8, min_child_weight=3;, score=0.841 total time=   0.4s\n",
      "[CV 3/5] END colsample_bytree=0.4, gamma=0.3, learning_rate=0.05, max_depth=8, min_child_weight=3;, score=0.847 total time=   0.6s\n",
      "[CV 4/5] END colsample_bytree=0.4, gamma=0.3, learning_rate=0.05, max_depth=8, min_child_weight=3;, score=0.842 total time=   0.5s\n",
      "[CV 5/5] END colsample_bytree=0.4, gamma=0.3, learning_rate=0.05, max_depth=8, min_child_weight=3;, score=0.802 total time=   0.8s\n",
      "[CV 1/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.15, max_depth=4, min_child_weight=1;, score=0.853 total time=   0.2s\n",
      "[CV 2/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.15, max_depth=4, min_child_weight=1;, score=0.838 total time=   0.2s\n",
      "[CV 3/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.15, max_depth=4, min_child_weight=1;, score=0.849 total time=   0.2s\n",
      "[CV 4/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.15, max_depth=4, min_child_weight=1;, score=0.842 total time=   0.2s\n",
      "[CV 5/5] END colsample_bytree=0.7, gamma=0.3, learning_rate=0.15, max_depth=4, min_child_weight=1;, score=0.809 total time=   0.2s\n",
      "[CV 1/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.2, max_depth=15, min_child_weight=3;, score=0.843 total time=   0.5s\n",
      "[CV 2/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.2, max_depth=15, min_child_weight=3;, score=0.830 total time=   0.5s\n",
      "[CV 3/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.2, max_depth=15, min_child_weight=3;, score=0.829 total time=   0.5s\n",
      "[CV 4/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.2, max_depth=15, min_child_weight=3;, score=0.836 total time=   0.5s\n",
      "[CV 5/5] END colsample_bytree=0.3, gamma=0.4, learning_rate=0.2, max_depth=15, min_child_weight=3;, score=0.798 total time=   0.6s\n"
     ]
    },
    {
     "data": {
      "text/plain": "RandomizedSearchCV(cv=5, error_score='raise',\n                   estimator=XGBClassifier(base_score=None, booster=None,\n                                           callbacks=None,\n                                           colsample_bylevel=None,\n                                           colsample_bynode=None,\n                                           colsample_bytree=None,\n                                           early_stopping_rounds=None,\n                                           enable_categorical=False,\n                                           eval_metric=None, gamma=None,\n                                           gpu_id=None, grow_policy=None,\n                                           importance_type=None,\n                                           interaction_constraints=None,\n                                           learning_rat...\n                                           monotone_constraints=None,\n                                           n_estimators=100, n_jobs=None,\n                                           num_parallel_tree=None,\n                                           predictor=None, random_state=None,\n                                           reg_alpha=None, reg_lambda=None, ...),\n                   n_iter=5,\n                   param_distributions={'colsample_bytree': [0.3, 0.4, 0.5,\n                                                             0.7],\n                                        'gamma': [0.0, 0.1, 0.2, 0.3, 0.4],\n                                        'learning_rate': [0.05, 0.1, 0.15, 0.2],\n                                        'max_depth': [3, 4, 5, 6, 8, 10, 12,\n                                                      15],\n                                        'min_child_weight': [1, 3, 5, 7]},\n                   scoring='roc_auc', verbose=3)",
      "text/html": "<style>#sk-container-id-50 {color: black;background-color: white;}#sk-container-id-50 pre{padding: 0;}#sk-container-id-50 div.sk-toggleable {background-color: white;}#sk-container-id-50 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-50 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-50 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-50 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-50 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-50 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-50 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-50 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-50 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-50 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-50 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-50 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-50 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-50 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-50 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-50 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-50 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-50 div.sk-item {position: relative;z-index: 1;}#sk-container-id-50 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-50 div.sk-item::before, #sk-container-id-50 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-50 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-50 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-50 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-50 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-50 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-50 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-50 div.sk-label-container {text-align: center;}#sk-container-id-50 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-50 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-50\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, error_score=&#x27;raise&#x27;,\n                   estimator=XGBClassifier(base_score=None, booster=None,\n                                           callbacks=None,\n                                           colsample_bylevel=None,\n                                           colsample_bynode=None,\n                                           colsample_bytree=None,\n                                           early_stopping_rounds=None,\n                                           enable_categorical=False,\n                                           eval_metric=None, gamma=None,\n                                           gpu_id=None, grow_policy=None,\n                                           importance_type=None,\n                                           interaction_constraints=None,\n                                           learning_rat...\n                                           monotone_constraints=None,\n                                           n_estimators=100, n_jobs=None,\n                                           num_parallel_tree=None,\n                                           predictor=None, random_state=None,\n                                           reg_alpha=None, reg_lambda=None, ...),\n                   n_iter=5,\n                   param_distributions={&#x27;colsample_bytree&#x27;: [0.3, 0.4, 0.5,\n                                                             0.7],\n                                        &#x27;gamma&#x27;: [0.0, 0.1, 0.2, 0.3, 0.4],\n                                        &#x27;learning_rate&#x27;: [0.05, 0.1, 0.15, 0.2],\n                                        &#x27;max_depth&#x27;: [3, 4, 5, 6, 8, 10, 12,\n                                                      15],\n                                        &#x27;min_child_weight&#x27;: [1, 3, 5, 7]},\n                   scoring=&#x27;roc_auc&#x27;, verbose=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-82\" type=\"checkbox\" ><label for=\"sk-estimator-id-82\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=5, error_score=&#x27;raise&#x27;,\n                   estimator=XGBClassifier(base_score=None, booster=None,\n                                           callbacks=None,\n                                           colsample_bylevel=None,\n                                           colsample_bynode=None,\n                                           colsample_bytree=None,\n                                           early_stopping_rounds=None,\n                                           enable_categorical=False,\n                                           eval_metric=None, gamma=None,\n                                           gpu_id=None, grow_policy=None,\n                                           importance_type=None,\n                                           interaction_constraints=None,\n                                           learning_rat...\n                                           monotone_constraints=None,\n                                           n_estimators=100, n_jobs=None,\n                                           num_parallel_tree=None,\n                                           predictor=None, random_state=None,\n                                           reg_alpha=None, reg_lambda=None, ...),\n                   n_iter=5,\n                   param_distributions={&#x27;colsample_bytree&#x27;: [0.3, 0.4, 0.5,\n                                                             0.7],\n                                        &#x27;gamma&#x27;: [0.0, 0.1, 0.2, 0.3, 0.4],\n                                        &#x27;learning_rate&#x27;: [0.05, 0.1, 0.15, 0.2],\n                                        &#x27;max_depth&#x27;: [3, 4, 5, 6, 8, 10, 12,\n                                                      15],\n                                        &#x27;min_child_weight&#x27;: [1, 3, 5, 7]},\n                   scoring=&#x27;roc_auc&#x27;, verbose=3)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-83\" type=\"checkbox\" ><label for=\"sk-estimator-id-83\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, gamma=None,\n              gpu_id=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, n_estimators=100, n_jobs=None,\n              num_parallel_tree=None, predictor=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, ...)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-84\" type=\"checkbox\" ><label for=\"sk-estimator-id-84\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, gamma=None,\n              gpu_id=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, n_estimators=100, n_jobs=None,\n              num_parallel_tree=None, predictor=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, ...)</pre></div></div></div></div></div></div></div></div></div></div>"
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier=xgboost.XGBClassifier(tree_method='auto')\n",
    "\n",
    "params={\n",
    "    \"learning_rate\":[0.05,0.10,0.15,0.20],\n",
    "    \"max_depth\":[3, 4, 5, 6, 8, 10, 12, 15],\n",
    "    \"min_child_weight\":[1,3,5,7],\n",
    "    \"gamma\":[0.0, 0.1, 0.2 , 0.3, 0.4],\n",
    "    \"colsample_bytree\":[0.3,0.4,0.5,0.7]\n",
    "}\n",
    "\n",
    "clf12 =RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',cv=5,verbose=3, error_score='raise')\n",
    "\n",
    "clf12.fit(X12,y12)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "outputs": [
    {
     "data": {
      "text/plain": "{'min_child_weight': 5,\n 'max_depth': 3,\n 'learning_rate': 0.2,\n 'gamma': 0.4,\n 'colsample_bytree': 0.5}"
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf12.best_params_"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "outputs": [
    {
     "data": {
      "text/plain": "XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0.4, gpu_id=-1, grow_policy='depthwise',\n              importance_type=None, interaction_constraints='',\n              learning_rate=0.2, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=3, max_leaves=0, min_child_weight=5,\n              missing=nan, monotone_constraints='()', n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)",
      "text/html": "<style>#sk-container-id-51 {color: black;background-color: white;}#sk-container-id-51 pre{padding: 0;}#sk-container-id-51 div.sk-toggleable {background-color: white;}#sk-container-id-51 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-51 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-51 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-51 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-51 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-51 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-51 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-51 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-51 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-51 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-51 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-51 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-51 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-51 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-51 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-51 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-51 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-51 div.sk-item {position: relative;z-index: 1;}#sk-container-id-51 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-51 div.sk-item::before, #sk-container-id-51 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-51 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-51 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-51 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-51 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-51 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-51 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-51 div.sk-label-container {text-align: center;}#sk-container-id-51 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-51 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-51\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0.4, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.2, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=3, max_leaves=0, min_child_weight=5,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-85\" type=\"checkbox\" checked><label for=\"sk-estimator-id-85\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=0.5, booster=&#x27;gbtree&#x27;, callbacks=None,\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5,\n              early_stopping_rounds=None, enable_categorical=False,\n              eval_metric=None, gamma=0.4, gpu_id=-1, grow_policy=&#x27;depthwise&#x27;,\n              importance_type=None, interaction_constraints=&#x27;&#x27;,\n              learning_rate=0.2, max_bin=256, max_cat_to_onehot=4,\n              max_delta_step=0, max_depth=3, max_leaves=0, min_child_weight=5,\n              missing=nan, monotone_constraints=&#x27;()&#x27;, n_estimators=100,\n              n_jobs=0, num_parallel_tree=1, predictor=&#x27;auto&#x27;, random_state=0,\n              reg_alpha=0, reg_lambda=1, ...)</pre></div></div></div></div></div>"
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf12.best_estimator_"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 576x432 with 2 Axes>",
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xg12_model = xgboost.XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,\n",
    "              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5,\n",
    "              early_stopping_rounds=None, enable_categorical=False,\n",
    "              eval_metric=None, gamma=0.4, gpu_id=-1, grow_policy='depthwise',\n",
    "              importance_type=None, interaction_constraints='',\n",
    "              learning_rate=0.2, max_bin=256, max_cat_to_onehot=4,\n",
    "              max_delta_step=0, max_depth=3, max_leaves=0, min_child_weight=5,\n",
    "              missing=nan, monotone_constraints='()', n_estimators=100,\n",
    "              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,\n",
    "              reg_alpha=0, reg_lambda=1,\n",
    "              sampling_method= 'uniform', scale_pos_weight = 1, subsample = 1,\n",
    "              tree_method = 'auto', validate_parameters= 1, verbosity= None)\n",
    "\n",
    "xg12_model.fit(X12,y12)\n",
    "\n",
    "pred_xgboost12 = xg12_model.predict(X12)\n",
    "\n",
    "cm = confusion_matrix(y12, pred_xgboost12)\n",
    "cm_norm = cm/cm.sum(axis=1)[:, np.newaxis]\n",
    "plt.figure()\n",
    "cl.plot_confusion_matrix(cm_norm, classes=clf12.classes_)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "outputs": [
    {
     "data": {
      "text/plain": "               rpmt_id  is_active  is_charged_off  opp_term  opp_factor  \\\n0   a4G3Z0000026NxSUAU          0               0      4.50        1.49   \n1   a4G5e000000RMhtEAG          0               0      6.25        1.49   \n10  a4G5e000000RNogEAG          0               0      9.00        1.47   \n16  a4G5e000000RLWjEAO          0               0      5.75        1.49   \n21  a4G3Z0000026TFDUA2          0               0     10.25        1.49   \n\n    opp_percent_of_rev  opp_fico_score rpmt_advance_date rpmt_funding_date  \\\n0                20.74           545.0        2021-05-03        2021-04-30   \n1                19.07           598.0        2022-02-01        2022-01-31   \n10               24.68           624.0        2022-03-10        2022-03-09   \n16               23.05           607.0        2021-12-17        2021-12-16   \n21               21.42           589.0        2021-06-16        2021-06-15   \n\n    rpmt_funded_amt  ... opp_adbs_div_rev opp_last_mo_rev_trend  opp_rev_vol  \\\n0            5000.0  ...              6.0                  41.0         65.0   \n1           12000.0  ...             61.0                 -16.0        127.0   \n10           6000.0  ...             39.0                 -49.0        155.0   \n16           8000.0  ...              9.0                   6.0         41.0   \n21          28000.0  ...              3.0                  -6.0         54.0   \n\n    pmt_rate_30d  pmt_rate_60d  pmt_rate_90d  hit_30_day_mark  \\\n0            1.0      1.000000      1.000000                1   \n1            1.0      1.000000      1.000000                1   \n10           1.0      1.000000      1.000000                1   \n16           0.8      0.888889      0.846154                1   \n21           1.0      1.000000      1.000000                1   \n\n    hit_60_day_mark  hit_90_day_mark  group_terms  \n0                 1                1            1  \n1                 1                1            1  \n10                1                1            2  \n16                1                1            1  \n21                1                1            2  \n\n[5 rows x 41 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rpmt_id</th>\n      <th>is_active</th>\n      <th>is_charged_off</th>\n      <th>opp_term</th>\n      <th>opp_factor</th>\n      <th>opp_percent_of_rev</th>\n      <th>opp_fico_score</th>\n      <th>rpmt_advance_date</th>\n      <th>rpmt_funding_date</th>\n      <th>rpmt_funded_amt</th>\n      <th>...</th>\n      <th>opp_adbs_div_rev</th>\n      <th>opp_last_mo_rev_trend</th>\n      <th>opp_rev_vol</th>\n      <th>pmt_rate_30d</th>\n      <th>pmt_rate_60d</th>\n      <th>pmt_rate_90d</th>\n      <th>hit_30_day_mark</th>\n      <th>hit_60_day_mark</th>\n      <th>hit_90_day_mark</th>\n      <th>group_terms</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>a4G3Z0000026NxSUAU</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4.50</td>\n      <td>1.49</td>\n      <td>20.74</td>\n      <td>545.0</td>\n      <td>2021-05-03</td>\n      <td>2021-04-30</td>\n      <td>5000.0</td>\n      <td>...</td>\n      <td>6.0</td>\n      <td>41.0</td>\n      <td>65.0</td>\n      <td>1.0</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>a4G5e000000RMhtEAG</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6.25</td>\n      <td>1.49</td>\n      <td>19.07</td>\n      <td>598.0</td>\n      <td>2022-02-01</td>\n      <td>2022-01-31</td>\n      <td>12000.0</td>\n      <td>...</td>\n      <td>61.0</td>\n      <td>-16.0</td>\n      <td>127.0</td>\n      <td>1.0</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>a4G5e000000RNogEAG</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.00</td>\n      <td>1.47</td>\n      <td>24.68</td>\n      <td>624.0</td>\n      <td>2022-03-10</td>\n      <td>2022-03-09</td>\n      <td>6000.0</td>\n      <td>...</td>\n      <td>39.0</td>\n      <td>-49.0</td>\n      <td>155.0</td>\n      <td>1.0</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>a4G5e000000RLWjEAO</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5.75</td>\n      <td>1.49</td>\n      <td>23.05</td>\n      <td>607.0</td>\n      <td>2021-12-17</td>\n      <td>2021-12-16</td>\n      <td>8000.0</td>\n      <td>...</td>\n      <td>9.0</td>\n      <td>6.0</td>\n      <td>41.0</td>\n      <td>0.8</td>\n      <td>0.888889</td>\n      <td>0.846154</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>a4G3Z0000026TFDUA2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>10.25</td>\n      <td>1.49</td>\n      <td>21.42</td>\n      <td>589.0</td>\n      <td>2021-06-16</td>\n      <td>2021-06-15</td>\n      <td>28000.0</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>-6.0</td>\n      <td>54.0</td>\n      <td>1.0</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 41 columns</p>\n</div>"
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "outputs": [],
   "source": [
    "a_df = df.loc[df['rpmt_advance_date'].between('2022-05-01', '2022-10-31')]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "                  rpmt_id  is_active  is_charged_off  opp_term  opp_factor  \\\n2      a4G5e000000RPmzEAG          1               0      9.00        1.49   \n7      a4G5e000000VOgxEAG          1               0     10.00        1.27   \n10     a4G5e000000VNdTEAW          1               0     10.00        1.44   \n12     a4G5e000000RRwWEAW          0               1      7.25        1.49   \n13     a4G5e000000VLvpEAG          1               0      7.25        1.46   \n...                   ...        ...             ...       ...         ...   \n20000  a4G5e000000VNT9EAO          1               0      5.00        1.44   \n20003  a4G5e000000VMz4EAG          1               0      7.50        1.49   \n20004  a4G5e000000VN9nEAG          0               0      4.25        1.44   \n20008  a4G5e000000VN78EAG          1               0     10.50        1.44   \n20016  a4G5e000000VOgJEAW          1               0     12.00        1.44   \n\n       opp_percent_of_rev  opp_fico_score rpmt_advance_date rpmt_funding_date  \\\n2                   16.59           586.0        2022-05-05        2022-05-04   \n7                    3.47           664.0        2022-10-26        2022-10-25   \n10                   4.50           648.0        2022-09-29        2022-09-28   \n12                  20.55           624.0        2022-07-06        2022-07-06   \n13                  21.07           599.0        2022-08-10        2022-08-08   \n...                   ...             ...               ...               ...   \n20000                7.91           618.0        2022-09-23        2022-09-22   \n20003                8.09           617.0        2022-09-07        2022-09-07   \n20004               13.33           540.0        2022-09-12        2022-09-12   \n20008                9.35           624.0        2022-09-12        2022-09-09   \n20016               12.83           665.0        2022-10-24        2022-10-24   \n\n       rpmt_funded_amt  ... m3_nsfs opp_adbs_div_rev  opp_last_mo_rev_trend  \\\n2              30000.0  ...     0.0              8.0                    6.0   \n7              15000.0  ...     NaN              NaN                    NaN   \n10             10000.0  ...     0.0             34.0                   -5.0   \n12             10000.0  ...     0.0             10.0                  -30.0   \n13             13600.0  ...     0.0             14.0                    7.0   \n...                ...  ...     ...              ...                    ...   \n20000           7000.0  ...     0.0             22.0                   10.0   \n20003          11000.0  ...     0.0              6.0                   14.0   \n20004          29500.0  ...     0.0              4.0                   -3.0   \n20008          15000.0  ...     0.0             19.0                    5.0   \n20016         155000.0  ...     0.0             12.0                   37.0   \n\n       opp_rev_vol  pmt_rate_30d  pmt_rate_60d  pmt_rate_90d  hit_30_day_mark  \\\n2             28.0      1.000000      1.000000      1.000000                1   \n7              NaN      1.142857      1.142857      1.142857                0   \n10            25.0      0.840000      0.866667      0.866667                1   \n12            95.0      0.619048      0.303514      0.200786                1   \n13           100.0      1.000000      0.930233      0.725806                1   \n...            ...           ...           ...           ...              ...   \n20000         18.0      1.000000      0.863194      0.863194                1   \n20003         29.0      1.000000      1.024390      1.024390                1   \n20004         38.0      1.000000      0.657895      0.657895                1   \n20008         22.0      1.000000      1.142857      1.142857                1   \n20016         68.0      1.125000      1.125000      1.125000                0   \n\n       hit_60_day_mark  hit_90_day_mark  \n2                    1                1  \n7                    0                0  \n10                   0                0  \n12                   1                1  \n13                   1                0  \n...                ...              ...  \n20000                0                0  \n20003                0                0  \n20004                0                0  \n20008                0                0  \n20016                0                0  \n\n[4641 rows x 40 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rpmt_id</th>\n      <th>is_active</th>\n      <th>is_charged_off</th>\n      <th>opp_term</th>\n      <th>opp_factor</th>\n      <th>opp_percent_of_rev</th>\n      <th>opp_fico_score</th>\n      <th>rpmt_advance_date</th>\n      <th>rpmt_funding_date</th>\n      <th>rpmt_funded_amt</th>\n      <th>...</th>\n      <th>m3_nsfs</th>\n      <th>opp_adbs_div_rev</th>\n      <th>opp_last_mo_rev_trend</th>\n      <th>opp_rev_vol</th>\n      <th>pmt_rate_30d</th>\n      <th>pmt_rate_60d</th>\n      <th>pmt_rate_90d</th>\n      <th>hit_30_day_mark</th>\n      <th>hit_60_day_mark</th>\n      <th>hit_90_day_mark</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>a4G5e000000RPmzEAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>9.00</td>\n      <td>1.49</td>\n      <td>16.59</td>\n      <td>586.0</td>\n      <td>2022-05-05</td>\n      <td>2022-05-04</td>\n      <td>30000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>28.0</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>a4G5e000000VOgxEAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>10.00</td>\n      <td>1.27</td>\n      <td>3.47</td>\n      <td>664.0</td>\n      <td>2022-10-26</td>\n      <td>2022-10-25</td>\n      <td>15000.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.142857</td>\n      <td>1.142857</td>\n      <td>1.142857</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>a4G5e000000VNdTEAW</td>\n      <td>1</td>\n      <td>0</td>\n      <td>10.00</td>\n      <td>1.44</td>\n      <td>4.50</td>\n      <td>648.0</td>\n      <td>2022-09-29</td>\n      <td>2022-09-28</td>\n      <td>10000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>34.0</td>\n      <td>-5.0</td>\n      <td>25.0</td>\n      <td>0.840000</td>\n      <td>0.866667</td>\n      <td>0.866667</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>a4G5e000000RRwWEAW</td>\n      <td>0</td>\n      <td>1</td>\n      <td>7.25</td>\n      <td>1.49</td>\n      <td>20.55</td>\n      <td>624.0</td>\n      <td>2022-07-06</td>\n      <td>2022-07-06</td>\n      <td>10000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>10.0</td>\n      <td>-30.0</td>\n      <td>95.0</td>\n      <td>0.619048</td>\n      <td>0.303514</td>\n      <td>0.200786</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>a4G5e000000VLvpEAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.25</td>\n      <td>1.46</td>\n      <td>21.07</td>\n      <td>599.0</td>\n      <td>2022-08-10</td>\n      <td>2022-08-08</td>\n      <td>13600.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>14.0</td>\n      <td>7.0</td>\n      <td>100.0</td>\n      <td>1.000000</td>\n      <td>0.930233</td>\n      <td>0.725806</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>20000</th>\n      <td>a4G5e000000VNT9EAO</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5.00</td>\n      <td>1.44</td>\n      <td>7.91</td>\n      <td>618.0</td>\n      <td>2022-09-23</td>\n      <td>2022-09-22</td>\n      <td>7000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>22.0</td>\n      <td>10.0</td>\n      <td>18.0</td>\n      <td>1.000000</td>\n      <td>0.863194</td>\n      <td>0.863194</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>20003</th>\n      <td>a4G5e000000VMz4EAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.50</td>\n      <td>1.49</td>\n      <td>8.09</td>\n      <td>617.0</td>\n      <td>2022-09-07</td>\n      <td>2022-09-07</td>\n      <td>11000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>14.0</td>\n      <td>29.0</td>\n      <td>1.000000</td>\n      <td>1.024390</td>\n      <td>1.024390</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>20004</th>\n      <td>a4G5e000000VN9nEAG</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4.25</td>\n      <td>1.44</td>\n      <td>13.33</td>\n      <td>540.0</td>\n      <td>2022-09-12</td>\n      <td>2022-09-12</td>\n      <td>29500.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>-3.0</td>\n      <td>38.0</td>\n      <td>1.000000</td>\n      <td>0.657895</td>\n      <td>0.657895</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>20008</th>\n      <td>a4G5e000000VN78EAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>10.50</td>\n      <td>1.44</td>\n      <td>9.35</td>\n      <td>624.0</td>\n      <td>2022-09-12</td>\n      <td>2022-09-09</td>\n      <td>15000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>19.0</td>\n      <td>5.0</td>\n      <td>22.0</td>\n      <td>1.000000</td>\n      <td>1.142857</td>\n      <td>1.142857</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>20016</th>\n      <td>a4G5e000000VOgJEAW</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12.00</td>\n      <td>1.44</td>\n      <td>12.83</td>\n      <td>665.0</td>\n      <td>2022-10-24</td>\n      <td>2022-10-24</td>\n      <td>155000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>12.0</td>\n      <td>37.0</td>\n      <td>68.0</td>\n      <td>1.125000</td>\n      <td>1.125000</td>\n      <td>1.125000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>4641 rows Ã— 40 columns</p>\n</div>"
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "rpmt_id                    0\nis_active                  0\nis_charged_off             0\nopp_term                   0\nopp_factor                 0\nopp_percent_of_rev         0\nopp_fico_score             0\nrpmt_advance_date          0\nrpmt_funding_date          0\nrpmt_funded_amt            0\nrpmt_industry              0\nrpmt_product               0\nopp_years_in_biz           8\nrpmt_ed                    0\nrpmt_fmpr                  0\nopp_epi                    0\nm1_deposits              104\nm1_no_of_deposits        104\nm1_adbs                  104\nm1_neg_days              104\nm1_nsfs                  104\nm2_deposits              104\nm2_no_of_deposits        104\nm2_adbs                  104\nm2_neg_days              104\nm2_nsfs                  104\nm3_deposits              141\nm3_no_of_deposits        141\nm3_adbs                  141\nm3_neg_days              141\nm3_nsfs                  141\nopp_adbs_div_rev         141\nopp_last_mo_rev_trend    141\nopp_rev_vol              141\npmt_rate_30d              28\npmt_rate_60d              28\npmt_rate_90d              28\nhit_30_day_mark            0\nhit_60_day_mark            0\nhit_90_day_mark            0\ndtype: int64"
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "test1 = a_df.dropna(subset=['opp_rev_vol', 'pmt_rate_60d'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "rpmt_id                  0\nis_active                0\nis_charged_off           0\nopp_term                 0\nopp_factor               0\nopp_percent_of_rev       0\nopp_fico_score           0\nrpmt_advance_date        0\nrpmt_funding_date        0\nrpmt_funded_amt          0\nrpmt_industry            0\nrpmt_product             0\nopp_years_in_biz         8\nrpmt_ed                  0\nrpmt_fmpr                0\nopp_epi                  0\nm1_deposits              0\nm1_no_of_deposits        0\nm1_adbs                  0\nm1_neg_days              0\nm1_nsfs                  0\nm2_deposits              0\nm2_no_of_deposits        0\nm2_adbs                  0\nm2_neg_days              0\nm2_nsfs                  0\nm3_deposits              0\nm3_no_of_deposits        0\nm3_adbs                  0\nm3_neg_days              0\nm3_nsfs                  0\nopp_adbs_div_rev         0\nopp_last_mo_rev_trend    0\nopp_rev_vol              0\npmt_rate_30d             0\npmt_rate_60d             0\npmt_rate_90d             0\nhit_30_day_mark          0\nhit_60_day_mark          0\nhit_90_day_mark          0\ndtype: int64"
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test1.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "new_active_df = test1.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "rpmt_id                  0\nis_active                0\nis_charged_off           0\nopp_term                 0\nopp_factor               0\nopp_percent_of_rev       0\nopp_fico_score           0\nrpmt_advance_date        0\nrpmt_funding_date        0\nrpmt_funded_amt          0\nrpmt_industry            0\nrpmt_product             0\nopp_years_in_biz         0\nrpmt_ed                  0\nrpmt_fmpr                0\nopp_epi                  0\nm1_deposits              0\nm1_no_of_deposits        0\nm1_adbs                  0\nm1_neg_days              0\nm1_nsfs                  0\nm2_deposits              0\nm2_no_of_deposits        0\nm2_adbs                  0\nm2_neg_days              0\nm2_nsfs                  0\nm3_deposits              0\nm3_no_of_deposits        0\nm3_adbs                  0\nm3_neg_days              0\nm3_nsfs                  0\nopp_adbs_div_rev         0\nopp_last_mo_rev_trend    0\nopp_rev_vol              0\npmt_rate_30d             0\npmt_rate_60d             0\npmt_rate_90d             0\nhit_30_day_mark          0\nhit_60_day_mark          0\nhit_90_day_mark          0\ndtype: int64"
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_active_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "outputs": [
    {
     "data": {
      "text/plain": "               rpmt_id  is_active  is_charged_off  opp_term  opp_factor  \\\n2   a4G5e000000RPmzEAG          1               0      9.00        1.49   \n10  a4G5e000000VNdTEAW          1               0     10.00        1.44   \n12  a4G5e000000RRwWEAW          0               1      7.25        1.49   \n13  a4G5e000000VLvpEAG          1               0      7.25        1.46   \n26  a4G5e000000RQvQEAW          0               0      4.75        1.49   \n\n    opp_percent_of_rev  opp_fico_score rpmt_advance_date rpmt_funding_date  \\\n2                16.59           586.0        2022-05-05        2022-05-04   \n10                4.50           648.0        2022-09-29        2022-09-28   \n12               20.55           624.0        2022-07-06        2022-07-06   \n13               21.07           599.0        2022-08-10        2022-08-08   \n26               21.17           531.0        2022-06-07        2022-06-07   \n\n    rpmt_funded_amt  ... m3_nsfs opp_adbs_div_rev  opp_last_mo_rev_trend  \\\n2           30000.0  ...     0.0              8.0                    6.0   \n10          10000.0  ...     0.0             34.0                   -5.0   \n12          10000.0  ...     0.0             10.0                  -30.0   \n13          13600.0  ...     0.0             14.0                    7.0   \n26           6750.0  ...     0.0             24.0                   38.0   \n\n    opp_rev_vol  pmt_rate_30d  pmt_rate_60d  pmt_rate_90d  hit_30_day_mark  \\\n2          28.0      1.000000      1.000000      1.000000                1   \n10         25.0      0.840000      0.866667      0.866667                1   \n12         95.0      0.619048      0.303514      0.200786                1   \n13        100.0      1.000000      0.930233      0.725806                1   \n26         86.0      1.000000      1.000000      0.923077                1   \n\n    hit_60_day_mark  hit_90_day_mark  \n2                 1                1  \n10                0                0  \n12                1                1  \n13                1                0  \n26                1                1  \n\n[5 rows x 40 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rpmt_id</th>\n      <th>is_active</th>\n      <th>is_charged_off</th>\n      <th>opp_term</th>\n      <th>opp_factor</th>\n      <th>opp_percent_of_rev</th>\n      <th>opp_fico_score</th>\n      <th>rpmt_advance_date</th>\n      <th>rpmt_funding_date</th>\n      <th>rpmt_funded_amt</th>\n      <th>...</th>\n      <th>m3_nsfs</th>\n      <th>opp_adbs_div_rev</th>\n      <th>opp_last_mo_rev_trend</th>\n      <th>opp_rev_vol</th>\n      <th>pmt_rate_30d</th>\n      <th>pmt_rate_60d</th>\n      <th>pmt_rate_90d</th>\n      <th>hit_30_day_mark</th>\n      <th>hit_60_day_mark</th>\n      <th>hit_90_day_mark</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>a4G5e000000RPmzEAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>9.00</td>\n      <td>1.49</td>\n      <td>16.59</td>\n      <td>586.0</td>\n      <td>2022-05-05</td>\n      <td>2022-05-04</td>\n      <td>30000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>28.0</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>a4G5e000000VNdTEAW</td>\n      <td>1</td>\n      <td>0</td>\n      <td>10.00</td>\n      <td>1.44</td>\n      <td>4.50</td>\n      <td>648.0</td>\n      <td>2022-09-29</td>\n      <td>2022-09-28</td>\n      <td>10000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>34.0</td>\n      <td>-5.0</td>\n      <td>25.0</td>\n      <td>0.840000</td>\n      <td>0.866667</td>\n      <td>0.866667</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>a4G5e000000RRwWEAW</td>\n      <td>0</td>\n      <td>1</td>\n      <td>7.25</td>\n      <td>1.49</td>\n      <td>20.55</td>\n      <td>624.0</td>\n      <td>2022-07-06</td>\n      <td>2022-07-06</td>\n      <td>10000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>10.0</td>\n      <td>-30.0</td>\n      <td>95.0</td>\n      <td>0.619048</td>\n      <td>0.303514</td>\n      <td>0.200786</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>a4G5e000000VLvpEAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.25</td>\n      <td>1.46</td>\n      <td>21.07</td>\n      <td>599.0</td>\n      <td>2022-08-10</td>\n      <td>2022-08-08</td>\n      <td>13600.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>14.0</td>\n      <td>7.0</td>\n      <td>100.0</td>\n      <td>1.000000</td>\n      <td>0.930233</td>\n      <td>0.725806</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>a4G5e000000RQvQEAW</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4.75</td>\n      <td>1.49</td>\n      <td>21.17</td>\n      <td>531.0</td>\n      <td>2022-06-07</td>\n      <td>2022-06-07</td>\n      <td>6750.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>24.0</td>\n      <td>38.0</td>\n      <td>86.0</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.923077</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 40 columns</p>\n</div>"
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_active_df.head()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "clean_active = new_active_df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "outputs": [
    {
     "data": {
      "text/plain": "               rpmt_id  is_active  is_charged_off  opp_term  opp_factor  \\\n2   a4G5e000000RPmzEAG          1               0      9.00        1.49   \n10  a4G5e000000VNdTEAW          1               0     10.00        1.44   \n12  a4G5e000000RRwWEAW          0               1      7.25        1.49   \n13  a4G5e000000VLvpEAG          1               0      7.25        1.46   \n26  a4G5e000000RQvQEAW          0               0      4.75        1.49   \n\n    opp_percent_of_rev  opp_fico_score rpmt_advance_date rpmt_funding_date  \\\n2                16.59           586.0        2022-05-05        2022-05-04   \n10                4.50           648.0        2022-09-29        2022-09-28   \n12               20.55           624.0        2022-07-06        2022-07-06   \n13               21.07           599.0        2022-08-10        2022-08-08   \n26               21.17           531.0        2022-06-07        2022-06-07   \n\n    rpmt_funded_amt  ... m3_nsfs opp_adbs_div_rev  opp_last_mo_rev_trend  \\\n2           30000.0  ...     0.0              8.0                    6.0   \n10          10000.0  ...     0.0             34.0                   -5.0   \n12          10000.0  ...     0.0             10.0                  -30.0   \n13          13600.0  ...     0.0             14.0                    7.0   \n26           6750.0  ...     0.0             24.0                   38.0   \n\n    opp_rev_vol  pmt_rate_30d  pmt_rate_60d  pmt_rate_90d  hit_30_day_mark  \\\n2          28.0      1.000000      1.000000      1.000000                1   \n10         25.0      0.840000      0.866667      0.866667                1   \n12         95.0      0.619048      0.303514      0.200786                1   \n13        100.0      1.000000      0.930233      0.725806                1   \n26         86.0      1.000000      1.000000      0.923077                1   \n\n    hit_60_day_mark  hit_90_day_mark  \n2                 1                1  \n10                0                0  \n12                1                1  \n13                1                0  \n26                1                1  \n\n[5 rows x 40 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rpmt_id</th>\n      <th>is_active</th>\n      <th>is_charged_off</th>\n      <th>opp_term</th>\n      <th>opp_factor</th>\n      <th>opp_percent_of_rev</th>\n      <th>opp_fico_score</th>\n      <th>rpmt_advance_date</th>\n      <th>rpmt_funding_date</th>\n      <th>rpmt_funded_amt</th>\n      <th>...</th>\n      <th>m3_nsfs</th>\n      <th>opp_adbs_div_rev</th>\n      <th>opp_last_mo_rev_trend</th>\n      <th>opp_rev_vol</th>\n      <th>pmt_rate_30d</th>\n      <th>pmt_rate_60d</th>\n      <th>pmt_rate_90d</th>\n      <th>hit_30_day_mark</th>\n      <th>hit_60_day_mark</th>\n      <th>hit_90_day_mark</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>a4G5e000000RPmzEAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>9.00</td>\n      <td>1.49</td>\n      <td>16.59</td>\n      <td>586.0</td>\n      <td>2022-05-05</td>\n      <td>2022-05-04</td>\n      <td>30000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>28.0</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>a4G5e000000VNdTEAW</td>\n      <td>1</td>\n      <td>0</td>\n      <td>10.00</td>\n      <td>1.44</td>\n      <td>4.50</td>\n      <td>648.0</td>\n      <td>2022-09-29</td>\n      <td>2022-09-28</td>\n      <td>10000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>34.0</td>\n      <td>-5.0</td>\n      <td>25.0</td>\n      <td>0.840000</td>\n      <td>0.866667</td>\n      <td>0.866667</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>a4G5e000000RRwWEAW</td>\n      <td>0</td>\n      <td>1</td>\n      <td>7.25</td>\n      <td>1.49</td>\n      <td>20.55</td>\n      <td>624.0</td>\n      <td>2022-07-06</td>\n      <td>2022-07-06</td>\n      <td>10000.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>10.0</td>\n      <td>-30.0</td>\n      <td>95.0</td>\n      <td>0.619048</td>\n      <td>0.303514</td>\n      <td>0.200786</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>a4G5e000000VLvpEAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.25</td>\n      <td>1.46</td>\n      <td>21.07</td>\n      <td>599.0</td>\n      <td>2022-08-10</td>\n      <td>2022-08-08</td>\n      <td>13600.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>14.0</td>\n      <td>7.0</td>\n      <td>100.0</td>\n      <td>1.000000</td>\n      <td>0.930233</td>\n      <td>0.725806</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>a4G5e000000RQvQEAW</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4.75</td>\n      <td>1.49</td>\n      <td>21.17</td>\n      <td>531.0</td>\n      <td>2022-06-07</td>\n      <td>2022-06-07</td>\n      <td>6750.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>24.0</td>\n      <td>38.0</td>\n      <td>86.0</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.923077</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 40 columns</p>\n</div>"
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_active.head()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "df_active_tree = new_active_df.drop(['rpmt_id','rpmt_advance_date','rpmt_funding_date', 'pmt_rate_30d', 'pmt_rate_90d','rpmt_ed','rpmt_fmpr','is_active','is_charged_off','hit_30_day_mark','hit_60_day_mark','hit_90_day_mark'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "df_active_tree = pd.get_dummies(new_active_df, columns=['rpmt_industry', 'rpmt_product'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "outputs": [],
   "source": [
    "#df_active_tree['rpmt_product_Diamond'] = 0"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 360,
   "outputs": [],
   "source": [
    "#df_active_tree['rpmt_product_Titanium'] = 0"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "[]"
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_active_tree.columns.difference(df_tree.columns).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "outputs": [
    {
     "data": {
      "text/plain": "['is_charged_off']"
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tree.columns.difference(df_active_tree.columns).tolist()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "pred_xgboost = final_model.predict(df_active_tree.values)\n",
    "pred_prob_xgboost = final_model.predict_proba(df_active_tree.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "predictions_output = pred_prob_xgboost.round(2)\n",
    "predictions_output10 = pred_xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "outputs": [],
   "source": [
    "clean_active['group_terms'] = 0\n",
    "clean_active['group_terms'][clean_active['opp_term'] <= 7] = 1\n",
    "clean_active['group_terms'][clean_active['opp_term'] > 7] = 2\n",
    "clean_active['group_terms'][clean_active['opp_term'] > 12] = 3"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "clean_active['Predictions - Charge Off or Not'] = predictions_output10\n",
    "clean_active['Probability to Charge Off'] = predictions_output[:, 1].tolist()\n",
    "clean_active['Prediction Description'] = 'Empty'\n",
    "clean_active['Prediction Description'][clean_active['Predictions - Charge Off or Not'] == 0] = 'No Charge Off'\n",
    "clean_active['Prediction Description'][clean_active['Predictions - Charge Off or Not'] == 1] = 'Charge Off'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "                  rpmt_id  is_active  is_charged_off  opp_term  opp_factor  \\\n2      a4G5e000000RPmzEAG          1               0      9.00        1.49   \n10     a4G5e000000VNdTEAW          1               0     10.00        1.44   \n12     a4G5e000000RRwWEAW          0               1      7.25        1.49   \n13     a4G5e000000VLvpEAG          1               0      7.25        1.46   \n26     a4G5e000000RQvQEAW          0               0      4.75        1.49   \n...                   ...        ...             ...       ...         ...   \n20000  a4G5e000000VNT9EAO          1               0      5.00        1.44   \n20003  a4G5e000000VMz4EAG          1               0      7.50        1.49   \n20004  a4G5e000000VN9nEAG          0               0      4.25        1.44   \n20008  a4G5e000000VN78EAG          1               0     10.50        1.44   \n20016  a4G5e000000VOgJEAW          1               0     12.00        1.44   \n\n       opp_percent_of_rev  opp_fico_score rpmt_advance_date rpmt_funding_date  \\\n2                   16.59           586.0        2022-05-05        2022-05-04   \n10                   4.50           648.0        2022-09-29        2022-09-28   \n12                  20.55           624.0        2022-07-06        2022-07-06   \n13                  21.07           599.0        2022-08-10        2022-08-08   \n26                  21.17           531.0        2022-06-07        2022-06-07   \n...                   ...             ...               ...               ...   \n20000                7.91           618.0        2022-09-23        2022-09-22   \n20003                8.09           617.0        2022-09-07        2022-09-07   \n20004               13.33           540.0        2022-09-12        2022-09-12   \n20008                9.35           624.0        2022-09-12        2022-09-09   \n20016               12.83           665.0        2022-10-24        2022-10-24   \n\n       rpmt_funded_amt  ... pmt_rate_30d pmt_rate_60d  pmt_rate_90d  \\\n2              30000.0  ...     1.000000     1.000000      1.000000   \n10             10000.0  ...     0.840000     0.866667      0.866667   \n12             10000.0  ...     0.619048     0.303514      0.200786   \n13             13600.0  ...     1.000000     0.930233      0.725806   \n26              6750.0  ...     1.000000     1.000000      0.923077   \n...                ...  ...          ...          ...           ...   \n20000           7000.0  ...     1.000000     0.863194      0.863194   \n20003          11000.0  ...     1.000000     1.024390      1.024390   \n20004          29500.0  ...     1.000000     0.657895      0.657895   \n20008          15000.0  ...     1.000000     1.142857      1.142857   \n20016         155000.0  ...     1.125000     1.125000      1.125000   \n\n       hit_30_day_mark  hit_60_day_mark  hit_90_day_mark  group_terms  \\\n2                    1                1                1            2   \n10                   1                0                0            2   \n12                   1                1                1            2   \n13                   1                1                0            2   \n26                   1                1                1            1   \n...                ...              ...              ...          ...   \n20000                1                0                0            1   \n20003                1                0                0            2   \n20004                1                0                0            1   \n20008                1                0                0            2   \n20016                0                0                0            2   \n\n       Predictions - Charge Off or Not  Probability to Charge Off  \\\n2                                    0                       0.14   \n10                                   0                       0.16   \n12                                   1                       1.00   \n13                                   0                       0.20   \n26                                   0                       0.09   \n...                                ...                        ...   \n20000                                0                       0.17   \n20003                                0                       0.03   \n20004                                0                       0.48   \n20008                                0                       0.06   \n20016                                0                       0.28   \n\n       Prediction Description  \n2               No Charge Off  \n10              No Charge Off  \n12                 Charge Off  \n13              No Charge Off  \n26              No Charge Off  \n...                       ...  \n20000           No Charge Off  \n20003           No Charge Off  \n20004           No Charge Off  \n20008           No Charge Off  \n20016           No Charge Off  \n\n[4477 rows x 44 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rpmt_id</th>\n      <th>is_active</th>\n      <th>is_charged_off</th>\n      <th>opp_term</th>\n      <th>opp_factor</th>\n      <th>opp_percent_of_rev</th>\n      <th>opp_fico_score</th>\n      <th>rpmt_advance_date</th>\n      <th>rpmt_funding_date</th>\n      <th>rpmt_funded_amt</th>\n      <th>...</th>\n      <th>pmt_rate_30d</th>\n      <th>pmt_rate_60d</th>\n      <th>pmt_rate_90d</th>\n      <th>hit_30_day_mark</th>\n      <th>hit_60_day_mark</th>\n      <th>hit_90_day_mark</th>\n      <th>group_terms</th>\n      <th>Predictions - Charge Off or Not</th>\n      <th>Probability to Charge Off</th>\n      <th>Prediction Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>a4G5e000000RPmzEAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>9.00</td>\n      <td>1.49</td>\n      <td>16.59</td>\n      <td>586.0</td>\n      <td>2022-05-05</td>\n      <td>2022-05-04</td>\n      <td>30000.0</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0.14</td>\n      <td>No Charge Off</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>a4G5e000000VNdTEAW</td>\n      <td>1</td>\n      <td>0</td>\n      <td>10.00</td>\n      <td>1.44</td>\n      <td>4.50</td>\n      <td>648.0</td>\n      <td>2022-09-29</td>\n      <td>2022-09-28</td>\n      <td>10000.0</td>\n      <td>...</td>\n      <td>0.840000</td>\n      <td>0.866667</td>\n      <td>0.866667</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0.16</td>\n      <td>No Charge Off</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>a4G5e000000RRwWEAW</td>\n      <td>0</td>\n      <td>1</td>\n      <td>7.25</td>\n      <td>1.49</td>\n      <td>20.55</td>\n      <td>624.0</td>\n      <td>2022-07-06</td>\n      <td>2022-07-06</td>\n      <td>10000.0</td>\n      <td>...</td>\n      <td>0.619048</td>\n      <td>0.303514</td>\n      <td>0.200786</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1.00</td>\n      <td>Charge Off</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>a4G5e000000VLvpEAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.25</td>\n      <td>1.46</td>\n      <td>21.07</td>\n      <td>599.0</td>\n      <td>2022-08-10</td>\n      <td>2022-08-08</td>\n      <td>13600.0</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>0.930233</td>\n      <td>0.725806</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0.20</td>\n      <td>No Charge Off</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>a4G5e000000RQvQEAW</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4.75</td>\n      <td>1.49</td>\n      <td>21.17</td>\n      <td>531.0</td>\n      <td>2022-06-07</td>\n      <td>2022-06-07</td>\n      <td>6750.0</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.923077</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0.09</td>\n      <td>No Charge Off</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>20000</th>\n      <td>a4G5e000000VNT9EAO</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5.00</td>\n      <td>1.44</td>\n      <td>7.91</td>\n      <td>618.0</td>\n      <td>2022-09-23</td>\n      <td>2022-09-22</td>\n      <td>7000.0</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>0.863194</td>\n      <td>0.863194</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0.17</td>\n      <td>No Charge Off</td>\n    </tr>\n    <tr>\n      <th>20003</th>\n      <td>a4G5e000000VMz4EAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.50</td>\n      <td>1.49</td>\n      <td>8.09</td>\n      <td>617.0</td>\n      <td>2022-09-07</td>\n      <td>2022-09-07</td>\n      <td>11000.0</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>1.024390</td>\n      <td>1.024390</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0.03</td>\n      <td>No Charge Off</td>\n    </tr>\n    <tr>\n      <th>20004</th>\n      <td>a4G5e000000VN9nEAG</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4.25</td>\n      <td>1.44</td>\n      <td>13.33</td>\n      <td>540.0</td>\n      <td>2022-09-12</td>\n      <td>2022-09-12</td>\n      <td>29500.0</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>0.657895</td>\n      <td>0.657895</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0.48</td>\n      <td>No Charge Off</td>\n    </tr>\n    <tr>\n      <th>20008</th>\n      <td>a4G5e000000VN78EAG</td>\n      <td>1</td>\n      <td>0</td>\n      <td>10.50</td>\n      <td>1.44</td>\n      <td>9.35</td>\n      <td>624.0</td>\n      <td>2022-09-12</td>\n      <td>2022-09-09</td>\n      <td>15000.0</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>1.142857</td>\n      <td>1.142857</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0.06</td>\n      <td>No Charge Off</td>\n    </tr>\n    <tr>\n      <th>20016</th>\n      <td>a4G5e000000VOgJEAW</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12.00</td>\n      <td>1.44</td>\n      <td>12.83</td>\n      <td>665.0</td>\n      <td>2022-10-24</td>\n      <td>2022-10-24</td>\n      <td>155000.0</td>\n      <td>...</td>\n      <td>1.125000</td>\n      <td>1.125000</td>\n      <td>1.125000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0.28</td>\n      <td>No Charge Off</td>\n    </tr>\n  </tbody>\n</table>\n<p>4477 rows Ã— 44 columns</p>\n</div>"
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_active"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
